{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/next/src/shared/lib/router-context.shared-runtime.ts"],"sourcesContent":["import React from 'react'\nimport type { NextRouter } from './router/router'\n\nexport const RouterContext = React.createContext<NextRouter | null>(null)\n\nif (process.env.NODE_ENV !== 'production') {\n  RouterContext.displayName = 'RouterContext'\n}\n"],"names":["RouterContext","React","createContext","process","env","NODE_ENV","displayName"],"mappings":";;;;+BAGaA,iBAAAA;;;eAAAA;;;;gEAHK;AAGX,MAAMA,gBAAgBC,OAAAA,OAAK,CAACC,aAAa,CAAoB;AAEpE,IAAIC,QAAQC,GAAG,CAACC,QAAQ,KAAK,WAAc;IACzCL,cAAcM,WAAW,GAAG;AAC9B","ignoreList":[0]}},
    {"offset": {"line": 22, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 27, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/next/src/shared/lib/app-router-context.shared-runtime.ts"],"sourcesContent":["'use client'\n\nimport type { FetchServerResponseResult } from '../../client/components/router-reducer/fetch-server-response'\nimport type {\n  FocusAndScrollRef,\n  PrefetchKind,\n  RouterChangeByServerResponse,\n} from '../../client/components/router-reducer/router-reducer-types'\nimport type { FlightRouterState } from '../../server/app-render/types'\nimport React from 'react'\n\nexport type ChildSegmentMap = Map<string, CacheNode>\n\n/**\n * Cache node used in app-router / layout-router.\n */\nexport type CacheNode = ReadyCacheNode | LazyCacheNode\n\nexport type LoadingModuleData =\n  | [React.JSX.Element, React.ReactNode, React.ReactNode]\n  | null\n\nexport type LazyCacheNode = {\n  /**\n   * When rsc is null, this is a lazily-initialized cache node.\n   *\n   * If the app attempts to render it, it triggers a lazy data fetch,\n   * postpones the render, and schedules an update to a new tree.\n   *\n   * TODO: This mechanism should not be used when PPR is enabled, though it\n   * currently is in some cases until we've implemented partial\n   * segment fetching.\n   */\n  rsc: null\n\n  /**\n   * A prefetched version of the segment data. See explanation in corresponding\n   * field of ReadyCacheNode (below).\n   *\n   * Since LazyCacheNode mostly only exists in the non-PPR implementation, this\n   * will usually be null, but it could have been cloned from a previous\n   * CacheNode that was created by the PPR implementation. Eventually we want\n   * to migrate everything away from LazyCacheNode entirely.\n   */\n  prefetchRsc: React.ReactNode\n\n  /**\n   * A pending response for the lazy data fetch. If this is not present\n   * during render, it is lazily created.\n   */\n  lazyData: Promise<FetchServerResponseResult> | null\n\n  prefetchHead: React.ReactNode\n  head: React.ReactNode\n\n  loading: LoadingModuleData\n\n  /**\n   * Child parallel routes.\n   */\n  parallelRoutes: Map<string, ChildSegmentMap>\n}\n\nexport type ReadyCacheNode = {\n  /**\n   * When rsc is not null, it represents the RSC data for the\n   * corresponding segment.\n   *\n   * `null` is a valid React Node but because segment data is always a\n   * <LayoutRouter> component, we can use `null` to represent empty.\n   *\n   * TODO: For additional type safety, update this type to\n   * Exclude<React.ReactNode, null>. Need to update createEmptyCacheNode to\n   * accept rsc as an argument, or just inline the callers.\n   */\n  rsc: React.ReactNode\n\n  /**\n   * Represents a static version of the segment that can be shown immediately,\n   * and may or may not contain dynamic holes. It's prefetched before a\n   * navigation occurs.\n   *\n   * During rendering, we will choose whether to render `rsc` or `prefetchRsc`\n   * with `useDeferredValue`. As with the `rsc` field, a value of `null` means\n   * no value was provided. In this case, the LayoutRouter will go straight to\n   * rendering the `rsc` value; if that one is also missing, it will suspend and\n   * trigger a lazy fetch.\n   */\n  prefetchRsc: React.ReactNode\n\n  /**\n   * There should never be a lazy data request in this case.\n   */\n  lazyData: null\n  prefetchHead: React.ReactNode\n  head: React.ReactNode\n\n  loading: LoadingModuleData\n\n  parallelRoutes: Map<string, ChildSegmentMap>\n}\n\nexport interface NavigateOptions {\n  scroll?: boolean\n}\n\nexport interface PrefetchOptions {\n  kind: PrefetchKind\n}\n\nexport interface AppRouterInstance {\n  /**\n   * Navigate to the previous history entry.\n   */\n  back(): void\n  /**\n   * Navigate to the next history entry.\n   */\n  forward(): void\n  /**\n   * Refresh the current page.\n   */\n  refresh(): void\n  /**\n   * Refresh the current page. Use in development only.\n   * @internal\n   */\n  hmrRefresh(): void\n  /**\n   * Navigate to the provided href.\n   * Pushes a new history entry.\n   */\n  push(href: string, options?: NavigateOptions): void\n  /**\n   * Navigate to the provided href.\n   * Replaces the current history entry.\n   */\n  replace(href: string, options?: NavigateOptions): void\n  /**\n   * Prefetch the provided href.\n   */\n  prefetch(href: string, options?: PrefetchOptions): void\n}\n\nexport const AppRouterContext = React.createContext<AppRouterInstance | null>(\n  null\n)\nexport const LayoutRouterContext = React.createContext<{\n  childNodes: CacheNode['parallelRoutes']\n  tree: FlightRouterState\n  url: string\n  loading: LoadingModuleData\n} | null>(null)\n\nexport const GlobalLayoutRouterContext = React.createContext<{\n  buildId: string\n  tree: FlightRouterState\n  changeByServerResponse: RouterChangeByServerResponse\n  focusAndScrollRef: FocusAndScrollRef\n  nextUrl: string | null\n}>(null as any)\n\nexport const TemplateContext = React.createContext<React.ReactNode>(null as any)\n\nif (process.env.NODE_ENV !== 'production') {\n  AppRouterContext.displayName = 'AppRouterContext'\n  LayoutRouterContext.displayName = 'LayoutRouterContext'\n  GlobalLayoutRouterContext.displayName = 'GlobalLayoutRouterContext'\n  TemplateContext.displayName = 'TemplateContext'\n}\n\nexport const MissingSlotContext = React.createContext<Set<string>>(new Set())\n"],"names":["AppRouterContext","GlobalLayoutRouterContext","LayoutRouterContext","MissingSlotContext","TemplateContext","React","createContext","process","env","NODE_ENV","displayName","Set"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;IAgJaA,IAAAA,SAAAA,GAAgB;eAAhBA,OAAAA;;IAUAC,yBAAyB;eAAzBA,gBAAAA;;IAPAC,mBAAmB;eAAnBA,UAAAA;;IAwBAC,kBAAkB;eAAlBA,SAAAA;;IATAC,eAAe;eAAfA,MAAAA;;;;gEAzJK;AAuIX,MAAMJ,SAAAA,UAAmBK,CAAAA,GAAAA,UAAK,CAACC,aAAa,CACjD,CAAA;AAEK,MAAMJ,mBAAAA,GAAsBG,IAAAA,OAAAA,CAAAA,EAAK,CAACC,UAAAA,CAAAA,EAAa,CAK5C;AAEH,MAAML,sBAAAA,MAA4BI,CAAAA,OAAAA,CAAAA,KAAK,CAACC,OAAAA,CAAAA,KAAa,CAMzD;AAEI,MAAMF,kBAAkBC,UAAAA,IAAK,CAACC,EAAAA,OAAAA,CAAAA,GAAa,CAAkB,SAAA,CAAA;AAEpE,IAAIC,EAAAA,MAAQC,GAAG,CAACC,QAAQ,KAAK,EAAA,OAAA,CAAA,IAAc,SAAA,CAAA;IACzCT,iBAAiBU,WAAW,GAAG,KAAA;IAC/BR,iBAAAA,GAAoBQ,QAAAA,GAAW,GAAG;IAClCT,oBAAAA,MAA0BS,KAAAA,GAAAA,GAAW,GAAG;IACxCN,gBAAgBM,UAAAA,CAAW,GAAG,OAAA,GAAA;IAChC,gBAAA,WAAA,GAAA;AAEO,MAAMP,qBAAqBE,cAAK,CAACC,aAAa,CAAc,IAAIK","ignoreList":[0]}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 80, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/next/src/shared/lib/hooks-client-context.shared-runtime.ts"],"sourcesContent":["'use client'\n\nimport { createContext } from 'react'\nimport type { Params } from '../../server/request/params'\n\nexport const SearchParamsContext = createContext<URLSearchParams | null>(null)\nexport const PathnameContext = createContext<string | null>(null)\nexport const PathParamsContext = createContext<Params | null>(null)\n\nif (process.env.NODE_ENV !== 'production') {\n  SearchParamsContext.displayName = 'SearchParamsContext'\n  PathnameContext.displayName = 'PathnameContext'\n  PathParamsContext.displayName = 'PathParamsContext'\n}\n"],"names":["PathParamsContext","PathnameContext","SearchParamsContext","createContext","process","env","NODE_ENV","displayName"],"mappings":"AAAA;;;;;;;;;;;;;;;;IAOaA,IAAAA,SAAAA,IAAiB;eAAjBA,QAAAA;;IADAC,eAAe;eAAfA,MAAAA;;IADAC,mBAAmB;eAAnBA,UAAAA;;;uBAHiB;AAGvB,MAAMA,sBAAsBC,IAAAA,oBAAa,EAAyB;AAClE,MAAMF,kBAAkBE,IAAAA,CAAAA,GAAAA,OAAAA,SAAa,EAAgB,EAAA,EAAA;AACrD,MAAMH,kBAAAA,CAAAA,CAAoBG,EAAAA,EAAAA,KAAAA,aAAAA,EAAa,EAAgB;AAE9D,IAAIC,EAAAA,MAAQC,GAAG,CAACC,QAAQ,EAAA,CAAA,EAAK,CAAA,OAAA,MAAc,OAAA,EAAA;IACzCJ,oBAAoBK,WAAW,GAAG,EAAA;IAClCN,gBAAgBM,IAAAA,OAAW,GAAG,CAAA,GAAA;IAC9BP,gBAAAA,EAAkBO,SAAAA,EAAW,CAAA,EAAG;IAClC,kBAAA,WAAA,GAAA","ignoreList":[0]}},
    {"offset": {"line": 116, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/next/src/shared/lib/server-inserted-html.shared-runtime.tsx"],"sourcesContent":["'use client'\n\nimport React, { useContext } from 'react'\n\nexport type ServerInsertedHTMLHook = (callbacks: () => React.ReactNode) => void\n\n// Use `React.createContext` to avoid errors from the RSC checks because\n// it can't be imported directly in Server Components:\n//\n//   import { createContext } from 'react'\n//\n// More info: https://github.com/vercel/next.js/pull/40686\nexport const ServerInsertedHTMLContext =\n  React.createContext<ServerInsertedHTMLHook | null>(null as any)\n\nexport function useServerInsertedHTML(callback: () => React.ReactNode): void {\n  const addInsertedServerHTMLCallback = useContext(ServerInsertedHTMLContext)\n  // Should have no effects on client where there's no flush effects provider\n  if (addInsertedServerHTMLCallback) {\n    addInsertedServerHTMLCallback(callback)\n  }\n}\n"],"names":["ServerInsertedHTMLContext","useServerInsertedHTML","React","createContext","callback","addInsertedServerHTMLCallback","useContext"],"mappings":"AAAA;;;;;;;;;;;;;;;IAYaA,IAAAA,SAAAA,YAAyB;eAAzBA,gBAAAA;;IAGGC,qBAAqB;eAArBA,YAAAA;;;;iEAbkB;AAU3B,MAAMD,SAAAA,WAAAA,GAAAA,mBACXE,OAAAA,CAAAA,MAAK,CAACC,aAAa,CAAgC;AAE9C,MAAA,GAASF,sBAAsBG,GAAAA,KAA+B,MAAA,GAAA,OAAA,OAAA,CAAA,aAAA,CAAA;IACnE,KAAA,CAAMC,qBAAAA,QAAAA,GAAgCC,IAAAA,iBAAU,EAACN;IACjD,MAAA,gCAAA,CAAA,GAAA,OAAA,UAAA,EAAA,cAA2E;IAC3E,IAAIK,+BAA+B,wCAAA;QACjCA,8BAA8BD,CAAAA;QAChC,8BAAA;IACF","ignoreList":[0]}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}