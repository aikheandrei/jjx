{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/foreign-keys.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport { TableName } from '~/table.utils.ts';\nimport type { AnySQLiteColumn, SQLiteColumn } from './columns/index.ts';\nimport type { SQLiteTable } from './table.ts';\n\nexport type UpdateDeleteAction = 'cascade' | 'restrict' | 'no action' | 'set null' | 'set default';\n\nexport type Reference = () => {\n\treadonly name?: string;\n\treadonly columns: SQLiteColumn[];\n\treadonly foreignTable: SQLiteTable;\n\treadonly foreignColumns: SQLiteColumn[];\n};\n\nexport class ForeignKeyBuilder {\n\tstatic readonly [entityKind]: string = 'SQLiteForeignKeyBuilder';\n\n\tdeclare _: {\n\t\tbrand: 'SQLiteForeignKeyBuilder';\n\t\tforeignTableName: 'TForeignTableName';\n\t};\n\n\t/** @internal */\n\treference: Reference;\n\n\t/** @internal */\n\t_onUpdate: UpdateDeleteAction | undefined;\n\n\t/** @internal */\n\t_onDelete: UpdateDeleteAction | undefined;\n\n\tconstructor(\n\t\tconfig: () => {\n\t\t\tname?: string;\n\t\t\tcolumns: SQLiteColumn[];\n\t\t\tforeignColumns: SQLiteColumn[];\n\t\t},\n\t\tactions?: {\n\t\t\tonUpdate?: UpdateDeleteAction;\n\t\t\tonDelete?: UpdateDeleteAction;\n\t\t} | undefined,\n\t) {\n\t\tthis.reference = () => {\n\t\t\tconst { name, columns, foreignColumns } = config();\n\t\t\treturn { name, columns, foreignTable: foreignColumns[0]!.table as SQLiteTable, foreignColumns };\n\t\t};\n\t\tif (actions) {\n\t\t\tthis._onUpdate = actions.onUpdate;\n\t\t\tthis._onDelete = actions.onDelete;\n\t\t}\n\t}\n\n\tonUpdate(action: UpdateDeleteAction): this {\n\t\tthis._onUpdate = action;\n\t\treturn this;\n\t}\n\n\tonDelete(action: UpdateDeleteAction): this {\n\t\tthis._onDelete = action;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tbuild(table: SQLiteTable): ForeignKey {\n\t\treturn new ForeignKey(table, this);\n\t}\n}\n\nexport class ForeignKey {\n\tstatic readonly [entityKind]: string = 'SQLiteForeignKey';\n\n\treadonly reference: Reference;\n\treadonly onUpdate: UpdateDeleteAction | undefined;\n\treadonly onDelete: UpdateDeleteAction | undefined;\n\n\tconstructor(readonly table: SQLiteTable, builder: ForeignKeyBuilder) {\n\t\tthis.reference = builder.reference;\n\t\tthis.onUpdate = builder._onUpdate;\n\t\tthis.onDelete = builder._onDelete;\n\t}\n\n\tgetName(): string {\n\t\tconst { name, columns, foreignColumns } = this.reference();\n\t\tconst columnNames = columns.map((column) => column.name);\n\t\tconst foreignColumnNames = foreignColumns.map((column) => column.name);\n\t\tconst chunks = [\n\t\t\tthis.table[TableName],\n\t\t\t...columnNames,\n\t\t\tforeignColumns[0]!.table[TableName],\n\t\t\t...foreignColumnNames,\n\t\t];\n\t\treturn name ?? `${chunks.join('_')}_fk`;\n\t}\n}\n\ntype ColumnsWithTable<\n\tTTableName extends string,\n\tTColumns extends SQLiteColumn[],\n> = { [Key in keyof TColumns]: AnySQLiteColumn<{ tableName: TTableName }> };\n\n/**\n * @deprecated please use `foreignKey({ columns: [], foreignColumns: [] })` syntax without callback\n * @param config\n * @returns\n */\nexport function foreignKey<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends [AnySQLiteColumn<{ tableName: TTableName }>, ...AnySQLiteColumn<{ tableName: TTableName }>[]],\n>(\n\tconfig: () => {\n\t\tname?: string;\n\t\tcolumns: TColumns;\n\t\tforeignColumns: ColumnsWithTable<TForeignTableName, TColumns>;\n\t},\n): ForeignKeyBuilder;\nexport function foreignKey<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends [AnySQLiteColumn<{ tableName: TTableName }>, ...AnySQLiteColumn<{ tableName: TTableName }>[]],\n>(\n\tconfig: {\n\t\tname?: string;\n\t\tcolumns: TColumns;\n\t\tforeignColumns: ColumnsWithTable<TForeignTableName, TColumns>;\n\t},\n): ForeignKeyBuilder;\nexport function foreignKey(\n\tconfig: any,\n): ForeignKeyBuilder {\n\tfunction mappedConfig() {\n\t\tif (typeof config === 'function') {\n\t\t\tconst { name, columns, foreignColumns } = config();\n\t\t\treturn {\n\t\t\t\tname,\n\t\t\t\tcolumns,\n\t\t\t\tforeignColumns,\n\t\t\t};\n\t\t}\n\t\treturn config;\n\t}\n\n\treturn new ForeignKeyBuilder(mappedConfig);\n}\n"],"names":[],"mappings":";;;;;AAAA,SAAS,kBAAkB;AAC3B,SAAS,iBAAiB;;;AAanB,MAAM,kBAAkB;IAC9B,OAAA,kJAAiB,aAAU,CAAA,GAAY,0BAAA;IAAA,cAAA,GAQvC,UAAA;IAAA,cAAA,GAGA,UAAA;IAAA,cAAA,GAGA,UAAA;IAEA,YACC,MAAA,EAKA,OAAA,CAIC;QACD,IAAA,CAAK,SAAA,GAAY,MAAM;YACtB,MAAM,EAAE,IAAA,EAAM,OAAA,EAAS,cAAA,CAAe,CAAA,GAAI,OAAO;YACjD,OAAO;gBAAE;gBAAM;gBAAS,cAAc,cAAA,CAAe,CAAC,CAAA,CAAG,KAAA;gBAAsB;YAAe;QAC/F;QACA,IAAI,SAAS;YACZ,IAAA,CAAK,SAAA,GAAY,QAAQ,QAAA;YACzB,IAAA,CAAK,SAAA,GAAY,QAAQ,QAAA;QAC1B;IACD;IAEA,SAAS,MAAA,EAAkC;QAC1C,IAAA,CAAK,SAAA,GAAY;QACjB,OAAO,IAAA;IACR;IAEA,SAAS,MAAA,EAAkC;QAC1C,IAAA,CAAK,SAAA,GAAY;QACjB,OAAO,IAAA;IACR;IAAA,cAAA,GAGA,MAAM,KAAA,EAAgC;QACrC,OAAO,IAAI,WAAW,OAAO,IAAI;IAClC;AACD;AAEO,MAAM,WAAW;IAOvB,YAAqB,KAAA,EAAoB,OAAA,CAA4B;QAAhD,IAAA,CAAA,KAAA,GAAA;QACpB,IAAA,CAAK,SAAA,GAAY,QAAQ,SAAA;QACzB,IAAA,CAAK,QAAA,GAAW,QAAQ,SAAA;QACxB,IAAA,CAAK,QAAA,GAAW,QAAQ,SAAA;IACzB;IAVA,OAAA,kJAAiB,aAAU,CAAA,GAAY,mBAAA;IAE9B,UAAA;IACA,SAAA;IACA,SAAA;IAQT,UAAkB;QACjB,MAAM,EAAE,IAAA,EAAM,OAAA,EAAS,cAAA,CAAe,CAAA,GAAI,IAAA,CAAK,SAAA,CAAU;QACzD,MAAM,cAAc,QAAQ,GAAA,CAAI,CAAC,SAAW,OAAO,IAAI;QACvD,MAAM,qBAAqB,eAAe,GAAA,CAAI,CAAC,SAAW,OAAO,IAAI;QACrE,MAAM,SAAS;YACd,IAAA,CAAK,KAAA,0JAAM,YAAS,CAAA;eACjB;YACH,cAAA,CAAe,CAAC,CAAA,CAAG,KAAA,0JAAM,YAAS,CAAA;eAC/B;SACJ;QACA,OAAO,QAAQ,GAAG,OAAO,IAAA,CAAK,GAAG,CAAC,CAAA,GAAA,CAAA;IACnC;AACD;AAkCO,SAAS,WACf,MAAA,EACoB;IACpB,SAAS,eAAe;QACvB,IAAI,OAAO,WAAW,YAAY;YACjC,MAAM,EAAE,IAAA,EAAM,OAAA,EAAS,cAAA,CAAe,CAAA,GAAI,OAAO;YACjD,OAAO;gBACN;gBACA;gBACA;YACD;QACD;QACA,OAAO;IACR;IAEA,OAAO,IAAI,kBAAkB,YAAY;AAC1C","ignoreList":[0]}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 94, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/unique-constraint.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport { TableName } from '~/table.utils.ts';\nimport type { SQLiteColumn } from './columns/common.ts';\nimport type { SQLiteTable } from './table.ts';\n\nexport function uniqueKeyName(table: SQLiteTable, columns: string[]) {\n\treturn `${table[TableName]}_${columns.join('_')}_unique`;\n}\n\nexport function unique(name?: string): UniqueOnConstraintBuilder {\n\treturn new UniqueOnConstraintBuilder(name);\n}\n\nexport class UniqueConstraintBuilder {\n\tstatic readonly [entityKind]: string = 'SQLiteUniqueConstraintBuilder';\n\n\t/** @internal */\n\tcolumns: SQLiteColumn[];\n\n\tconstructor(\n\t\tcolumns: SQLiteColumn[],\n\t\tprivate name?: string,\n\t) {\n\t\tthis.columns = columns;\n\t}\n\n\t/** @internal */\n\tbuild(table: SQLiteTable): UniqueConstraint {\n\t\treturn new UniqueConstraint(table, this.columns, this.name);\n\t}\n}\n\nexport class UniqueOnConstraintBuilder {\n\tstatic readonly [entityKind]: string = 'SQLiteUniqueOnConstraintBuilder';\n\n\t/** @internal */\n\tname?: string;\n\n\tconstructor(\n\t\tname?: string,\n\t) {\n\t\tthis.name = name;\n\t}\n\n\ton(...columns: [SQLiteColumn, ...SQLiteColumn[]]) {\n\t\treturn new UniqueConstraintBuilder(columns, this.name);\n\t}\n}\n\nexport class UniqueConstraint {\n\tstatic readonly [entityKind]: string = 'SQLiteUniqueConstraint';\n\n\treadonly columns: SQLiteColumn[];\n\treadonly name?: string;\n\n\tconstructor(readonly table: SQLiteTable, columns: SQLiteColumn[], name?: string) {\n\t\tthis.columns = columns;\n\t\tthis.name = name ?? uniqueKeyName(this.table, this.columns.map((column) => column.name));\n\t}\n\n\tgetName() {\n\t\treturn this.name;\n\t}\n}\n"],"names":[],"mappings":";;;;;;;AAAA,SAAS,kBAAkB;AAC3B,SAAS,iBAAiB;;;AAInB,SAAS,cAAc,KAAA,EAAoB,OAAA,EAAmB;IACpE,OAAO,GAAG,KAAA,0JAAM,YAAS,CAAC,CAAA,CAAA,EAAI,QAAQ,IAAA,CAAK,GAAG,CAAC,CAAA,OAAA,CAAA;AAChD;AAEO,SAAS,OAAO,IAAA,EAA0C;IAChE,OAAO,IAAI,0BAA0B,IAAI;AAC1C;AAEO,MAAM,wBAAwB;IAMpC,YACC,OAAA,EACQ,IAAA,CACP;QADO,IAAA,CAAA,IAAA,GAAA;QAER,IAAA,CAAK,OAAA,GAAU;IAChB;IAVA,OAAA,kJAAiB,aAAU,CAAA,GAAY,gCAAA;IAAA,cAAA,GAGvC,QAAA;IAAA,cAAA,GAUA,MAAM,KAAA,EAAsC;QAC3C,OAAO,IAAI,iBAAiB,OAAO,IAAA,CAAK,OAAA,EAAS,IAAA,CAAK,IAAI;IAC3D;AACD;AAEO,MAAM,0BAA0B;IACtC,OAAA,kJAAiB,aAAU,CAAA,GAAY,kCAAA;IAAA,cAAA,GAGvC,KAAA;IAEA,YACC,IAAA,CACC;QACD,IAAA,CAAK,IAAA,GAAO;IACb;IAEA,GAAA,GAAM,OAAA,EAA4C;QACjD,OAAO,IAAI,wBAAwB,SAAS,IAAA,CAAK,IAAI;IACtD;AACD;AAEO,MAAM,iBAAiB;IAM7B,YAAqB,KAAA,EAAoB,OAAA,EAAyB,IAAA,CAAe;QAA5D,IAAA,CAAA,KAAA,GAAA;QACpB,IAAA,CAAK,OAAA,GAAU;QACf,IAAA,CAAK,IAAA,GAAO,QAAQ,cAAc,IAAA,CAAK,KAAA,EAAO,IAAA,CAAK,OAAA,CAAQ,GAAA,CAAI,CAAC,SAAW,OAAO,IAAI,CAAC;IACxF;IARA,OAAA,kJAAiB,aAAU,CAAA,GAAY,yBAAA;IAE9B,QAAA;IACA,KAAA;IAOT,UAAU;QACT,OAAO,IAAA,CAAK,IAAA;IACb;AACD","ignoreList":[0]}},
    {"offset": {"line": 147, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 153, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/columns/common.ts"],"sourcesContent":["import type {\n\tColumnBuilderBase,\n\tColumnBuilderBaseConfig,\n\tColumnBuilderExtraConfig,\n\tColumnBuilderRuntimeConfig,\n\tColumnDataType,\n\tHasGenerated,\n\tMakeColumnConfig,\n} from '~/column-builder.ts';\nimport { ColumnBuilder } from '~/column-builder.ts';\nimport { Column } from '~/column.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { SQL } from '~/sql/sql.ts';\nimport type { ForeignKey, UpdateDeleteAction } from '~/sqlite-core/foreign-keys.ts';\nimport { ForeignKeyBuilder } from '~/sqlite-core/foreign-keys.ts';\nimport type { AnySQLiteTable, SQLiteTable } from '~/sqlite-core/table.ts';\nimport type { Update } from '~/utils.ts';\nimport { uniqueKeyName } from '../unique-constraint.ts';\n\nexport interface ReferenceConfig {\n\tref: () => SQLiteColumn;\n\tactions: {\n\t\tonUpdate?: UpdateDeleteAction;\n\t\tonDelete?: UpdateDeleteAction;\n\t};\n}\n\nexport interface SQLiteColumnBuilderBase<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTypeConfig extends object = object,\n> extends ColumnBuilderBase<T, TTypeConfig & { dialect: 'sqlite' }> {}\n\nexport interface SQLiteGeneratedColumnConfig {\n\tmode?: 'virtual' | 'stored';\n}\n\nexport abstract class SQLiteColumnBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n\tTTypeConfig extends object = object,\n\tTExtraConfig extends ColumnBuilderExtraConfig = object,\n> extends ColumnBuilder<T, TRuntimeConfig, TTypeConfig & { dialect: 'sqlite' }, TExtraConfig>\n\timplements SQLiteColumnBuilderBase<T, TTypeConfig>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteColumnBuilder';\n\n\tprivate foreignKeyConfigs: ReferenceConfig[] = [];\n\n\treferences(\n\t\tref: ReferenceConfig['ref'],\n\t\tactions: ReferenceConfig['actions'] = {},\n\t): this {\n\t\tthis.foreignKeyConfigs.push({ ref, actions });\n\t\treturn this;\n\t}\n\n\tunique(\n\t\tname?: string,\n\t): this {\n\t\tthis.config.isUnique = true;\n\t\tthis.config.uniqueName = name;\n\t\treturn this;\n\t}\n\n\tgeneratedAlwaysAs(as: SQL | T['data'] | (() => SQL), config?: SQLiteGeneratedColumnConfig): HasGenerated<this, {\n\t\ttype: 'always';\n\t}> {\n\t\tthis.config.generated = {\n\t\t\tas,\n\t\t\ttype: 'always',\n\t\t\tmode: config?.mode ?? 'virtual',\n\t\t};\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tbuildForeignKeys(column: SQLiteColumn, table: SQLiteTable): ForeignKey[] {\n\t\treturn this.foreignKeyConfigs.map(({ ref, actions }) => {\n\t\t\treturn ((ref, actions) => {\n\t\t\t\tconst builder = new ForeignKeyBuilder(() => {\n\t\t\t\t\tconst foreignColumn = ref();\n\t\t\t\t\treturn { columns: [column], foreignColumns: [foreignColumn] };\n\t\t\t\t});\n\t\t\t\tif (actions.onUpdate) {\n\t\t\t\t\tbuilder.onUpdate(actions.onUpdate);\n\t\t\t\t}\n\t\t\t\tif (actions.onDelete) {\n\t\t\t\t\tbuilder.onDelete(actions.onDelete);\n\t\t\t\t}\n\t\t\t\treturn builder.build(table);\n\t\t\t})(ref, actions);\n\t\t});\n\t}\n\n\t/** @internal */\n\tabstract build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteColumn<MakeColumnConfig<T, TTableName>>;\n}\n\n// To understand how to use `SQLiteColumn` and `AnySQLiteColumn`, see `Column` and `AnyColumn` documentation.\nexport abstract class SQLiteColumn<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n> extends Column<T, TRuntimeConfig, { dialect: 'sqlite' }> {\n\tstatic override readonly [entityKind]: string = 'SQLiteColumn';\n\n\tconstructor(\n\t\toverride readonly table: SQLiteTable,\n\t\tconfig: ColumnBuilderRuntimeConfig<T['data'], TRuntimeConfig>,\n\t) {\n\t\tif (!config.uniqueName) {\n\t\t\tconfig.uniqueName = uniqueKeyName(table, [config.name]);\n\t\t}\n\t\tsuper(table, config);\n\t}\n}\n\nexport type AnySQLiteColumn<TPartial extends Partial<ColumnBaseConfig<ColumnDataType, string>> = {}> = SQLiteColumn<\n\tRequired<Update<ColumnBaseConfig<ColumnDataType, string>, TPartial>>\n>;\n"],"names":["ref","actions"],"mappings":";;;;AAYA,SAAS,kBAAkB;AAG3B,SAAS,yBAAyB;AANlC,SAAS,qBAAqB;AAS9B,SAAS,qBAAqB;AAR9B,SAAS,cAAc;;;;;;AA2BhB,MAAe,wLAKZ,gBAAA,CAEV;IACC,OAAA,kJAA0B,aAAU,CAAA,GAAY,sBAAA;IAExC,oBAAuC,CAAC,CAAA,CAAA;IAEhD,WACC,GAAA,EACA,UAAsC,CAAC,CAAA,EAChC;QACP,IAAA,CAAK,iBAAA,CAAkB,IAAA,CAAK;YAAE;YAAK;QAAQ,CAAC;QAC5C,OAAO,IAAA;IACR;IAEA,OACC,IAAA,EACO;QACP,IAAA,CAAK,MAAA,CAAO,QAAA,GAAW;QACvB,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa;QACzB,OAAO,IAAA;IACR;IAEA,kBAAkB,EAAA,EAAmC,MAAA,EAElD;QACF,IAAA,CAAK,MAAA,CAAO,SAAA,GAAY;YACvB;YACA,MAAM;YACN,MAAM,QAAQ,QAAQ;QACvB;QACA,OAAO,IAAA;IACR;IAAA,cAAA,GAGA,iBAAiB,MAAA,EAAsB,KAAA,EAAkC;QACxE,OAAO,IAAA,CAAK,iBAAA,CAAkB,GAAA,CAAI,CAAC,EAAE,GAAA,EAAK,OAAA,CAAQ,CAAA,KAAM;YACvD,OAAA,CAAQ,CAACA,MAAKC,aAAY;gBACzB,MAAM,UAAU,gLAAI,oBAAA,CAAkB,MAAM;oBAC3C,MAAM,gBAAgBD,KAAI;oBAC1B,OAAO;wBAAE,SAAS;4BAAC,MAAM;yBAAA;wBAAG,gBAAgB;4BAAC,aAAa;yBAAA;oBAAE;gBAC7D,CAAC;gBACD,IAAIC,SAAQ,QAAA,EAAU;oBACrB,QAAQ,QAAA,CAASA,SAAQ,QAAQ;gBAClC;gBACA,IAAIA,SAAQ,QAAA,EAAU;oBACrB,QAAQ,QAAA,CAASA,SAAQ,QAAQ;gBAClC;gBACA,OAAO,QAAQ,KAAA,CAAM,KAAK;YAC3B,CAAA,EAAG,KAAK,OAAO;QAChB,CAAC;IACF;AAMD;AAGO,MAAe,sKAGZ,SAAA,CAAiD;IAG1D,YACmB,KAAA,EAClB,MAAA,CACC;QACD,IAAI,CAAC,OAAO,UAAA,EAAY;YACvB,OAAO,UAAA,wLAAa,gBAAA,EAAc,OAAO;gBAAC,OAAO,IAAI;aAAC;QACvD;QACA,KAAA,CAAM,OAAO,MAAM;QAND,IAAA,CAAA,KAAA,GAAA;IAOnB;IAVA,OAAA,kJAA0B,aAAU,CAAA,GAAY,eAAA;AAWjD","ignoreList":[0]}},
    {"offset": {"line": 229, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 235, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/columns/blob.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnySQLiteTable } from '~/sqlite-core/table.ts';\nimport { type Equal, getColumnNameAndConfig } from '~/utils.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\ntype BlobMode = 'buffer' | 'json' | 'bigint';\n\nexport type SQLiteBigIntBuilderInitial<TName extends string> = SQLiteBigIntBuilder<{\n\tname: TName;\n\tdataType: 'bigint';\n\tcolumnType: 'SQLiteBigInt';\n\tdata: bigint;\n\tdriverParam: Buffer;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteBigIntBuilder<T extends ColumnBuilderBaseConfig<'bigint', 'SQLiteBigInt'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteBigIntBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'bigint', 'SQLiteBigInt');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteBigInt<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteBigInt<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any>);\n\t}\n}\n\nexport class SQLiteBigInt<T extends ColumnBaseConfig<'bigint', 'SQLiteBigInt'>> extends SQLiteColumn<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteBigInt';\n\n\tgetSQLType(): string {\n\t\treturn 'blob';\n\t}\n\n\toverride mapFromDriverValue(value: Buffer | Uint8Array): bigint {\n\t\treturn BigInt(Buffer.isBuffer(value) ? value.toString() : String.fromCodePoint(...value));\n\t}\n\n\toverride mapToDriverValue(value: bigint): Buffer {\n\t\treturn Buffer.from(value.toString());\n\t}\n}\n\nexport type SQLiteBlobJsonBuilderInitial<TName extends string> = SQLiteBlobJsonBuilder<{\n\tname: TName;\n\tdataType: 'json';\n\tcolumnType: 'SQLiteBlobJson';\n\tdata: unknown;\n\tdriverParam: Buffer;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteBlobJsonBuilder<T extends ColumnBuilderBaseConfig<'json', 'SQLiteBlobJson'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteBlobJsonBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'json', 'SQLiteBlobJson');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteBlobJson<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteBlobJson<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteBlobJson<T extends ColumnBaseConfig<'json', 'SQLiteBlobJson'>> extends SQLiteColumn<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteBlobJson';\n\n\tgetSQLType(): string {\n\t\treturn 'blob';\n\t}\n\n\toverride mapFromDriverValue(value: Buffer | Uint8Array): T['data'] {\n\t\treturn JSON.parse(Buffer.isBuffer(value) ? value.toString() : String.fromCodePoint(...value));\n\t}\n\n\toverride mapToDriverValue(value: T['data']): Buffer {\n\t\treturn Buffer.from(JSON.stringify(value));\n\t}\n}\n\nexport type SQLiteBlobBufferBuilderInitial<TName extends string> = SQLiteBlobBufferBuilder<{\n\tname: TName;\n\tdataType: 'buffer';\n\tcolumnType: 'SQLiteBlobBuffer';\n\tdata: Buffer;\n\tdriverParam: Buffer;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteBlobBufferBuilder<T extends ColumnBuilderBaseConfig<'buffer', 'SQLiteBlobBuffer'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteBlobBufferBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'buffer', 'SQLiteBlobBuffer');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteBlobBuffer<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteBlobBuffer<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any>);\n\t}\n}\n\nexport class SQLiteBlobBuffer<T extends ColumnBaseConfig<'buffer', 'SQLiteBlobBuffer'>> extends SQLiteColumn<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteBlobBuffer';\n\n\tgetSQLType(): string {\n\t\treturn 'blob';\n\t}\n}\n\nexport interface BlobConfig<TMode extends BlobMode = BlobMode> {\n\tmode: TMode;\n}\n\n/**\n *  It's recommended to use `text('...', { mode: 'json' })` instead of `blob` in JSON mode, because it supports JSON functions:\n * >All JSON functions currently throw an error if any of their arguments are BLOBs because BLOBs are reserved for a future enhancement in which BLOBs will store the binary encoding for JSON.\n *\n * https://www.sqlite.org/json1.html\n */\nexport function blob(): SQLiteBlobJsonBuilderInitial<''>;\nexport function blob<TMode extends BlobMode = BlobMode>(\n\tconfig?: BlobConfig<TMode>,\n): Equal<TMode, 'bigint'> extends true ? SQLiteBigIntBuilderInitial<''>\n\t: Equal<TMode, 'buffer'> extends true ? SQLiteBlobBufferBuilderInitial<''>\n\t: SQLiteBlobJsonBuilderInitial<''>;\nexport function blob<TName extends string, TMode extends BlobMode = BlobMode>(\n\tname: TName,\n\tconfig?: BlobConfig<TMode>,\n): Equal<TMode, 'bigint'> extends true ? SQLiteBigIntBuilderInitial<TName>\n\t: Equal<TMode, 'buffer'> extends true ? SQLiteBlobBufferBuilderInitial<TName>\n\t: SQLiteBlobJsonBuilderInitial<TName>;\nexport function blob(a?: string | BlobConfig, b?: BlobConfig) {\n\tconst { name, config } = getColumnNameAndConfig<BlobConfig | undefined>(a, b);\n\tif (config?.mode === 'json') {\n\t\treturn new SQLiteBlobJsonBuilder(name);\n\t}\n\tif (config?.mode === 'bigint') {\n\t\treturn new SQLiteBigIntBuilder(name);\n\t}\n\treturn new SQLiteBlobBufferBuilder(name);\n}\n"],"names":[],"mappings":";;;;;;;;;AAEA,SAAS,kBAAkB;AAG3B,SAAS,cAAc,2BAA2B;;AADlD,SAAqB,8BAA8B;;;;AAc5C,MAAM,0MACJ,sBAAA,CACT;IACC,OAAA,kJAA0B,aAAU,CAAA,GAAY,sBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,UAAU,cAAc;IACrC;IAAA,cAAA,GAGS,MACR,KAAA,EACgD;QAChD,OAAO,IAAI,aAA8C,OAAO,IAAA,CAAK,MAAyC;IAC/G;AACD;AAEO,MAAM,mMAA2E,eAAA,CAAgB;IACvG,OAAA,kJAA0B,aAAU,CAAA,GAAY,eAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;IAES,mBAAmB,KAAA,EAAoC;QAC/D,OAAO,OAAO,iHAAA,CAAO,QAAA,CAAS,KAAK,IAAI,MAAM,QAAA,CAAS,IAAI,OAAO,aAAA,CAAc,GAAG,KAAK,CAAC;IACzF;IAES,iBAAiB,KAAA,EAAuB;QAChD,8GAAO,UAAA,CAAO,IAAA,CAAK,MAAM,QAAA,CAAS,CAAC;IACpC;AACD;AAWO,MAAM,4MACJ,sBAAA,CACT;IACC,OAAA,kJAA0B,aAAU,CAAA,GAAY,wBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,QAAQ,gBAAgB;IACrC;IAAA,cAAA,GAGS,MACR,KAAA,EACkD;QAClD,OAAO,IAAI,eACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,qMAA6E,eAAA,CAAgB;IACzG,OAAA,iJAA0B,cAAU,CAAA,GAAY,iBAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;IAES,mBAAmB,KAAA,EAAuC;QAClE,OAAO,KAAK,KAAA,CAAM,iHAAA,CAAO,QAAA,CAAS,KAAK,IAAI,MAAM,QAAA,CAAS,IAAI,OAAO,aAAA,CAAc,GAAG,KAAK,CAAC;IAC7F;IAES,iBAAiB,KAAA,EAA0B;QACnD,8GAAO,UAAA,CAAO,IAAA,CAAK,KAAK,SAAA,CAAU,KAAK,CAAC;IACzC;AACD;AAWO,MAAM,8MACJ,sBAAA,CACT;IACC,OAAA,iJAA0B,cAAU,CAAA,GAAY,0BAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,UAAU,kBAAkB;IACzC;IAAA,cAAA,GAGS,MACR,KAAA,EACoD;QACpD,OAAO,IAAI,iBAAkD,OAAO,IAAA,CAAK,MAAyC;IACnH;AACD;AAEO,MAAM,sMAAmF,gBAAA,CAAgB;IAC/G,OAAA,kJAA0B,aAAU,CAAA,GAAY,mBAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;AACD;AAwBO,SAAS,KAAK,CAAA,EAAyB,CAAA,EAAgB;IAC7D,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,uJAAI,yBAAA,EAA+C,GAAG,CAAC;IAC5E,IAAI,QAAQ,SAAS,QAAQ;QAC5B,OAAO,IAAI,sBAAsB,IAAI;IACtC;IACA,IAAI,QAAQ,SAAS,UAAU;QAC9B,OAAO,IAAI,oBAAoB,IAAI;IACpC;IACA,OAAO,IAAI,wBAAwB,IAAI;AACxC","ignoreList":[0]}},
    {"offset": {"line": 320, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 326, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/columns/custom.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { SQL } from '~/sql/sql.ts';\nimport type { AnySQLiteTable } from '~/sqlite-core/table.ts';\nimport { type Equal, getColumnNameAndConfig } from '~/utils.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\nexport type ConvertCustomConfig<TName extends string, T extends Partial<CustomTypeValues>> =\n\t& {\n\t\tname: TName;\n\t\tdataType: 'custom';\n\t\tcolumnType: 'SQLiteCustomColumn';\n\t\tdata: T['data'];\n\t\tdriverParam: T['driverData'];\n\t\tenumValues: undefined;\n\t}\n\t& (T['notNull'] extends true ? { notNull: true } : {})\n\t& (T['default'] extends true ? { hasDefault: true } : {});\n\nexport interface SQLiteCustomColumnInnerConfig {\n\tcustomTypeValues: CustomTypeValues;\n}\n\nexport class SQLiteCustomColumnBuilder<T extends ColumnBuilderBaseConfig<'custom', 'SQLiteCustomColumn'>>\n\textends SQLiteColumnBuilder<\n\t\tT,\n\t\t{\n\t\t\tfieldConfig: CustomTypeValues['config'];\n\t\t\tcustomTypeParams: CustomTypeParams<any>;\n\t\t},\n\t\t{\n\t\t\tsqliteColumnBuilderBrand: 'SQLiteCustomColumnBuilderBrand';\n\t\t}\n\t>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteCustomColumnBuilder';\n\n\tconstructor(\n\t\tname: T['name'],\n\t\tfieldConfig: CustomTypeValues['config'],\n\t\tcustomTypeParams: CustomTypeParams<any>,\n\t) {\n\t\tsuper(name, 'custom', 'SQLiteCustomColumn');\n\t\tthis.config.fieldConfig = fieldConfig;\n\t\tthis.config.customTypeParams = customTypeParams;\n\t}\n\n\t/** @internal */\n\tbuild<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteCustomColumn<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteCustomColumn<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteCustomColumn<T extends ColumnBaseConfig<'custom', 'SQLiteCustomColumn'>> extends SQLiteColumn<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteCustomColumn';\n\n\tprivate sqlName: string;\n\tprivate mapTo?: (value: T['data']) => T['driverParam'];\n\tprivate mapFrom?: (value: T['driverParam']) => T['data'];\n\n\tconstructor(\n\t\ttable: AnySQLiteTable<{ name: T['tableName'] }>,\n\t\tconfig: SQLiteCustomColumnBuilder<T>['config'],\n\t) {\n\t\tsuper(table, config);\n\t\tthis.sqlName = config.customTypeParams.dataType(config.fieldConfig);\n\t\tthis.mapTo = config.customTypeParams.toDriver;\n\t\tthis.mapFrom = config.customTypeParams.fromDriver;\n\t}\n\n\tgetSQLType(): string {\n\t\treturn this.sqlName;\n\t}\n\n\toverride mapFromDriverValue(value: T['driverParam']): T['data'] {\n\t\treturn typeof this.mapFrom === 'function' ? this.mapFrom(value) : value as T['data'];\n\t}\n\n\toverride mapToDriverValue(value: T['data']): T['driverParam'] {\n\t\treturn typeof this.mapTo === 'function' ? this.mapTo(value) : value as T['data'];\n\t}\n}\n\nexport type CustomTypeValues = {\n\t/**\n\t * Required type for custom column, that will infer proper type model\n\t *\n\t * Examples:\n\t *\n\t * If you want your column to be `string` type after selecting/or on inserting - use `data: string`. Like `text`, `varchar`\n\t *\n\t * If you want your column to be `number` type after selecting/or on inserting - use `data: number`. Like `integer`\n\t */\n\tdata: unknown;\n\n\t/**\n\t * Type helper, that represents what type database driver is accepting for specific database data type\n\t */\n\tdriverData?: unknown;\n\n\t/**\n\t * What config type should be used for {@link CustomTypeParams} `dataType` generation\n\t */\n\tconfig?: Record<string, any>;\n\n\t/**\n\t * Whether the config argument should be required or not\n\t * @default false\n\t */\n\tconfigRequired?: boolean;\n\n\t/**\n\t * If your custom data type should be notNull by default you can use `notNull: true`\n\t *\n\t * @example\n\t * const customSerial = customType<{ data: number, notNull: true, default: true }>({\n\t * \t  dataType() {\n\t * \t    return 'serial';\n\t *    },\n\t * });\n\t */\n\tnotNull?: boolean;\n\n\t/**\n\t * If your custom data type has default you can use `default: true`\n\t *\n\t * @example\n\t * const customSerial = customType<{ data: number, notNull: true, default: true }>({\n\t * \t  dataType() {\n\t * \t    return 'serial';\n\t *    },\n\t * });\n\t */\n\tdefault?: boolean;\n};\n\nexport interface CustomTypeParams<T extends CustomTypeValues> {\n\t/**\n\t * Database data type string representation, that is used for migrations\n\t * @example\n\t * ```\n\t * `jsonb`, `text`\n\t * ```\n\t *\n\t * If database data type needs additional params you can use them from `config` param\n\t * @example\n\t * ```\n\t * `varchar(256)`, `numeric(2,3)`\n\t * ```\n\t *\n\t * To make `config` be of specific type please use config generic in {@link CustomTypeValues}\n\t *\n\t * @example\n\t * Usage example\n\t * ```\n\t *   dataType() {\n\t *     return 'boolean';\n\t *   },\n\t * ```\n\t * Or\n\t * ```\n\t *   dataType(config) {\n\t * \t   return typeof config.length !== 'undefined' ? `varchar(${config.length})` : `varchar`;\n\t * \t }\n\t * ```\n\t */\n\tdataType: (config: T['config'] | (Equal<T['configRequired'], true> extends true ? never : undefined)) => string;\n\n\t/**\n\t * Optional mapping function, between user input and driver\n\t * @example\n\t * For example, when using jsonb we need to map JS/TS object to string before writing to database\n\t * ```\n\t * toDriver(value: TData): string {\n\t * \t return JSON.stringify(value);\n\t * }\n\t * ```\n\t */\n\ttoDriver?: (value: T['data']) => T['driverData'] | SQL;\n\n\t/**\n\t * Optional mapping function, that is responsible for data mapping from database to JS/TS code\n\t * @example\n\t * For example, when using timestamp we need to map string Date representation to JS Date\n\t * ```\n\t * fromDriver(value: string): Date {\n\t * \treturn new Date(value);\n\t * },\n\t * ```\n\t */\n\tfromDriver?: (value: T['driverData']) => T['data'];\n}\n\n/**\n * Custom sqlite database data type generator\n */\nexport function customType<T extends CustomTypeValues = CustomTypeValues>(\n\tcustomTypeParams: CustomTypeParams<T>,\n): Equal<T['configRequired'], true> extends true ? {\n\t\t<TConfig extends Record<string, any> & T['config']>(\n\t\t\tfieldConfig: TConfig,\n\t\t): SQLiteCustomColumnBuilder<ConvertCustomConfig<'', T>>;\n\t\t<TName extends string>(\n\t\t\tdbName: TName,\n\t\t\tfieldConfig: T['config'],\n\t\t): SQLiteCustomColumnBuilder<ConvertCustomConfig<TName, T>>;\n\t}\n\t: {\n\t\t(): SQLiteCustomColumnBuilder<ConvertCustomConfig<'', T>>;\n\t\t<TConfig extends Record<string, any> & T['config']>(\n\t\t\tfieldConfig?: TConfig,\n\t\t): SQLiteCustomColumnBuilder<ConvertCustomConfig<'', T>>;\n\t\t<TName extends string>(\n\t\t\tdbName: TName,\n\t\t\tfieldConfig?: T['config'],\n\t\t): SQLiteCustomColumnBuilder<ConvertCustomConfig<TName, T>>;\n\t}\n{\n\treturn <TName extends string>(\n\t\ta?: TName | T['config'],\n\t\tb?: T['config'],\n\t): SQLiteCustomColumnBuilder<ConvertCustomConfig<TName, T>> => {\n\t\tconst { name, config } = getColumnNameAndConfig<T['config']>(a, b);\n\t\treturn new SQLiteCustomColumnBuilder(\n\t\t\tname as ConvertCustomConfig<TName, T>['name'],\n\t\t\tconfig,\n\t\t\tcustomTypeParams,\n\t\t);\n\t};\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAI3B,SAAS,cAAc,2BAA2B;AADlD,SAAqB,8BAA8B;;;;AAmB5C,MAAM,gNACJ,sBAAA,CAUT;IACC,OAAA,kJAA0B,aAAU,CAAA,GAAY,4BAAA;IAEhD,YACC,IAAA,EACA,WAAA,EACA,gBAAA,CACC;QACD,KAAA,CAAM,MAAM,UAAU,oBAAoB;QAC1C,IAAA,CAAK,MAAA,CAAO,WAAA,GAAc;QAC1B,IAAA,CAAK,MAAA,CAAO,gBAAA,GAAmB;IAChC;IAAA,cAAA,GAGA,MACC,KAAA,EACsD;QACtD,OAAO,IAAI,mBACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,yMAAuF,eAAA,CAAgB;IACnH,OAAA,kJAA0B,aAAU,CAAA,GAAY,qBAAA;IAExC,QAAA;IACA,MAAA;IACA,QAAA;IAER,YACC,KAAA,EACA,MAAA,CACC;QACD,KAAA,CAAM,OAAO,MAAM;QACnB,IAAA,CAAK,OAAA,GAAU,OAAO,gBAAA,CAAiB,QAAA,CAAS,OAAO,WAAW;QAClE,IAAA,CAAK,KAAA,GAAQ,OAAO,gBAAA,CAAiB,QAAA;QACrC,IAAA,CAAK,OAAA,GAAU,OAAO,gBAAA,CAAiB,UAAA;IACxC;IAEA,aAAqB;QACpB,OAAO,IAAA,CAAK,OAAA;IACb;IAES,mBAAmB,KAAA,EAAoC;QAC/D,OAAO,OAAO,IAAA,CAAK,OAAA,KAAY,aAAa,IAAA,CAAK,OAAA,CAAQ,KAAK,IAAI;IACnE;IAES,iBAAiB,KAAA,EAAoC;QAC7D,OAAO,OAAO,IAAA,CAAK,KAAA,KAAU,aAAa,IAAA,CAAK,KAAA,CAAM,KAAK,IAAI;IAC/D;AACD;AAmHO,SAAS,WACf,gBAAA,EAoBD;IACC,OAAO,CACN,GACA,MAC8D;QAC9D,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,uJAAI,yBAAA,EAAoC,GAAG,CAAC;QACjE,OAAO,IAAI,0BACV,MACA,QACA;IAEF;AACD","ignoreList":[0]}},
    {"offset": {"line": 377, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 383, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/columns/integer.ts"],"sourcesContent":["import type {\n\tColumnBuilderBaseConfig,\n\tColumnBuilderRuntimeConfig,\n\tColumnDataType,\n\tHasDefault,\n\tIsPrimaryKey,\n\tMakeColumnConfig,\n\tNotNull,\n} from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport { sql } from '~/sql/sql.ts';\nimport type { OnConflict } from '~/sqlite-core/utils.ts';\nimport { type Equal, getColumnNameAndConfig, type Or } from '~/utils.ts';\nimport type { AnySQLiteTable } from '../table.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\nexport interface PrimaryKeyConfig {\n\tautoIncrement?: boolean;\n\tonConflict?: OnConflict;\n}\n\nexport abstract class SQLiteBaseIntegerBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n> extends SQLiteColumnBuilder<\n\tT,\n\tTRuntimeConfig & { autoIncrement: boolean },\n\t{},\n\t{ primaryKeyHasDefault: true }\n> {\n\tstatic override readonly [entityKind]: string = 'SQLiteBaseIntegerBuilder';\n\n\tconstructor(name: T['name'], dataType: T['dataType'], columnType: T['columnType']) {\n\t\tsuper(name, dataType, columnType);\n\t\tthis.config.autoIncrement = false;\n\t}\n\n\toverride primaryKey(config?: PrimaryKeyConfig): IsPrimaryKey<HasDefault<NotNull<this>>> {\n\t\tif (config?.autoIncrement) {\n\t\t\tthis.config.autoIncrement = true;\n\t\t}\n\t\tthis.config.hasDefault = true;\n\t\treturn super.primaryKey() as IsPrimaryKey<HasDefault<NotNull<this>>>;\n\t}\n\n\t/** @internal */\n\tabstract override build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteBaseInteger<MakeColumnConfig<T, TTableName>>;\n}\n\nexport abstract class SQLiteBaseInteger<\n\tT extends ColumnBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n> extends SQLiteColumn<T, TRuntimeConfig & { autoIncrement: boolean }> {\n\tstatic override readonly [entityKind]: string = 'SQLiteBaseInteger';\n\n\treadonly autoIncrement: boolean = this.config.autoIncrement;\n\n\tgetSQLType(): string {\n\t\treturn 'integer';\n\t}\n}\n\nexport type SQLiteIntegerBuilderInitial<TName extends string> = SQLiteIntegerBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'SQLiteInteger';\n\tdata: number;\n\tdriverParam: number;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteIntegerBuilder<T extends ColumnBuilderBaseConfig<'number', 'SQLiteInteger'>>\n\textends SQLiteBaseIntegerBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteIntegerBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'number', 'SQLiteInteger');\n\t}\n\n\tbuild<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteInteger<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteInteger<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteInteger<T extends ColumnBaseConfig<'number', 'SQLiteInteger'>> extends SQLiteBaseInteger<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteInteger';\n}\n\nexport type SQLiteTimestampBuilderInitial<TName extends string> = SQLiteTimestampBuilder<{\n\tname: TName;\n\tdataType: 'date';\n\tcolumnType: 'SQLiteTimestamp';\n\tdata: Date;\n\tdriverParam: number;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteTimestampBuilder<T extends ColumnBuilderBaseConfig<'date', 'SQLiteTimestamp'>>\n\textends SQLiteBaseIntegerBuilder<T, { mode: 'timestamp' | 'timestamp_ms' }>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteTimestampBuilder';\n\n\tconstructor(name: T['name'], mode: 'timestamp' | 'timestamp_ms') {\n\t\tsuper(name, 'date', 'SQLiteTimestamp');\n\t\tthis.config.mode = mode;\n\t}\n\n\t/**\n\t * @deprecated Use `default()` with your own expression instead.\n\t *\n\t * Adds `DEFAULT (cast((julianday('now') - 2440587.5)*86400000 as integer))` to the column, which is the current epoch timestamp in milliseconds.\n\t */\n\tdefaultNow(): HasDefault<this> {\n\t\treturn this.default(sql`(cast((julianday('now') - 2440587.5)*86400000 as integer))`) as any;\n\t}\n\n\tbuild<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteTimestamp<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteTimestamp<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteTimestamp<T extends ColumnBaseConfig<'date', 'SQLiteTimestamp'>>\n\textends SQLiteBaseInteger<T, { mode: 'timestamp' | 'timestamp_ms' }>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteTimestamp';\n\n\treadonly mode: 'timestamp' | 'timestamp_ms' = this.config.mode;\n\n\toverride mapFromDriverValue(value: number): Date {\n\t\tif (this.config.mode === 'timestamp') {\n\t\t\treturn new Date(value * 1000);\n\t\t}\n\t\treturn new Date(value);\n\t}\n\n\toverride mapToDriverValue(value: Date): number {\n\t\tconst unix = value.getTime();\n\t\tif (this.config.mode === 'timestamp') {\n\t\t\treturn Math.floor(unix / 1000);\n\t\t}\n\t\treturn unix;\n\t}\n}\n\nexport type SQLiteBooleanBuilderInitial<TName extends string> = SQLiteBooleanBuilder<{\n\tname: TName;\n\tdataType: 'boolean';\n\tcolumnType: 'SQLiteBoolean';\n\tdata: boolean;\n\tdriverParam: number;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteBooleanBuilder<T extends ColumnBuilderBaseConfig<'boolean', 'SQLiteBoolean'>>\n\textends SQLiteBaseIntegerBuilder<T, { mode: 'boolean' }>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteBooleanBuilder';\n\n\tconstructor(name: T['name'], mode: 'boolean') {\n\t\tsuper(name, 'boolean', 'SQLiteBoolean');\n\t\tthis.config.mode = mode;\n\t}\n\n\tbuild<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteBoolean<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteBoolean<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteBoolean<T extends ColumnBaseConfig<'boolean', 'SQLiteBoolean'>>\n\textends SQLiteBaseInteger<T, { mode: 'boolean' }>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteBoolean';\n\n\treadonly mode: 'boolean' = this.config.mode;\n\n\toverride mapFromDriverValue(value: number): boolean {\n\t\treturn Number(value) === 1;\n\t}\n\n\toverride mapToDriverValue(value: boolean): number {\n\t\treturn value ? 1 : 0;\n\t}\n}\n\nexport interface IntegerConfig<\n\tTMode extends 'number' | 'timestamp' | 'timestamp_ms' | 'boolean' =\n\t\t| 'number'\n\t\t| 'timestamp'\n\t\t| 'timestamp_ms'\n\t\t| 'boolean',\n> {\n\tmode: TMode;\n}\n\nexport function integer(): SQLiteIntegerBuilderInitial<''>;\nexport function integer<TMode extends IntegerConfig['mode']>(\n\tconfig?: IntegerConfig<TMode>,\n): Or<Equal<TMode, 'timestamp'>, Equal<TMode, 'timestamp_ms'>> extends true ? SQLiteTimestampBuilderInitial<''>\n\t: Equal<TMode, 'boolean'> extends true ? SQLiteBooleanBuilderInitial<''>\n\t: SQLiteIntegerBuilderInitial<''>;\nexport function integer<TName extends string, TMode extends IntegerConfig['mode']>(\n\tname: TName,\n\tconfig?: IntegerConfig<TMode>,\n): Or<Equal<TMode, 'timestamp'>, Equal<TMode, 'timestamp_ms'>> extends true ? SQLiteTimestampBuilderInitial<TName>\n\t: Equal<TMode, 'boolean'> extends true ? SQLiteBooleanBuilderInitial<TName>\n\t: SQLiteIntegerBuilderInitial<TName>;\nexport function integer(a?: string | IntegerConfig, b?: IntegerConfig) {\n\tconst { name, config } = getColumnNameAndConfig<IntegerConfig | undefined>(a, b);\n\tif (config?.mode === 'timestamp' || config?.mode === 'timestamp_ms') {\n\t\treturn new SQLiteTimestampBuilder(name, config.mode);\n\t}\n\tif (config?.mode === 'boolean') {\n\t\treturn new SQLiteBooleanBuilder(name, config.mode);\n\t}\n\treturn new SQLiteIntegerBuilder(name);\n}\n\nexport const int = integer;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 503, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 509, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/columns/numeric.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnySQLiteTable } from '~/sqlite-core/table.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\nexport type SQLiteNumericBuilderInitial<TName extends string> = SQLiteNumericBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'SQLiteNumeric';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteNumericBuilder<T extends ColumnBuilderBaseConfig<'string', 'SQLiteNumeric'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteNumericBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'string', 'SQLiteNumeric');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteNumeric<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteNumeric<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteNumeric<T extends ColumnBaseConfig<'string', 'SQLiteNumeric'>> extends SQLiteColumn<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteNumeric';\n\n\tgetSQLType(): string {\n\t\treturn 'numeric';\n\t}\n}\n\nexport function numeric(): SQLiteNumericBuilderInitial<''>;\nexport function numeric<TName extends string>(name: TName): SQLiteNumericBuilderInitial<TName>;\nexport function numeric(name?: string) {\n\treturn new SQLiteNumericBuilder(name ?? '');\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,cAAc,2BAA2B;;;AAW3C,MAAM,2MACJ,sBAAA,CACT;IACC,OAAA,kJAA0B,aAAU,CAAA,GAAY,uBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,UAAU,eAAe;IACtC;IAAA,cAAA,GAGS,MACR,KAAA,EACiD;QACjD,OAAO,IAAI,cACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,oMAA6E,eAAA,CAAgB;IACzG,OAAA,kJAA0B,aAAU,CAAA,GAAY,gBAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;AACD;AAIO,SAAS,QAAQ,IAAA,EAAe;IACtC,OAAO,IAAI,qBAAqB,QAAQ,EAAE;AAC3C","ignoreList":[0]}},
    {"offset": {"line": 538, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 544, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/columns/real.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnySQLiteTable } from '../table.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\nexport type SQLiteRealBuilderInitial<TName extends string> = SQLiteRealBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'SQLiteReal';\n\tdata: number;\n\tdriverParam: number;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteRealBuilder<T extends ColumnBuilderBaseConfig<'number', 'SQLiteReal'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteRealBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'number', 'SQLiteReal');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteReal<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteReal<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class SQLiteReal<T extends ColumnBaseConfig<'number', 'SQLiteReal'>> extends SQLiteColumn<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteReal';\n\n\tgetSQLType(): string {\n\t\treturn 'real';\n\t}\n}\n\nexport function real(): SQLiteRealBuilderInitial<''>;\nexport function real<TName extends string>(name: TName): SQLiteRealBuilderInitial<TName>;\nexport function real(name?: string) {\n\treturn new SQLiteRealBuilder(name ?? '');\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,cAAc,2BAA2B;;;AAW3C,MAAM,wMACJ,sBAAA,CACT;IACC,OAAA,kJAA0B,aAAU,CAAA,GAAY,oBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,UAAU,YAAY;IACnC;IAAA,cAAA,GAGS,MACR,KAAA,EAC8C;QAC9C,OAAO,IAAI,WAA4C,OAAO,IAAA,CAAK,MAA8C;IAClH;AACD;AAEO,MAAM,iMAAuE,eAAA,CAAgB;IACnG,OAAA,kJAA0B,aAAU,CAAA,GAAY,aAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;AACD;AAIO,SAAS,KAAK,IAAA,EAAe;IACnC,OAAO,IAAI,kBAAkB,QAAQ,EAAE;AACxC","ignoreList":[0]}},
    {"offset": {"line": 573, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 579, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/columns/text.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnySQLiteTable } from '~/sqlite-core/table.ts';\nimport { type Equal, getColumnNameAndConfig, type Writable } from '~/utils.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\nexport type SQLiteTextBuilderInitial<TName extends string, TEnum extends [string, ...string[]]> = SQLiteTextBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'SQLiteText';\n\tdata: TEnum[number];\n\tdriverParam: string;\n\tenumValues: TEnum;\n}>;\n\nexport class SQLiteTextBuilder<T extends ColumnBuilderBaseConfig<'string', 'SQLiteText'>> extends SQLiteColumnBuilder<\n\tT,\n\t{ length: number | undefined; enumValues: T['enumValues'] }\n> {\n\tstatic override readonly [entityKind]: string = 'SQLiteTextBuilder';\n\n\tconstructor(name: T['name'], config: SQLiteTextConfig<'text', T['enumValues']>) {\n\t\tsuper(name, 'string', 'SQLiteText');\n\t\tthis.config.enumValues = config.enum;\n\t\tthis.config.length = config.length;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteText<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteText<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class SQLiteText<T extends ColumnBaseConfig<'string', 'SQLiteText'>>\n\textends SQLiteColumn<T, { length: number | undefined; enumValues: T['enumValues'] }>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteText';\n\n\toverride readonly enumValues = this.config.enumValues;\n\n\treadonly length: number | undefined = this.config.length;\n\n\tconstructor(\n\t\ttable: AnySQLiteTable<{ name: T['tableName'] }>,\n\t\tconfig: SQLiteTextBuilder<T>['config'],\n\t) {\n\t\tsuper(table, config);\n\t}\n\n\tgetSQLType(): string {\n\t\treturn `text${this.config.length ? `(${this.config.length})` : ''}`;\n\t}\n}\n\nexport type SQLiteTextJsonBuilderInitial<TName extends string> = SQLiteTextJsonBuilder<{\n\tname: TName;\n\tdataType: 'json';\n\tcolumnType: 'SQLiteTextJson';\n\tdata: unknown;\n\tdriverParam: string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class SQLiteTextJsonBuilder<T extends ColumnBuilderBaseConfig<'json', 'SQLiteTextJson'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteTextJsonBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'json', 'SQLiteTextJson');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteTextJson<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteTextJson<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteTextJson<T extends ColumnBaseConfig<'json', 'SQLiteTextJson'>>\n\textends SQLiteColumn<T, { length: number | undefined; enumValues: T['enumValues'] }>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteTextJson';\n\n\tgetSQLType(): string {\n\t\treturn 'text';\n\t}\n\n\toverride mapFromDriverValue(value: string): T['data'] {\n\t\treturn JSON.parse(value);\n\t}\n\n\toverride mapToDriverValue(value: T['data']): string {\n\t\treturn JSON.stringify(value);\n\t}\n}\n\nexport type SQLiteTextConfig<\n\tTMode extends 'text' | 'json' = 'text' | 'json',\n\tTEnum extends readonly string[] | string[] | undefined = readonly string[] | string[] | undefined,\n> = TMode extends 'text' ? {\n\t\tmode?: TMode;\n\t\tlength?: number;\n\t\tenum?: TEnum;\n\t}\n\t: {\n\t\tmode?: TMode;\n\t};\n\nexport function text(): SQLiteTextBuilderInitial<'', [string, ...string[]]>;\nexport function text<\n\tU extends string,\n\tT extends Readonly<[U, ...U[]]>,\n\tTMode extends 'text' | 'json' = 'text' | 'json',\n>(\n\tconfig?: SQLiteTextConfig<TMode, T | Writable<T>>,\n): Equal<TMode, 'json'> extends true ? SQLiteTextJsonBuilderInitial<''>\n\t: SQLiteTextBuilderInitial<'', Writable<T>>;\nexport function text<\n\tTName extends string,\n\tU extends string,\n\tT extends Readonly<[U, ...U[]]>,\n\tTMode extends 'text' | 'json' = 'text' | 'json',\n>(\n\tname: TName,\n\tconfig?: SQLiteTextConfig<TMode, T | Writable<T>>,\n): Equal<TMode, 'json'> extends true ? SQLiteTextJsonBuilderInitial<TName>\n\t: SQLiteTextBuilderInitial<TName, Writable<T>>;\nexport function text(a?: string | SQLiteTextConfig, b: SQLiteTextConfig = {}): any {\n\tconst { name, config } = getColumnNameAndConfig<SQLiteTextConfig>(a, b);\n\tif (config.mode === 'json') {\n\t\treturn new SQLiteTextJsonBuilder(name);\n\t}\n\treturn new SQLiteTextBuilder(name, config as any);\n}\n"],"names":[],"mappings":";;;;;;;AAEA,SAAS,kBAAkB;AAG3B,SAAS,cAAc,2BAA2B;AADlD,SAAqB,8BAA6C;;;;AAY3D,MAAM,wMAAqF,sBAAA,CAGhG;IACD,OAAA,kJAA0B,aAAU,CAAA,GAAY,oBAAA;IAEhD,YAAY,IAAA,EAAiB,MAAA,CAAmD;QAC/E,KAAA,CAAM,MAAM,UAAU,YAAY;QAClC,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa,OAAO,IAAA;QAChC,IAAA,CAAK,MAAA,CAAO,MAAA,GAAS,OAAO,MAAA;IAC7B;IAAA,cAAA,GAGS,MACR,KAAA,EAC8C;QAC9C,OAAO,IAAI,WAA4C,OAAO,IAAA,CAAK,MAA8C;IAClH;AACD;AAEO,MAAM,iMACJ,eAAA,CACT;IACC,OAAA,kJAA0B,aAAU,CAAA,GAAY,aAAA;IAE9B,aAAa,IAAA,CAAK,MAAA,CAAO,UAAA,CAAA;IAElC,SAA6B,IAAA,CAAK,MAAA,CAAO,MAAA,CAAA;IAElD,YACC,KAAA,EACA,MAAA,CACC;QACD,KAAA,CAAM,OAAO,MAAM;IACpB;IAEA,aAAqB;QACpB,OAAO,CAAA,IAAA,EAAO,IAAA,CAAK,MAAA,CAAO,MAAA,GAAS,CAAA,CAAA,EAAI,IAAA,CAAK,MAAA,CAAO,MAAM,CAAA,CAAA,CAAA,GAAM,EAAE,EAAA;IAClE;AACD;AAYO,MAAM,4MACJ,sBAAA,CACT;IACC,OAAA,iJAA0B,cAAU,CAAA,GAAY,wBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,QAAQ,gBAAgB;IACrC;IAAA,cAAA,GAGS,MACR,KAAA,EACkD;QAClD,OAAO,IAAI,eACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,qMACJ,eAAA,CACT;IACC,OAAA,kJAA0B,aAAU,CAAA,GAAY,iBAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;IAES,mBAAmB,KAAA,EAA0B;QACrD,OAAO,KAAK,KAAA,CAAM,KAAK;IACxB;IAES,iBAAiB,KAAA,EAA0B;QACnD,OAAO,KAAK,SAAA,CAAU,KAAK;IAC5B;AACD;AAiCO,SAAS,KAAK,CAAA,EAA+B,IAAsB,CAAC,CAAA,EAAQ;IAClF,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,uJAAI,yBAAA,EAAyC,GAAG,CAAC;IACtE,IAAI,OAAO,IAAA,KAAS,QAAQ;QAC3B,OAAO,IAAI,sBAAsB,IAAI;IACtC;IACA,OAAO,IAAI,kBAAkB,MAAM,MAAa;AACjD","ignoreList":[0]}},
    {"offset": {"line": 644, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 650, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/columns/all.ts"],"sourcesContent":["import { blob } from './blob.ts';\nimport { customType } from './custom.ts';\nimport { integer } from './integer.ts';\nimport { numeric } from './numeric.ts';\nimport { real } from './real.ts';\nimport { text } from './text.ts';\n\nexport function getSQLiteColumnBuilders() {\n\treturn {\n\t\tblob,\n\t\tcustomType,\n\t\tinteger,\n\t\tnumeric,\n\t\treal,\n\t\ttext,\n\t};\n}\n\nexport type SQLiteColumnBuilders = ReturnType<typeof getSQLiteColumnBuilders>;\n"],"names":[],"mappings":";;;AAAA,SAAS,YAAY;AACrB,SAAS,kBAAkB;AAC3B,SAAS,eAAe;AACxB,SAAS,eAAe;AACxB,SAAS,YAAY;AACrB,SAAS,YAAY;;;;;;;AAEd,SAAS,0BAA0B;IACzC,OAAO;0LACN,OAAA;kMACA,aAAA;gMACA,UAAA;gMACA,UAAA;0LACA,OAAA;0LACA,OAAA;IACD;AACD","ignoreList":[0]}},
    {"offset": {"line": 677, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 683, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/table.ts"],"sourcesContent":["import type { BuildColumns, BuildExtraConfigColumns } from '~/column-builder.ts';\nimport { entityKind } from '~/entity.ts';\nimport { Table, type TableConfig as TableConfigBase, type UpdateTableConfig } from '~/table.ts';\nimport type { CheckBuilder } from './checks.ts';\nimport { getSQLiteColumnBuilders, type SQLiteColumnBuilders } from './columns/all.ts';\nimport type { SQLiteColumn, SQLiteColumnBuilder, SQLiteColumnBuilderBase } from './columns/common.ts';\nimport type { ForeignKey, ForeignKeyBuilder } from './foreign-keys.ts';\nimport type { IndexBuilder } from './indexes.ts';\nimport type { PrimaryKeyBuilder } from './primary-keys.ts';\nimport type { UniqueConstraintBuilder } from './unique-constraint.ts';\n\nexport type SQLiteTableExtraConfig = Record<\n\tstring,\n\t| IndexBuilder\n\t| CheckBuilder\n\t| ForeignKeyBuilder\n\t| PrimaryKeyBuilder\n\t| UniqueConstraintBuilder\n>;\n\nexport type TableConfig = TableConfigBase<SQLiteColumn<any>>;\n\n/** @internal */\nexport const InlineForeignKeys = Symbol.for('drizzle:SQLiteInlineForeignKeys');\n\nexport class SQLiteTable<T extends TableConfig = TableConfig> extends Table<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteTable';\n\n\t/** @internal */\n\tstatic override readonly Symbol = Object.assign({}, Table.Symbol, {\n\t\tInlineForeignKeys: InlineForeignKeys as typeof InlineForeignKeys,\n\t});\n\n\t/** @internal */\n\toverride [Table.Symbol.Columns]!: NonNullable<T['columns']>;\n\n\t/** @internal */\n\t[InlineForeignKeys]: ForeignKey[] = [];\n\n\t/** @internal */\n\toverride [Table.Symbol.ExtraConfigBuilder]:\n\t\t| ((self: Record<string, SQLiteColumn>) => SQLiteTableExtraConfig)\n\t\t| undefined = undefined;\n}\n\nexport type AnySQLiteTable<TPartial extends Partial<TableConfig> = {}> = SQLiteTable<\n\tUpdateTableConfig<TableConfig, TPartial>\n>;\n\nexport type SQLiteTableWithColumns<T extends TableConfig> =\n\t& SQLiteTable<T>\n\t& {\n\t\t[Key in keyof T['columns']]: T['columns'][Key];\n\t};\n\nexport interface SQLiteTableFn<TSchema extends string | undefined = undefined> {\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, SQLiteColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: TColumnsMap,\n\t\textraConfig?: (self: BuildColumns<TTableName, TColumnsMap, 'sqlite'>) => SQLiteTableExtraConfig,\n\t): SQLiteTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\t\tdialect: 'sqlite';\n\t}>;\n\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, SQLiteColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: (columnTypes: SQLiteColumnBuilders) => TColumnsMap,\n\t\textraConfig?: (self: BuildColumns<TTableName, TColumnsMap, 'sqlite'>) => SQLiteTableExtraConfig,\n\t): SQLiteTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\t\tdialect: 'sqlite';\n\t}>;\n}\n\nfunction sqliteTableBase<\n\tTTableName extends string,\n\tTColumnsMap extends Record<string, SQLiteColumnBuilderBase>,\n\tTSchema extends string | undefined,\n>(\n\tname: TTableName,\n\tcolumns: TColumnsMap | ((columnTypes: SQLiteColumnBuilders) => TColumnsMap),\n\textraConfig?: (self: BuildColumns<TTableName, TColumnsMap, 'sqlite'>) => SQLiteTableExtraConfig,\n\tschema?: TSchema,\n\tbaseName = name,\n): SQLiteTableWithColumns<{\n\tname: TTableName;\n\tschema: TSchema;\n\tcolumns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\tdialect: 'sqlite';\n}> {\n\tconst rawTable = new SQLiteTable<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\t\tdialect: 'sqlite';\n\t}>(name, schema, baseName);\n\n\tconst parsedColumns: TColumnsMap = typeof columns === 'function' ? columns(getSQLiteColumnBuilders()) : columns;\n\n\tconst builtColumns = Object.fromEntries(\n\t\tObject.entries(parsedColumns).map(([name, colBuilderBase]) => {\n\t\t\tconst colBuilder = colBuilderBase as SQLiteColumnBuilder;\n\t\t\tcolBuilder.setName(name);\n\t\t\tconst column = colBuilder.build(rawTable);\n\t\t\trawTable[InlineForeignKeys].push(...colBuilder.buildForeignKeys(column, rawTable));\n\t\t\treturn [name, column];\n\t\t}),\n\t) as unknown as BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\n\tconst table = Object.assign(rawTable, builtColumns);\n\n\ttable[Table.Symbol.Columns] = builtColumns;\n\ttable[Table.Symbol.ExtraConfigColumns] = builtColumns as unknown as BuildExtraConfigColumns<\n\t\tTTableName,\n\t\tTColumnsMap,\n\t\t'sqlite'\n\t>;\n\n\tif (extraConfig) {\n\t\ttable[SQLiteTable.Symbol.ExtraConfigBuilder] = extraConfig as (\n\t\t\tself: Record<string, SQLiteColumn>,\n\t\t) => SQLiteTableExtraConfig;\n\t}\n\n\treturn table;\n}\n\nexport const sqliteTable: SQLiteTableFn = (name, columns, extraConfig) => {\n\treturn sqliteTableBase(name, columns, extraConfig);\n};\n\nexport function sqliteTableCreator(customizeTableName: (name: string) => string): SQLiteTableFn {\n\treturn (name, columns, extraConfig) => {\n\t\treturn sqliteTableBase(customizeTableName(name) as typeof name, columns, extraConfig, undefined, name);\n\t};\n}\n"],"names":["name"],"mappings":";;;;;;AACA,SAAS,kBAAkB;AAC3B,SAAS,aAA0E;AAEnF,SAAS,+BAA0D;;;;AAmB5D,MAAM,oBAAoB,OAAO,GAAA,CAAI,iCAAiC;AAEtE,MAAM,oKAAyD,QAAA,CAAS;IAC9E,OAAA,kJAA0B,aAAU,CAAA,GAAY,cAAA;IAAA,cAAA,GAGhD,OAAyB,SAAS,OAAO,MAAA,CAAO,CAAC,mJAAG,QAAA,CAAM,MAAA,EAAQ;QACjE;IACD,CAAC,EAAA;IAAA,cAAA,GAGD,iJAAU,QAAA,CAAM,MAAA,CAAO,OAAO,CAAA,CAAA;IAAA,cAAA,GAG9B,CAAC,iBAAiB,CAAA,GAAkB,CAAC,CAAA,CAAA;IAAA,cAAA,GAGrC,iJAAU,QAAA,CAAM,MAAA,CAAO,kBAAkB,CAAA,GAE1B,KAAA,EAAA;AAChB;AA0CA,SAAS,gBAKR,IAAA,EACA,OAAA,EACA,WAAA,EACA,MAAA,EACA,WAAW,IAAA,EAMT;IACF,MAAM,WAAW,IAAI,YAKlB,MAAM,QAAQ,QAAQ;IAEzB,MAAM,gBAA6B,OAAO,YAAY,aAAa,uLAAQ,0BAAA,CAAwB,CAAC,KAAI;IAExG,MAAM,eAAe,OAAO,WAAA,CAC3B,OAAO,OAAA,CAAQ,aAAa,EAAE,GAAA,CAAI,CAAC,CAACA,OAAM,cAAc,CAAA,KAAM;QAC7D,MAAM,aAAa;QACnB,WAAW,OAAA,CAAQA,KAAI;QACvB,MAAM,SAAS,WAAW,KAAA,CAAM,QAAQ;QACxC,QAAA,CAAS,iBAAiB,CAAA,CAAE,IAAA,CAAK,GAAG,WAAW,gBAAA,CAAiB,QAAQ,QAAQ,CAAC;QACjF,OAAO;YAACA;YAAM,MAAM;SAAA;IACrB,CAAC;IAGF,MAAM,QAAQ,OAAO,MAAA,CAAO,UAAU,YAAY;IAElD,KAAA,iJAAM,QAAA,CAAM,MAAA,CAAO,OAAO,CAAA,GAAI;IAC9B,KAAA,iJAAM,QAAA,CAAM,MAAA,CAAO,kBAAkB,CAAA,GAAI;IAMzC,IAAI,aAAa;QAChB,KAAA,CAAM,YAAY,MAAA,CAAO,kBAAkB,CAAA,GAAI;IAGhD;IAEA,OAAO;AACR;AAEO,MAAM,cAA6B,CAAC,MAAM,SAAS,gBAAgB;IACzE,OAAO,gBAAgB,MAAM,SAAS,WAAW;AAClD;AAEO,SAAS,mBAAmB,kBAAA,EAA6D;IAC/F,OAAO,CAAC,MAAM,SAAS,gBAAgB;QACtC,OAAO,gBAAgB,mBAAmB,IAAI,GAAkB,SAAS,aAAa,KAAA,GAAW,IAAI;IACtG;AACD","ignoreList":[0]}},
    {"offset": {"line": 736, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 742, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/primary-keys.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport type { AnySQLiteColumn, SQLiteColumn } from './columns/index.ts';\nimport { SQLiteTable } from './table.ts';\n\nexport function primaryKey<\n\tTTableName extends string,\n\tTColumn extends AnySQLiteColumn<{ tableName: TTableName }>,\n\tTColumns extends AnySQLiteColumn<{ tableName: TTableName }>[],\n>(config: { name?: string; columns: [TColumn, ...TColumns] }): PrimaryKeyBuilder;\n/**\n * @deprecated: Please use primaryKey({ columns: [] }) instead of this function\n * @param columns\n */\nexport function primaryKey<\n\tTTableName extends string,\n\tTColumns extends AnySQLiteColumn<{ tableName: TTableName }>[],\n>(...columns: TColumns): PrimaryKeyBuilder;\nexport function primaryKey(...config: any) {\n\tif (config[0].columns) {\n\t\treturn new PrimaryKeyBuilder(config[0].columns, config[0].name);\n\t}\n\treturn new PrimaryKeyBuilder(config);\n}\nexport class PrimaryKeyBuilder {\n\tstatic readonly [entityKind]: string = 'SQLitePrimaryKeyBuilder';\n\n\tdeclare _: {\n\t\tbrand: 'SQLitePrimaryKeyBuilder';\n\t};\n\n\t/** @internal */\n\tcolumns: SQLiteColumn[];\n\n\t/** @internal */\n\tname?: string;\n\n\tconstructor(\n\t\tcolumns: SQLiteColumn[],\n\t\tname?: string,\n\t) {\n\t\tthis.columns = columns;\n\t\tthis.name = name;\n\t}\n\n\t/** @internal */\n\tbuild(table: SQLiteTable): PrimaryKey {\n\t\treturn new PrimaryKey(table, this.columns, this.name);\n\t}\n}\n\nexport class PrimaryKey {\n\tstatic readonly [entityKind]: string = 'SQLitePrimaryKey';\n\n\treadonly columns: SQLiteColumn[];\n\treadonly name?: string;\n\n\tconstructor(readonly table: SQLiteTable, columns: SQLiteColumn[], name?: string) {\n\t\tthis.columns = columns;\n\t\tthis.name = name;\n\t}\n\n\tgetName(): string {\n\t\treturn this.name\n\t\t\t?? `${this.table[SQLiteTable.Symbol.Name]}_${this.columns.map((column) => column.name).join('_')}_pk`;\n\t}\n}\n"],"names":[],"mappings":";;;;;AAAA,SAAS,kBAAkB;AAE3B,SAAS,mBAAmB;;;AAerB,SAAS,WAAA,GAAc,MAAA,EAAa;IAC1C,IAAI,MAAA,CAAO,CAAC,CAAA,CAAE,OAAA,EAAS;QACtB,OAAO,IAAI,kBAAkB,MAAA,CAAO,CAAC,CAAA,CAAE,OAAA,EAAS,MAAA,CAAO,CAAC,CAAA,CAAE,IAAI;IAC/D;IACA,OAAO,IAAI,kBAAkB,MAAM;AACpC;AACO,MAAM,kBAAkB;IAC9B,OAAA,kJAAiB,aAAU,CAAA,GAAY,0BAAA;IAAA,cAAA,GAOvC,QAAA;IAAA,cAAA,GAGA,KAAA;IAEA,YACC,OAAA,EACA,IAAA,CACC;QACD,IAAA,CAAK,OAAA,GAAU;QACf,IAAA,CAAK,IAAA,GAAO;IACb;IAAA,cAAA,GAGA,MAAM,KAAA,EAAgC;QACrC,OAAO,IAAI,WAAW,OAAO,IAAA,CAAK,OAAA,EAAS,IAAA,CAAK,IAAI;IACrD;AACD;AAEO,MAAM,WAAW;IAMvB,YAAqB,KAAA,EAAoB,OAAA,EAAyB,IAAA,CAAe;QAA5D,IAAA,CAAA,KAAA,GAAA;QACpB,IAAA,CAAK,OAAA,GAAU;QACf,IAAA,CAAK,IAAA,GAAO;IACb;IARA,OAAA,kJAAiB,aAAU,CAAA,GAAY,mBAAA;IAE9B,QAAA;IACA,KAAA;IAOT,UAAkB;QACjB,OAAO,IAAA,CAAK,IAAA,IACR,GAAG,IAAA,CAAK,KAAA,mKAAM,cAAA,CAAY,MAAA,CAAO,IAAI,CAAC,CAAA,CAAA,EAAI,IAAA,CAAK,OAAA,CAAQ,GAAA,CAAI,CAAC,SAAW,OAAO,IAAI,EAAE,IAAA,CAAK,GAAG,CAAC,CAAA,GAAA,CAAA;IAClG;AACD","ignoreList":[0]}},
    {"offset": {"line": 784, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 790, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/query-builders/query.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport {\n\ttype BuildQueryResult,\n\ttype BuildRelationalQueryResult,\n\ttype DBQueryConfig,\n\tmapRelationalRow,\n\ttype TableRelationalConfig,\n\ttype TablesRelationalConfig,\n} from '~/relations.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { Query, QueryWithTypings, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport type { KnownKeysOnly } from '~/utils.ts';\nimport type { SQLiteDialect } from '../dialect.ts';\nimport type { PreparedQueryConfig, SQLitePreparedQuery, SQLiteSession } from '../session.ts';\nimport type { SQLiteTable } from '../table.ts';\n\nexport type SQLiteRelationalQueryKind<TMode extends 'sync' | 'async', TResult> = TMode extends 'async'\n\t? SQLiteRelationalQuery<TMode, TResult>\n\t: SQLiteSyncRelationalQuery<TResult>;\n\nexport class RelationalQueryBuilder<\n\tTMode extends 'sync' | 'async',\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n\tTFields extends TableRelationalConfig,\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteAsyncRelationalQueryBuilder';\n\n\tconstructor(\n\t\tprotected mode: TMode,\n\t\tprotected fullSchema: Record<string, unknown>,\n\t\tprotected schema: TSchema,\n\t\tprotected tableNamesMap: Record<string, string>,\n\t\tprotected table: SQLiteTable,\n\t\tprotected tableConfig: TableRelationalConfig,\n\t\tprotected dialect: SQLiteDialect,\n\t\tprotected session: SQLiteSession<'async', unknown, TFullSchema, TSchema>,\n\t) {}\n\n\tfindMany<TConfig extends DBQueryConfig<'many', true, TSchema, TFields>>(\n\t\tconfig?: KnownKeysOnly<TConfig, DBQueryConfig<'many', true, TSchema, TFields>>,\n\t): SQLiteRelationalQueryKind<TMode, BuildQueryResult<TSchema, TFields, TConfig>[]> {\n\t\treturn (this.mode === 'sync'\n\t\t\t? new SQLiteSyncRelationalQuery(\n\t\t\t\tthis.fullSchema,\n\t\t\t\tthis.schema,\n\t\t\t\tthis.tableNamesMap,\n\t\t\t\tthis.table,\n\t\t\t\tthis.tableConfig,\n\t\t\t\tthis.dialect,\n\t\t\t\tthis.session,\n\t\t\t\tconfig ? (config as DBQueryConfig<'many', true>) : {},\n\t\t\t\t'many',\n\t\t\t)\n\t\t\t: new SQLiteRelationalQuery(\n\t\t\t\tthis.fullSchema,\n\t\t\t\tthis.schema,\n\t\t\t\tthis.tableNamesMap,\n\t\t\t\tthis.table,\n\t\t\t\tthis.tableConfig,\n\t\t\t\tthis.dialect,\n\t\t\t\tthis.session,\n\t\t\t\tconfig ? (config as DBQueryConfig<'many', true>) : {},\n\t\t\t\t'many',\n\t\t\t)) as SQLiteRelationalQueryKind<TMode, BuildQueryResult<TSchema, TFields, TConfig>[]>;\n\t}\n\n\tfindFirst<TSelection extends Omit<DBQueryConfig<'many', true, TSchema, TFields>, 'limit'>>(\n\t\tconfig?: KnownKeysOnly<TSelection, Omit<DBQueryConfig<'many', true, TSchema, TFields>, 'limit'>>,\n\t): SQLiteRelationalQueryKind<TMode, BuildQueryResult<TSchema, TFields, TSelection> | undefined> {\n\t\treturn (this.mode === 'sync'\n\t\t\t? new SQLiteSyncRelationalQuery(\n\t\t\t\tthis.fullSchema,\n\t\t\t\tthis.schema,\n\t\t\t\tthis.tableNamesMap,\n\t\t\t\tthis.table,\n\t\t\t\tthis.tableConfig,\n\t\t\t\tthis.dialect,\n\t\t\t\tthis.session,\n\t\t\t\tconfig ? { ...(config as DBQueryConfig<'many', true> | undefined), limit: 1 } : { limit: 1 },\n\t\t\t\t'first',\n\t\t\t)\n\t\t\t: new SQLiteRelationalQuery(\n\t\t\t\tthis.fullSchema,\n\t\t\t\tthis.schema,\n\t\t\t\tthis.tableNamesMap,\n\t\t\t\tthis.table,\n\t\t\t\tthis.tableConfig,\n\t\t\t\tthis.dialect,\n\t\t\t\tthis.session,\n\t\t\t\tconfig ? { ...(config as DBQueryConfig<'many', true> | undefined), limit: 1 } : { limit: 1 },\n\t\t\t\t'first',\n\t\t\t)) as SQLiteRelationalQueryKind<TMode, BuildQueryResult<TSchema, TFields, TSelection> | undefined>;\n\t}\n}\n\nexport class SQLiteRelationalQuery<TType extends 'sync' | 'async', TResult> extends QueryPromise<TResult>\n\timplements RunnableQuery<TResult, 'sqlite'>, SQLWrapper\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteAsyncRelationalQuery';\n\n\tdeclare readonly _: {\n\t\treadonly dialect: 'sqlite';\n\t\treadonly type: TType;\n\t\treadonly result: TResult;\n\t};\n\n\t/** @internal */\n\tmode: 'many' | 'first';\n\n\tconstructor(\n\t\tprivate fullSchema: Record<string, unknown>,\n\t\tprivate schema: TablesRelationalConfig,\n\t\tprivate tableNamesMap: Record<string, string>,\n\t\t/** @internal */\n\t\tpublic table: SQLiteTable,\n\t\tprivate tableConfig: TableRelationalConfig,\n\t\tprivate dialect: SQLiteDialect,\n\t\tprivate session: SQLiteSession<'sync' | 'async', unknown, Record<string, unknown>, TablesRelationalConfig>,\n\t\tprivate config: DBQueryConfig<'many', true> | true,\n\t\tmode: 'many' | 'first',\n\t) {\n\t\tsuper();\n\t\tthis.mode = mode;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildRelationalQuery({\n\t\t\tfullSchema: this.fullSchema,\n\t\t\tschema: this.schema,\n\t\t\ttableNamesMap: this.tableNamesMap,\n\t\t\ttable: this.table,\n\t\t\ttableConfig: this.tableConfig,\n\t\t\tqueryConfig: this.config,\n\t\t\ttableAlias: this.tableConfig.tsName,\n\t\t}).sql as SQL;\n\t}\n\n\t/** @internal */\n\t_prepare(\n\t\tisOneTimeQuery = false,\n\t): SQLitePreparedQuery<PreparedQueryConfig & { type: TType; all: TResult; get: TResult; execute: TResult }> {\n\t\tconst { query, builtQuery } = this._toSQL();\n\n\t\treturn this.session[isOneTimeQuery ? 'prepareOneTimeQuery' : 'prepareQuery'](\n\t\t\tbuiltQuery,\n\t\t\tundefined,\n\t\t\tthis.mode === 'first' ? 'get' : 'all',\n\t\t\ttrue,\n\t\t\t(rawRows, mapColumnValue) => {\n\t\t\t\tconst rows = rawRows.map((row) =>\n\t\t\t\t\tmapRelationalRow(this.schema, this.tableConfig, row, query.selection, mapColumnValue)\n\t\t\t\t);\n\t\t\t\tif (this.mode === 'first') {\n\t\t\t\t\treturn rows[0] as TResult;\n\t\t\t\t}\n\t\t\t\treturn rows as TResult;\n\t\t\t},\n\t\t) as SQLitePreparedQuery<PreparedQueryConfig & { type: TType; all: TResult; get: TResult; execute: TResult }>;\n\t}\n\n\tprepare(): SQLitePreparedQuery<PreparedQueryConfig & { type: TType; all: TResult; get: TResult; execute: TResult }> {\n\t\treturn this._prepare(false);\n\t}\n\n\tprivate _toSQL(): { query: BuildRelationalQueryResult; builtQuery: QueryWithTypings } {\n\t\tconst query = this.dialect.buildRelationalQuery({\n\t\t\tfullSchema: this.fullSchema,\n\t\t\tschema: this.schema,\n\t\t\ttableNamesMap: this.tableNamesMap,\n\t\t\ttable: this.table,\n\t\t\ttableConfig: this.tableConfig,\n\t\t\tqueryConfig: this.config,\n\t\t\ttableAlias: this.tableConfig.tsName,\n\t\t});\n\n\t\tconst builtQuery = this.dialect.sqlToQuery(query.sql as SQL);\n\n\t\treturn { query, builtQuery };\n\t}\n\n\ttoSQL(): Query {\n\t\treturn this._toSQL().builtQuery;\n\t}\n\n\t/** @internal */\n\texecuteRaw(): TResult {\n\t\tif (this.mode === 'first') {\n\t\t\treturn this._prepare(false).get() as TResult;\n\t\t}\n\t\treturn this._prepare(false).all() as TResult;\n\t}\n\n\toverride async execute(): Promise<TResult> {\n\t\treturn this.executeRaw();\n\t}\n}\n\nexport class SQLiteSyncRelationalQuery<TResult> extends SQLiteRelationalQuery<'sync', TResult> {\n\tstatic override readonly [entityKind]: string = 'SQLiteSyncRelationalQuery';\n\n\tsync(): TResult {\n\t\treturn this.executeRaw();\n\t}\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 906, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 912, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/view-base.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport type { ColumnsSelection } from '~/sql/sql.ts';\nimport { View } from '~/sql/sql.ts';\n\nexport abstract class SQLiteViewBase<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n\tTSelection extends ColumnsSelection = ColumnsSelection,\n> extends View<TName, TExisting, TSelection> {\n\tstatic override readonly [entityKind]: string = 'SQLiteViewBase';\n\n\tdeclare _: View<TName, TExisting, TSelection>['_'] & {\n\t\tviewBrand: 'SQLiteView';\n\t};\n}\n"],"names":[],"mappings":";;;AAAA,SAAS,kBAAkB;AAE3B,SAAS,YAAY;;;AAEd,MAAe,4KAIZ,OAAA,CAAmC;IAC5C,OAAA,kJAA0B,aAAU,CAAA,GAAY,iBAAA;AAKjD","ignoreList":[0]}},
    {"offset": {"line": 924, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 930, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/dialect.ts"],"sourcesContent":["import { aliasedTable, aliasedTableColumn, mapColumnsInAliasedSQLToAlias, mapColumnsInSQLToAlias } from '~/alias.ts';\nimport { CasingCache } from '~/casing.ts';\nimport type { AnyColumn } from '~/column.ts';\nimport { Column } from '~/column.ts';\nimport { entityKind, is } from '~/entity.ts';\nimport { DrizzleError } from '~/errors.ts';\nimport type { MigrationConfig, MigrationMeta } from '~/migrator.ts';\nimport {\n\ttype BuildRelationalQueryResult,\n\ttype DBQueryConfig,\n\tgetOperators,\n\tgetOrderByOperators,\n\tMany,\n\tnormalizeRelation,\n\tOne,\n\ttype Relation,\n\ttype TableRelationalConfig,\n\ttype TablesRelationalConfig,\n} from '~/relations.ts';\nimport type { Name, Placeholder } from '~/sql/index.ts';\nimport { and, eq } from '~/sql/index.ts';\nimport { Param, type QueryWithTypings, SQL, sql, type SQLChunk } from '~/sql/sql.ts';\nimport { SQLiteColumn } from '~/sqlite-core/columns/index.ts';\nimport type {\n\tAnySQLiteSelectQueryBuilder,\n\tSQLiteDeleteConfig,\n\tSQLiteInsertConfig,\n\tSQLiteUpdateConfig,\n} from '~/sqlite-core/query-builders/index.ts';\nimport { SQLiteTable } from '~/sqlite-core/table.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { getTableName, getTableUniqueName, Table } from '~/table.ts';\nimport { type Casing, orderSelectedFields, type UpdateSet } from '~/utils.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport type {\n\tSelectedFieldsOrdered,\n\tSQLiteSelectConfig,\n\tSQLiteSelectJoinConfig,\n} from './query-builders/select.types.ts';\nimport type { SQLiteSession } from './session.ts';\nimport { SQLiteViewBase } from './view-base.ts';\n\nexport interface SQLiteDialectConfig {\n\tcasing?: Casing;\n}\n\nexport abstract class SQLiteDialect {\n\tstatic readonly [entityKind]: string = 'SQLiteDialect';\n\n\t/** @internal */\n\treadonly casing: CasingCache;\n\n\tconstructor(config?: SQLiteDialectConfig) {\n\t\tthis.casing = new CasingCache(config?.casing);\n\t}\n\n\tescapeName(name: string): string {\n\t\treturn `\"${name}\"`;\n\t}\n\n\tescapeParam(_num: number): string {\n\t\treturn '?';\n\t}\n\n\tescapeString(str: string): string {\n\t\treturn `'${str.replace(/'/g, \"''\")}'`;\n\t}\n\n\tprivate buildWithCTE(queries: Subquery[] | undefined): SQL | undefined {\n\t\tif (!queries?.length) return undefined;\n\n\t\tconst withSqlChunks = [sql`with `];\n\t\tfor (const [i, w] of queries.entries()) {\n\t\t\twithSqlChunks.push(sql`${sql.identifier(w._.alias)} as (${w._.sql})`);\n\t\t\tif (i < queries.length - 1) {\n\t\t\t\twithSqlChunks.push(sql`, `);\n\t\t\t}\n\t\t}\n\t\twithSqlChunks.push(sql` `);\n\t\treturn sql.join(withSqlChunks);\n\t}\n\n\tbuildDeleteQuery({ table, where, returning, withList, limit, orderBy }: SQLiteDeleteConfig): SQL {\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst returningSql = returning\n\t\t\t? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n\t\t\t: undefined;\n\n\t\tconst whereSql = where ? sql` where ${where}` : undefined;\n\n\t\tconst orderBySql = this.buildOrderBy(orderBy);\n\n\t\tconst limitSql = this.buildLimit(limit);\n\n\t\treturn sql`${withSql}delete from ${table}${whereSql}${returningSql}${orderBySql}${limitSql}`;\n\t}\n\n\tbuildUpdateSet(table: SQLiteTable, set: UpdateSet): SQL {\n\t\tconst tableColumns = table[Table.Symbol.Columns];\n\n\t\tconst columnNames = Object.keys(tableColumns).filter((colName) =>\n\t\t\tset[colName] !== undefined || tableColumns[colName]?.onUpdateFn !== undefined\n\t\t);\n\n\t\tconst setSize = columnNames.length;\n\t\treturn sql.join(columnNames.flatMap((colName, i) => {\n\t\t\tconst col = tableColumns[colName]!;\n\n\t\t\tconst value = set[colName] ?? sql.param(col.onUpdateFn!(), col);\n\t\t\tconst res = sql`${sql.identifier(this.casing.getColumnCasing(col))} = ${value}`;\n\n\t\t\tif (i < setSize - 1) {\n\t\t\t\treturn [res, sql.raw(', ')];\n\t\t\t}\n\t\t\treturn [res];\n\t\t}));\n\t}\n\n\tbuildUpdateQuery({ table, set, where, returning, withList, joins, from, limit, orderBy }: SQLiteUpdateConfig): SQL {\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst setSql = this.buildUpdateSet(table, set);\n\n\t\tconst fromSql = from && sql.join([sql.raw(' from '), this.buildFromTable(from)]);\n\n\t\tconst joinsSql = this.buildJoins(joins);\n\n\t\tconst returningSql = returning\n\t\t\t? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n\t\t\t: undefined;\n\n\t\tconst whereSql = where ? sql` where ${where}` : undefined;\n\n\t\tconst orderBySql = this.buildOrderBy(orderBy);\n\n\t\tconst limitSql = this.buildLimit(limit);\n\n\t\treturn sql`${withSql}update ${table} set ${setSql}${fromSql}${joinsSql}${whereSql}${returningSql}${orderBySql}${limitSql}`;\n\t}\n\n\t/**\n\t * Builds selection SQL with provided fields/expressions\n\t *\n\t * Examples:\n\t *\n\t * `select <selection> from`\n\t *\n\t * `insert ... returning <selection>`\n\t *\n\t * If `isSingleTable` is true, then columns won't be prefixed with table name\n\t */\n\tprivate buildSelection(\n\t\tfields: SelectedFieldsOrdered,\n\t\t{ isSingleTable = false }: { isSingleTable?: boolean } = {},\n\t): SQL {\n\t\tconst columnsLen = fields.length;\n\n\t\tconst chunks = fields\n\t\t\t.flatMap(({ field }, i) => {\n\t\t\t\tconst chunk: SQLChunk[] = [];\n\n\t\t\t\tif (is(field, SQL.Aliased) && field.isSelectionField) {\n\t\t\t\t\tchunk.push(sql.identifier(field.fieldAlias));\n\t\t\t\t} else if (is(field, SQL.Aliased) || is(field, SQL)) {\n\t\t\t\t\tconst query = is(field, SQL.Aliased) ? field.sql : field;\n\n\t\t\t\t\tif (isSingleTable) {\n\t\t\t\t\t\tchunk.push(\n\t\t\t\t\t\t\tnew SQL(\n\t\t\t\t\t\t\t\tquery.queryChunks.map((c) => {\n\t\t\t\t\t\t\t\t\tif (is(c, Column)) {\n\t\t\t\t\t\t\t\t\t\treturn sql.identifier(this.casing.getColumnCasing(c));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn c;\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchunk.push(query);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is(field, SQL.Aliased)) {\n\t\t\t\t\t\tchunk.push(sql` as ${sql.identifier(field.fieldAlias)}`);\n\t\t\t\t\t}\n\t\t\t\t} else if (is(field, Column)) {\n\t\t\t\t\tconst tableName = field.table[Table.Symbol.Name];\n\t\t\t\t\tif (isSingleTable) {\n\t\t\t\t\t\tchunk.push(sql.identifier(this.casing.getColumnCasing(field)));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchunk.push(sql`${sql.identifier(tableName)}.${sql.identifier(this.casing.getColumnCasing(field))}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (i < columnsLen - 1) {\n\t\t\t\t\tchunk.push(sql`, `);\n\t\t\t\t}\n\n\t\t\t\treturn chunk;\n\t\t\t});\n\n\t\treturn sql.join(chunks);\n\t}\n\n\tprivate buildJoins(joins: SQLiteSelectJoinConfig[] | undefined): SQL | undefined {\n\t\tif (!joins || joins.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst joinsArray: SQL[] = [];\n\n\t\tif (joins) {\n\t\t\tfor (const [index, joinMeta] of joins.entries()) {\n\t\t\t\tif (index === 0) {\n\t\t\t\t\tjoinsArray.push(sql` `);\n\t\t\t\t}\n\t\t\t\tconst table = joinMeta.table;\n\n\t\t\t\tif (is(table, SQLiteTable)) {\n\t\t\t\t\tconst tableName = table[SQLiteTable.Symbol.Name];\n\t\t\t\t\tconst tableSchema = table[SQLiteTable.Symbol.Schema];\n\t\t\t\t\tconst origTableName = table[SQLiteTable.Symbol.OriginalName];\n\t\t\t\t\tconst alias = tableName === origTableName ? undefined : joinMeta.alias;\n\t\t\t\t\tjoinsArray.push(\n\t\t\t\t\t\tsql`${sql.raw(joinMeta.joinType)} join ${tableSchema ? sql`${sql.identifier(tableSchema)}.` : undefined}${\n\t\t\t\t\t\t\tsql.identifier(origTableName)\n\t\t\t\t\t\t}${alias && sql` ${sql.identifier(alias)}`} on ${joinMeta.on}`,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tjoinsArray.push(\n\t\t\t\t\t\tsql`${sql.raw(joinMeta.joinType)} join ${table} on ${joinMeta.on}`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (index < joins.length - 1) {\n\t\t\t\t\tjoinsArray.push(sql` `);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn sql.join(joinsArray);\n\t}\n\n\tprivate buildLimit(limit: number | Placeholder | undefined): SQL | undefined {\n\t\treturn typeof limit === 'object' || (typeof limit === 'number' && limit >= 0)\n\t\t\t? sql` limit ${limit}`\n\t\t\t: undefined;\n\t}\n\n\tprivate buildOrderBy(orderBy: (SQLiteColumn | SQL | SQL.Aliased)[] | undefined): SQL | undefined {\n\t\tconst orderByList: (SQLiteColumn | SQL | SQL.Aliased)[] = [];\n\n\t\tif (orderBy) {\n\t\t\tfor (const [index, orderByValue] of orderBy.entries()) {\n\t\t\t\torderByList.push(orderByValue);\n\n\t\t\t\tif (index < orderBy.length - 1) {\n\t\t\t\t\torderByList.push(sql`, `);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn orderByList.length > 0 ? sql` order by ${sql.join(orderByList)}` : undefined;\n\t}\n\n\tprivate buildFromTable(\n\t\ttable: SQL | Subquery | SQLiteViewBase | SQLiteTable | undefined,\n\t): SQL | Subquery | SQLiteViewBase | SQLiteTable | undefined {\n\t\tif (is(table, Table) && table[Table.Symbol.OriginalName] !== table[Table.Symbol.Name]) {\n\t\t\treturn sql`${sql.identifier(table[Table.Symbol.OriginalName])} ${sql.identifier(table[Table.Symbol.Name])}`;\n\t\t}\n\n\t\treturn table;\n\t}\n\n\tbuildSelectQuery(\n\t\t{\n\t\t\twithList,\n\t\t\tfields,\n\t\t\tfieldsFlat,\n\t\t\twhere,\n\t\t\thaving,\n\t\t\ttable,\n\t\t\tjoins,\n\t\t\torderBy,\n\t\t\tgroupBy,\n\t\t\tlimit,\n\t\t\toffset,\n\t\t\tdistinct,\n\t\t\tsetOperators,\n\t\t}: SQLiteSelectConfig,\n\t): SQL {\n\t\tconst fieldsList = fieldsFlat ?? orderSelectedFields<SQLiteColumn>(fields);\n\t\tfor (const f of fieldsList) {\n\t\t\tif (\n\t\t\t\tis(f.field, Column)\n\t\t\t\t&& getTableName(f.field.table)\n\t\t\t\t\t!== (is(table, Subquery)\n\t\t\t\t\t\t? table._.alias\n\t\t\t\t\t\t: is(table, SQLiteViewBase)\n\t\t\t\t\t\t? table[ViewBaseConfig].name\n\t\t\t\t\t\t: is(table, SQL)\n\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t: getTableName(table))\n\t\t\t\t&& !((table) =>\n\t\t\t\t\tjoins?.some(({ alias }) =>\n\t\t\t\t\t\talias === (table[Table.Symbol.IsAlias] ? getTableName(table) : table[Table.Symbol.BaseName])\n\t\t\t\t\t))(f.field.table)\n\t\t\t) {\n\t\t\t\tconst tableName = getTableName(f.field.table);\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Your \"${\n\t\t\t\t\t\tf.path.join('->')\n\t\t\t\t\t}\" field references a column \"${tableName}\".\"${f.field.name}\", but the table \"${tableName}\" is not part of the query! Did you forget to join it?`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst isSingleTable = !joins || joins.length === 0;\n\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst distinctSql = distinct ? sql` distinct` : undefined;\n\n\t\tconst selection = this.buildSelection(fieldsList, { isSingleTable });\n\n\t\tconst tableSql = this.buildFromTable(table);\n\n\t\tconst joinsSql = this.buildJoins(joins);\n\n\t\tconst whereSql = where ? sql` where ${where}` : undefined;\n\n\t\tconst havingSql = having ? sql` having ${having}` : undefined;\n\n\t\tconst groupByList: (SQL | AnyColumn | SQL.Aliased)[] = [];\n\t\tif (groupBy) {\n\t\t\tfor (const [index, groupByValue] of groupBy.entries()) {\n\t\t\t\tgroupByList.push(groupByValue);\n\n\t\t\t\tif (index < groupBy.length - 1) {\n\t\t\t\t\tgroupByList.push(sql`, `);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst groupBySql = groupByList.length > 0 ? sql` group by ${sql.join(groupByList)}` : undefined;\n\n\t\tconst orderBySql = this.buildOrderBy(orderBy);\n\n\t\tconst limitSql = this.buildLimit(limit);\n\n\t\tconst offsetSql = offset ? sql` offset ${offset}` : undefined;\n\n\t\tconst finalQuery =\n\t\t\tsql`${withSql}select${distinctSql} ${selection} from ${tableSql}${joinsSql}${whereSql}${groupBySql}${havingSql}${orderBySql}${limitSql}${offsetSql}`;\n\n\t\tif (setOperators.length > 0) {\n\t\t\treturn this.buildSetOperations(finalQuery, setOperators);\n\t\t}\n\n\t\treturn finalQuery;\n\t}\n\n\tbuildSetOperations(leftSelect: SQL, setOperators: SQLiteSelectConfig['setOperators']): SQL {\n\t\tconst [setOperator, ...rest] = setOperators;\n\n\t\tif (!setOperator) {\n\t\t\tthrow new Error('Cannot pass undefined values to any set operator');\n\t\t}\n\n\t\tif (rest.length === 0) {\n\t\t\treturn this.buildSetOperationQuery({ leftSelect, setOperator });\n\t\t}\n\n\t\t// Some recursive magic here\n\t\treturn this.buildSetOperations(\n\t\t\tthis.buildSetOperationQuery({ leftSelect, setOperator }),\n\t\t\trest,\n\t\t);\n\t}\n\n\tbuildSetOperationQuery({\n\t\tleftSelect,\n\t\tsetOperator: { type, isAll, rightSelect, limit, orderBy, offset },\n\t}: { leftSelect: SQL; setOperator: SQLiteSelectConfig['setOperators'][number] }): SQL {\n\t\t// SQLite doesn't support parenthesis in set operations\n\t\tconst leftChunk = sql`${leftSelect.getSQL()} `;\n\t\tconst rightChunk = sql`${rightSelect.getSQL()}`;\n\n\t\tlet orderBySql;\n\t\tif (orderBy && orderBy.length > 0) {\n\t\t\tconst orderByValues: (SQL<unknown> | Name)[] = [];\n\n\t\t\t// The next bit is necessary because the sql operator replaces ${table.column} with `table`.`column`\n\t\t\t// which is invalid Sql syntax, Table from one of the SELECTs cannot be used in global ORDER clause\n\t\t\tfor (const singleOrderBy of orderBy) {\n\t\t\t\tif (is(singleOrderBy, SQLiteColumn)) {\n\t\t\t\t\torderByValues.push(sql.identifier(singleOrderBy.name));\n\t\t\t\t} else if (is(singleOrderBy, SQL)) {\n\t\t\t\t\tfor (let i = 0; i < singleOrderBy.queryChunks.length; i++) {\n\t\t\t\t\t\tconst chunk = singleOrderBy.queryChunks[i];\n\n\t\t\t\t\t\tif (is(chunk, SQLiteColumn)) {\n\t\t\t\t\t\t\tsingleOrderBy.queryChunks[i] = sql.identifier(this.casing.getColumnCasing(chunk));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\torderByValues.push(sql`${singleOrderBy}`);\n\t\t\t\t} else {\n\t\t\t\t\torderByValues.push(sql`${singleOrderBy}`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\torderBySql = sql` order by ${sql.join(orderByValues, sql`, `)}`;\n\t\t}\n\n\t\tconst limitSql = typeof limit === 'object' || (typeof limit === 'number' && limit >= 0)\n\t\t\t? sql` limit ${limit}`\n\t\t\t: undefined;\n\n\t\tconst operatorChunk = sql.raw(`${type} ${isAll ? 'all ' : ''}`);\n\n\t\tconst offsetSql = offset ? sql` offset ${offset}` : undefined;\n\n\t\treturn sql`${leftChunk}${operatorChunk}${rightChunk}${orderBySql}${limitSql}${offsetSql}`;\n\t}\n\n\tbuildInsertQuery(\n\t\t{ table, values: valuesOrSelect, onConflict, returning, withList, select }: SQLiteInsertConfig,\n\t): SQL {\n\t\t// const isSingleValue = values.length === 1;\n\t\tconst valuesSqlList: ((SQLChunk | SQL)[] | SQL)[] = [];\n\t\tconst columns: Record<string, SQLiteColumn> = table[Table.Symbol.Columns];\n\n\t\tconst colEntries: [string, SQLiteColumn][] = Object.entries(columns).filter(([_, col]) =>\n\t\t\t!col.shouldDisableInsert()\n\t\t);\n\t\tconst insertOrder = colEntries.map(([, column]) => sql.identifier(this.casing.getColumnCasing(column)));\n\n\t\tif (select) {\n\t\t\tconst select = valuesOrSelect as AnySQLiteSelectQueryBuilder | SQL;\n\n\t\t\tif (is(select, SQL)) {\n\t\t\t\tvaluesSqlList.push(select);\n\t\t\t} else {\n\t\t\t\tvaluesSqlList.push(select.getSQL());\n\t\t\t}\n\t\t} else {\n\t\t\tconst values = valuesOrSelect as Record<string, Param | SQL>[];\n\t\t\tvaluesSqlList.push(sql.raw('values '));\n\n\t\t\tfor (const [valueIndex, value] of values.entries()) {\n\t\t\t\tconst valueList: (SQLChunk | SQL)[] = [];\n\t\t\t\tfor (const [fieldName, col] of colEntries) {\n\t\t\t\t\tconst colValue = value[fieldName];\n\t\t\t\t\tif (colValue === undefined || (is(colValue, Param) && colValue.value === undefined)) {\n\t\t\t\t\t\tlet defaultValue;\n\t\t\t\t\t\tif (col.default !== null && col.default !== undefined) {\n\t\t\t\t\t\t\tdefaultValue = is(col.default, SQL) ? col.default : sql.param(col.default, col);\n\t\t\t\t\t\t\t// eslint-disable-next-line unicorn/no-negated-condition\n\t\t\t\t\t\t} else if (col.defaultFn !== undefined) {\n\t\t\t\t\t\t\tconst defaultFnResult = col.defaultFn();\n\t\t\t\t\t\t\tdefaultValue = is(defaultFnResult, SQL) ? defaultFnResult : sql.param(defaultFnResult, col);\n\t\t\t\t\t\t\t// eslint-disable-next-line unicorn/no-negated-condition\n\t\t\t\t\t\t} else if (!col.default && col.onUpdateFn !== undefined) {\n\t\t\t\t\t\t\tconst onUpdateFnResult = col.onUpdateFn();\n\t\t\t\t\t\t\tdefaultValue = is(onUpdateFnResult, SQL) ? onUpdateFnResult : sql.param(onUpdateFnResult, col);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdefaultValue = sql`null`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvalueList.push(defaultValue);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvalueList.push(colValue);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvaluesSqlList.push(valueList);\n\t\t\t\tif (valueIndex < values.length - 1) {\n\t\t\t\t\tvaluesSqlList.push(sql`, `);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst valuesSql = sql.join(valuesSqlList);\n\n\t\tconst returningSql = returning\n\t\t\t? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n\t\t\t: undefined;\n\n\t\tconst onConflictSql = onConflict ? sql` on conflict ${onConflict}` : undefined;\n\n\t\t// if (isSingleValue && valuesSqlList.length === 0){\n\t\t// \treturn sql`insert into ${table} default values ${onConflictSql}${returningSql}`;\n\t\t// }\n\n\t\treturn sql`${withSql}insert into ${table} ${insertOrder} ${valuesSql}${onConflictSql}${returningSql}`;\n\t}\n\n\tsqlToQuery(sql: SQL, invokeSource?: 'indexes' | undefined): QueryWithTypings {\n\t\treturn sql.toQuery({\n\t\t\tcasing: this.casing,\n\t\t\tescapeName: this.escapeName,\n\t\t\tescapeParam: this.escapeParam,\n\t\t\tescapeString: this.escapeString,\n\t\t\tinvokeSource,\n\t\t});\n\t}\n\n\tbuildRelationalQuery({\n\t\tfullSchema,\n\t\tschema,\n\t\ttableNamesMap,\n\t\ttable,\n\t\ttableConfig,\n\t\tqueryConfig: config,\n\t\ttableAlias,\n\t\tnestedQueryRelation,\n\t\tjoinOn,\n\t}: {\n\t\tfullSchema: Record<string, unknown>;\n\t\tschema: TablesRelationalConfig;\n\t\ttableNamesMap: Record<string, string>;\n\t\ttable: SQLiteTable;\n\t\ttableConfig: TableRelationalConfig;\n\t\tqueryConfig: true | DBQueryConfig<'many', true>;\n\t\ttableAlias: string;\n\t\tnestedQueryRelation?: Relation;\n\t\tjoinOn?: SQL;\n\t}): BuildRelationalQueryResult<SQLiteTable, SQLiteColumn> {\n\t\tlet selection: BuildRelationalQueryResult<SQLiteTable, SQLiteColumn>['selection'] = [];\n\t\tlet limit, offset, orderBy: SQLiteSelectConfig['orderBy'] = [], where;\n\t\tconst joins: SQLiteSelectJoinConfig[] = [];\n\n\t\tif (config === true) {\n\t\t\tconst selectionEntries = Object.entries(tableConfig.columns);\n\t\t\tselection = selectionEntries.map((\n\t\t\t\t[key, value],\n\t\t\t) => ({\n\t\t\t\tdbKey: value.name,\n\t\t\t\ttsKey: key,\n\t\t\t\tfield: aliasedTableColumn(value as SQLiteColumn, tableAlias),\n\t\t\t\trelationTableTsKey: undefined,\n\t\t\t\tisJson: false,\n\t\t\t\tselection: [],\n\t\t\t}));\n\t\t} else {\n\t\t\tconst aliasedColumns = Object.fromEntries(\n\t\t\t\tObject.entries(tableConfig.columns).map(([key, value]) => [key, aliasedTableColumn(value, tableAlias)]),\n\t\t\t);\n\n\t\t\tif (config.where) {\n\t\t\t\tconst whereSql = typeof config.where === 'function'\n\t\t\t\t\t? config.where(aliasedColumns, getOperators())\n\t\t\t\t\t: config.where;\n\t\t\t\twhere = whereSql && mapColumnsInSQLToAlias(whereSql, tableAlias);\n\t\t\t}\n\n\t\t\tconst fieldsSelection: { tsKey: string; value: SQLiteColumn | SQL.Aliased }[] = [];\n\t\t\tlet selectedColumns: string[] = [];\n\n\t\t\t// Figure out which columns to select\n\t\t\tif (config.columns) {\n\t\t\t\tlet isIncludeMode = false;\n\n\t\t\t\tfor (const [field, value] of Object.entries(config.columns)) {\n\t\t\t\t\tif (value === undefined) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (field in tableConfig.columns) {\n\t\t\t\t\t\tif (!isIncludeMode && value === true) {\n\t\t\t\t\t\t\tisIncludeMode = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tselectedColumns.push(field);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (selectedColumns.length > 0) {\n\t\t\t\t\tselectedColumns = isIncludeMode\n\t\t\t\t\t\t? selectedColumns.filter((c) => config.columns?.[c] === true)\n\t\t\t\t\t\t: Object.keys(tableConfig.columns).filter((key) => !selectedColumns.includes(key));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Select all columns if selection is not specified\n\t\t\t\tselectedColumns = Object.keys(tableConfig.columns);\n\t\t\t}\n\n\t\t\tfor (const field of selectedColumns) {\n\t\t\t\tconst column = tableConfig.columns[field]! as SQLiteColumn;\n\t\t\t\tfieldsSelection.push({ tsKey: field, value: column });\n\t\t\t}\n\n\t\t\tlet selectedRelations: {\n\t\t\t\ttsKey: string;\n\t\t\t\tqueryConfig: true | DBQueryConfig<'many', false>;\n\t\t\t\trelation: Relation;\n\t\t\t}[] = [];\n\n\t\t\t// Figure out which relations to select\n\t\t\tif (config.with) {\n\t\t\t\tselectedRelations = Object.entries(config.with)\n\t\t\t\t\t.filter((entry): entry is [typeof entry[0], NonNullable<typeof entry[1]>] => !!entry[1])\n\t\t\t\t\t.map(([tsKey, queryConfig]) => ({ tsKey, queryConfig, relation: tableConfig.relations[tsKey]! }));\n\t\t\t}\n\n\t\t\tlet extras;\n\n\t\t\t// Figure out which extras to select\n\t\t\tif (config.extras) {\n\t\t\t\textras = typeof config.extras === 'function'\n\t\t\t\t\t? config.extras(aliasedColumns, { sql })\n\t\t\t\t\t: config.extras;\n\t\t\t\tfor (const [tsKey, value] of Object.entries(extras)) {\n\t\t\t\t\tfieldsSelection.push({\n\t\t\t\t\t\ttsKey,\n\t\t\t\t\t\tvalue: mapColumnsInAliasedSQLToAlias(value, tableAlias),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Transform `fieldsSelection` into `selection`\n\t\t\t// `fieldsSelection` shouldn't be used after this point\n\t\t\tfor (const { tsKey, value } of fieldsSelection) {\n\t\t\t\tselection.push({\n\t\t\t\t\tdbKey: is(value, SQL.Aliased) ? value.fieldAlias : tableConfig.columns[tsKey]!.name,\n\t\t\t\t\ttsKey,\n\t\t\t\t\tfield: is(value, Column) ? aliasedTableColumn(value, tableAlias) : value,\n\t\t\t\t\trelationTableTsKey: undefined,\n\t\t\t\t\tisJson: false,\n\t\t\t\t\tselection: [],\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tlet orderByOrig = typeof config.orderBy === 'function'\n\t\t\t\t? config.orderBy(aliasedColumns, getOrderByOperators())\n\t\t\t\t: config.orderBy ?? [];\n\t\t\tif (!Array.isArray(orderByOrig)) {\n\t\t\t\torderByOrig = [orderByOrig];\n\t\t\t}\n\t\t\torderBy = orderByOrig.map((orderByValue) => {\n\t\t\t\tif (is(orderByValue, Column)) {\n\t\t\t\t\treturn aliasedTableColumn(orderByValue, tableAlias) as SQLiteColumn;\n\t\t\t\t}\n\t\t\t\treturn mapColumnsInSQLToAlias(orderByValue, tableAlias);\n\t\t\t});\n\n\t\t\tlimit = config.limit;\n\t\t\toffset = config.offset;\n\n\t\t\t// Process all relations\n\t\t\tfor (\n\t\t\t\tconst {\n\t\t\t\t\ttsKey: selectedRelationTsKey,\n\t\t\t\t\tqueryConfig: selectedRelationConfigValue,\n\t\t\t\t\trelation,\n\t\t\t\t} of selectedRelations\n\t\t\t) {\n\t\t\t\tconst normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n\t\t\t\tconst relationTableName = getTableUniqueName(relation.referencedTable);\n\t\t\t\tconst relationTableTsName = tableNamesMap[relationTableName]!;\n\t\t\t\tconst relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n\t\t\t\t// const relationTable = schema[relationTableTsName]!;\n\t\t\t\tconst joinOn = and(\n\t\t\t\t\t...normalizedRelation.fields.map((field, i) =>\n\t\t\t\t\t\teq(\n\t\t\t\t\t\t\taliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),\n\t\t\t\t\t\t\taliasedTableColumn(field, tableAlias),\n\t\t\t\t\t\t)\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tconst builtRelation = this.buildRelationalQuery({\n\t\t\t\t\tfullSchema,\n\t\t\t\t\tschema,\n\t\t\t\t\ttableNamesMap,\n\t\t\t\t\ttable: fullSchema[relationTableTsName] as SQLiteTable,\n\t\t\t\t\ttableConfig: schema[relationTableTsName]!,\n\t\t\t\t\tqueryConfig: is(relation, One)\n\t\t\t\t\t\t? (selectedRelationConfigValue === true\n\t\t\t\t\t\t\t? { limit: 1 }\n\t\t\t\t\t\t\t: { ...selectedRelationConfigValue, limit: 1 })\n\t\t\t\t\t\t: selectedRelationConfigValue,\n\t\t\t\t\ttableAlias: relationTableAlias,\n\t\t\t\t\tjoinOn,\n\t\t\t\t\tnestedQueryRelation: relation,\n\t\t\t\t});\n\t\t\t\tconst field = (sql`(${builtRelation.sql})`).as(selectedRelationTsKey);\n\t\t\t\tselection.push({\n\t\t\t\t\tdbKey: selectedRelationTsKey,\n\t\t\t\t\ttsKey: selectedRelationTsKey,\n\t\t\t\t\tfield,\n\t\t\t\t\trelationTableTsKey: relationTableTsName,\n\t\t\t\t\tisJson: true,\n\t\t\t\t\tselection: builtRelation.selection,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (selection.length === 0) {\n\t\t\tthrow new DrizzleError({\n\t\t\t\tmessage:\n\t\t\t\t\t`No fields selected for table \"${tableConfig.tsName}\" (\"${tableAlias}\"). You need to have at least one item in \"columns\", \"with\" or \"extras\". If you need to select all columns, omit the \"columns\" key or set it to undefined.`,\n\t\t\t});\n\t\t}\n\n\t\tlet result;\n\n\t\twhere = and(joinOn, where);\n\n\t\tif (nestedQueryRelation) {\n\t\t\tlet field = sql`json_array(${\n\t\t\t\tsql.join(\n\t\t\t\t\tselection.map(({ field }) =>\n\t\t\t\t\t\tis(field, SQLiteColumn)\n\t\t\t\t\t\t\t? sql.identifier(this.casing.getColumnCasing(field))\n\t\t\t\t\t\t\t: is(field, SQL.Aliased)\n\t\t\t\t\t\t\t? field.sql\n\t\t\t\t\t\t\t: field\n\t\t\t\t\t),\n\t\t\t\t\tsql`, `,\n\t\t\t\t)\n\t\t\t})`;\n\t\t\tif (is(nestedQueryRelation, Many)) {\n\t\t\t\tfield = sql`coalesce(json_group_array(${field}), json_array())`;\n\t\t\t}\n\t\t\tconst nestedSelection = [{\n\t\t\t\tdbKey: 'data',\n\t\t\t\ttsKey: 'data',\n\t\t\t\tfield: field.as('data'),\n\t\t\t\tisJson: true,\n\t\t\t\trelationTableTsKey: tableConfig.tsName,\n\t\t\t\tselection,\n\t\t\t}];\n\n\t\t\tconst needsSubquery = limit !== undefined || offset !== undefined || orderBy.length > 0;\n\n\t\t\tif (needsSubquery) {\n\t\t\t\tresult = this.buildSelectQuery({\n\t\t\t\t\ttable: aliasedTable(table, tableAlias),\n\t\t\t\t\tfields: {},\n\t\t\t\t\tfieldsFlat: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpath: [],\n\t\t\t\t\t\t\tfield: sql.raw('*'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\twhere,\n\t\t\t\t\tlimit,\n\t\t\t\t\toffset,\n\t\t\t\t\torderBy,\n\t\t\t\t\tsetOperators: [],\n\t\t\t\t});\n\n\t\t\t\twhere = undefined;\n\t\t\t\tlimit = undefined;\n\t\t\t\toffset = undefined;\n\t\t\t\torderBy = undefined;\n\t\t\t} else {\n\t\t\t\tresult = aliasedTable(table, tableAlias);\n\t\t\t}\n\n\t\t\tresult = this.buildSelectQuery({\n\t\t\t\ttable: is(result, SQLiteTable) ? result : new Subquery(result, {}, tableAlias),\n\t\t\t\tfields: {},\n\t\t\t\tfieldsFlat: nestedSelection.map(({ field }) => ({\n\t\t\t\t\tpath: [],\n\t\t\t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n\t\t\t\t})),\n\t\t\t\tjoins,\n\t\t\t\twhere,\n\t\t\t\tlimit,\n\t\t\t\toffset,\n\t\t\t\torderBy,\n\t\t\t\tsetOperators: [],\n\t\t\t});\n\t\t} else {\n\t\t\tresult = this.buildSelectQuery({\n\t\t\t\ttable: aliasedTable(table, tableAlias),\n\t\t\t\tfields: {},\n\t\t\t\tfieldsFlat: selection.map(({ field }) => ({\n\t\t\t\t\tpath: [],\n\t\t\t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n\t\t\t\t})),\n\t\t\t\tjoins,\n\t\t\t\twhere,\n\t\t\t\tlimit,\n\t\t\t\toffset,\n\t\t\t\torderBy,\n\t\t\t\tsetOperators: [],\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\ttableTsKey: tableConfig.tsName,\n\t\t\tsql: result,\n\t\t\tselection,\n\t\t};\n\t}\n}\n\nexport class SQLiteSyncDialect extends SQLiteDialect {\n\tstatic override readonly [entityKind]: string = 'SQLiteSyncDialect';\n\n\tmigrate(\n\t\tmigrations: MigrationMeta[],\n\t\tsession: SQLiteSession<'sync', unknown, Record<string, unknown>, TablesRelationalConfig>,\n\t\tconfig?: string | MigrationConfig,\n\t): void {\n\t\tconst migrationsTable = config === undefined\n\t\t\t? '__drizzle_migrations'\n\t\t\t: typeof config === 'string'\n\t\t\t? '__drizzle_migrations'\n\t\t\t: config.migrationsTable ?? '__drizzle_migrations';\n\n\t\tconst migrationTableCreate = sql`\n\t\t\tCREATE TABLE IF NOT EXISTS ${sql.identifier(migrationsTable)} (\n\t\t\t\tid SERIAL PRIMARY KEY,\n\t\t\t\thash text NOT NULL,\n\t\t\t\tcreated_at numeric\n\t\t\t)\n\t\t`;\n\t\tsession.run(migrationTableCreate);\n\n\t\tconst dbMigrations = session.values<[number, string, string]>(\n\t\t\tsql`SELECT id, hash, created_at FROM ${sql.identifier(migrationsTable)} ORDER BY created_at DESC LIMIT 1`,\n\t\t);\n\n\t\tconst lastDbMigration = dbMigrations[0] ?? undefined;\n\t\tsession.run(sql`BEGIN`);\n\n\t\ttry {\n\t\t\tfor (const migration of migrations) {\n\t\t\t\tif (!lastDbMigration || Number(lastDbMigration[2])! < migration.folderMillis) {\n\t\t\t\t\tfor (const stmt of migration.sql) {\n\t\t\t\t\t\tsession.run(sql.raw(stmt));\n\t\t\t\t\t}\n\t\t\t\t\tsession.run(\n\t\t\t\t\t\tsql`INSERT INTO ${\n\t\t\t\t\t\t\tsql.identifier(migrationsTable)\n\t\t\t\t\t\t} (\"hash\", \"created_at\") VALUES(${migration.hash}, ${migration.folderMillis})`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsession.run(sql`COMMIT`);\n\t\t} catch (e) {\n\t\t\tsession.run(sql`ROLLBACK`);\n\t\t\tthrow e;\n\t\t}\n\t}\n}\n\nexport class SQLiteAsyncDialect extends SQLiteDialect {\n\tstatic override readonly [entityKind]: string = 'SQLiteAsyncDialect';\n\n\tasync migrate(\n\t\tmigrations: MigrationMeta[],\n\t\tsession: SQLiteSession<'async', any, any, any>,\n\t\tconfig?: string | MigrationConfig,\n\t): Promise<void> {\n\t\tconst migrationsTable = config === undefined\n\t\t\t? '__drizzle_migrations'\n\t\t\t: typeof config === 'string'\n\t\t\t? '__drizzle_migrations'\n\t\t\t: config.migrationsTable ?? '__drizzle_migrations';\n\n\t\tconst migrationTableCreate = sql`\n\t\t\tCREATE TABLE IF NOT EXISTS ${sql.identifier(migrationsTable)} (\n\t\t\t\tid SERIAL PRIMARY KEY,\n\t\t\t\thash text NOT NULL,\n\t\t\t\tcreated_at numeric\n\t\t\t)\n\t\t`;\n\t\tawait session.run(migrationTableCreate);\n\n\t\tconst dbMigrations = await session.values<[number, string, string]>(\n\t\t\tsql`SELECT id, hash, created_at FROM ${sql.identifier(migrationsTable)} ORDER BY created_at DESC LIMIT 1`,\n\t\t);\n\n\t\tconst lastDbMigration = dbMigrations[0] ?? undefined;\n\n\t\tawait session.transaction(async (tx) => {\n\t\t\tfor (const migration of migrations) {\n\t\t\t\tif (!lastDbMigration || Number(lastDbMigration[2])! < migration.folderMillis) {\n\t\t\t\t\tfor (const stmt of migration.sql) {\n\t\t\t\t\t\tawait tx.run(sql.raw(stmt));\n\t\t\t\t\t}\n\t\t\t\t\tawait tx.run(\n\t\t\t\t\t\tsql`INSERT INTO ${\n\t\t\t\t\t\t\tsql.identifier(migrationsTable)\n\t\t\t\t\t\t} (\"hash\", \"created_at\") VALUES(${migration.hash}, ${migration.folderMillis})`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n"],"names":["table","select","sql","joinOn","field"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1544, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1550, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/query-builders/select.ts"],"sourcesContent":["import { entityKind, is } from '~/entity.ts';\nimport { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type {\n\tBuildSubquerySelection,\n\tGetSelectTableName,\n\tGetSelectTableSelection,\n\tJoinNullability,\n\tJoinType,\n\tSelectMode,\n\tSelectResult,\n\tSetOperator,\n} from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport { SQL, View } from '~/sql/sql.ts';\nimport type { ColumnsSelection, Placeholder, Query, SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteColumn } from '~/sqlite-core/columns/index.ts';\nimport type { SQLiteDialect } from '~/sqlite-core/dialect.ts';\nimport type { SQLiteSession } from '~/sqlite-core/session.ts';\nimport type { SubqueryWithSelection } from '~/sqlite-core/subquery.ts';\nimport type { SQLiteTable } from '~/sqlite-core/table.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { Table } from '~/table.ts';\nimport {\n\tapplyMixins,\n\tgetTableColumns,\n\tgetTableLikeName,\n\thaveSameKeys,\n\torderSelectedFields,\n\ttype ValueOrArray,\n} from '~/utils.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport { SQLiteViewBase } from '../view-base.ts';\nimport type {\n\tAnySQLiteSelect,\n\tCreateSQLiteSelectFromBuilderMode,\n\tGetSQLiteSetOperators,\n\tSelectedFields,\n\tSetOperatorRightSelect,\n\tSQLiteCreateSetOperatorFn,\n\tSQLiteSelectConfig,\n\tSQLiteSelectDynamic,\n\tSQLiteSelectExecute,\n\tSQLiteSelectHKT,\n\tSQLiteSelectHKTBase,\n\tSQLiteSelectJoinFn,\n\tSQLiteSelectPrepare,\n\tSQLiteSelectWithout,\n\tSQLiteSetOperatorExcludedMethods,\n\tSQLiteSetOperatorWithResult,\n} from './select.types.ts';\n\nexport class SQLiteSelectBuilder<\n\tTSelection extends SelectedFields | undefined,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTBuilderMode extends 'db' | 'qb' = 'db',\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteSelectBuilder';\n\n\tprivate fields: TSelection;\n\tprivate session: SQLiteSession<any, any, any, any> | undefined;\n\tprivate dialect: SQLiteDialect;\n\tprivate withList: Subquery[] | undefined;\n\tprivate distinct: boolean | undefined;\n\n\tconstructor(\n\t\tconfig: {\n\t\t\tfields: TSelection;\n\t\t\tsession: SQLiteSession<any, any, any, any> | undefined;\n\t\t\tdialect: SQLiteDialect;\n\t\t\twithList?: Subquery[];\n\t\t\tdistinct?: boolean;\n\t\t},\n\t) {\n\t\tthis.fields = config.fields;\n\t\tthis.session = config.session;\n\t\tthis.dialect = config.dialect;\n\t\tthis.withList = config.withList;\n\t\tthis.distinct = config.distinct;\n\t}\n\n\tfrom<TFrom extends SQLiteTable | Subquery | SQLiteViewBase | SQL>(\n\t\tsource: TFrom,\n\t): CreateSQLiteSelectFromBuilderMode<\n\t\tTBuilderMode,\n\t\tGetSelectTableName<TFrom>,\n\t\tTResultType,\n\t\tTRunResult,\n\t\tTSelection extends undefined ? GetSelectTableSelection<TFrom> : TSelection,\n\t\tTSelection extends undefined ? 'single' : 'partial'\n\t> {\n\t\tconst isPartialSelect = !!this.fields;\n\n\t\tlet fields: SelectedFields;\n\t\tif (this.fields) {\n\t\t\tfields = this.fields;\n\t\t} else if (is(source, Subquery)) {\n\t\t\t// This is required to use the proxy handler to get the correct field values from the subquery\n\t\t\tfields = Object.fromEntries(\n\t\t\t\tObject.keys(source._.selectedFields).map((\n\t\t\t\t\tkey,\n\t\t\t\t) => [key, source[key as unknown as keyof typeof source] as unknown as SelectedFields[string]]),\n\t\t\t);\n\t\t} else if (is(source, SQLiteViewBase)) {\n\t\t\tfields = source[ViewBaseConfig].selectedFields as SelectedFields;\n\t\t} else if (is(source, SQL)) {\n\t\t\tfields = {};\n\t\t} else {\n\t\t\tfields = getTableColumns<SQLiteTable>(source);\n\t\t}\n\n\t\treturn new SQLiteSelectBase({\n\t\t\ttable: source,\n\t\t\tfields,\n\t\t\tisPartialSelect,\n\t\t\tsession: this.session,\n\t\t\tdialect: this.dialect,\n\t\t\twithList: this.withList,\n\t\t\tdistinct: this.distinct,\n\t\t}) as any;\n\t}\n}\n\nexport abstract class SQLiteSelectQueryBuilderBase<\n\tTHKT extends SQLiteSelectHKTBase,\n\tTTableName extends string | undefined,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTSelection extends ColumnsSelection,\n\tTSelectMode extends SelectMode,\n\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n\t\t: {},\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n\tTResult extends any[] = SelectResult<TSelection, TSelectMode, TNullabilityMap>[],\n\tTSelectedFields extends ColumnsSelection = BuildSubquerySelection<TSelection, TNullabilityMap>,\n> extends TypedQueryBuilder<TSelectedFields, TResult> {\n\tstatic override readonly [entityKind]: string = 'SQLiteSelectQueryBuilder';\n\n\toverride readonly _: {\n\t\treadonly dialect: 'sqlite';\n\t\treadonly hkt: THKT;\n\t\treadonly tableName: TTableName;\n\t\treadonly resultType: TResultType;\n\t\treadonly runResult: TRunResult;\n\t\treadonly selection: TSelection;\n\t\treadonly selectMode: TSelectMode;\n\t\treadonly nullabilityMap: TNullabilityMap;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TResult;\n\t\treadonly selectedFields: TSelectedFields;\n\t};\n\n\t/** @internal */\n\tconfig: SQLiteSelectConfig;\n\tprotected joinsNotNullableMap: Record<string, boolean>;\n\tprivate tableName: string | undefined;\n\tprivate isPartialSelect: boolean;\n\tprotected session: SQLiteSession<any, any, any, any> | undefined;\n\tprotected dialect: SQLiteDialect;\n\n\tconstructor(\n\t\t{ table, fields, isPartialSelect, session, dialect, withList, distinct }: {\n\t\t\ttable: SQLiteSelectConfig['table'];\n\t\t\tfields: SQLiteSelectConfig['fields'];\n\t\t\tisPartialSelect: boolean;\n\t\t\tsession: SQLiteSession<any, any, any, any> | undefined;\n\t\t\tdialect: SQLiteDialect;\n\t\t\twithList: Subquery[] | undefined;\n\t\t\tdistinct: boolean | undefined;\n\t\t},\n\t) {\n\t\tsuper();\n\t\tthis.config = {\n\t\t\twithList,\n\t\t\ttable,\n\t\t\tfields: { ...fields },\n\t\t\tdistinct,\n\t\t\tsetOperators: [],\n\t\t};\n\t\tthis.isPartialSelect = isPartialSelect;\n\t\tthis.session = session;\n\t\tthis.dialect = dialect;\n\t\tthis._ = {\n\t\t\tselectedFields: fields as TSelectedFields,\n\t\t} as this['_'];\n\t\tthis.tableName = getTableLikeName(table);\n\t\tthis.joinsNotNullableMap = typeof this.tableName === 'string' ? { [this.tableName]: true } : {};\n\t}\n\n\tprivate createJoin<TJoinType extends JoinType>(\n\t\tjoinType: TJoinType,\n\t): SQLiteSelectJoinFn<this, TDynamic, TJoinType> {\n\t\treturn (\n\t\t\ttable: SQLiteTable | Subquery | SQLiteViewBase | SQL,\n\t\t\ton: ((aliases: TSelection) => SQL | undefined) | SQL | undefined,\n\t\t) => {\n\t\t\tconst baseTableName = this.tableName;\n\t\t\tconst tableName = getTableLikeName(table);\n\n\t\t\tif (typeof tableName === 'string' && this.config.joins?.some((join) => join.alias === tableName)) {\n\t\t\t\tthrow new Error(`Alias \"${tableName}\" is already used in this query`);\n\t\t\t}\n\n\t\t\tif (!this.isPartialSelect) {\n\t\t\t\t// If this is the first join and this is not a partial select and we're not selecting from raw SQL, \"move\" the fields from the main table to the nested object\n\t\t\t\tif (Object.keys(this.joinsNotNullableMap).length === 1 && typeof baseTableName === 'string') {\n\t\t\t\t\tthis.config.fields = {\n\t\t\t\t\t\t[baseTableName]: this.config.fields,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif (typeof tableName === 'string' && !is(table, SQL)) {\n\t\t\t\t\tconst selection = is(table, Subquery)\n\t\t\t\t\t\t? table._.selectedFields\n\t\t\t\t\t\t: is(table, View)\n\t\t\t\t\t\t? table[ViewBaseConfig].selectedFields\n\t\t\t\t\t\t: table[Table.Symbol.Columns];\n\t\t\t\t\tthis.config.fields[tableName] = selection;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof on === 'function') {\n\t\t\t\ton = on(\n\t\t\t\t\tnew Proxy(\n\t\t\t\t\t\tthis.config.fields,\n\t\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t\t) as TSelection,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!this.config.joins) {\n\t\t\t\tthis.config.joins = [];\n\t\t\t}\n\t\t\tthis.config.joins.push({ on, table, joinType, alias: tableName });\n\n\t\t\tif (typeof tableName === 'string') {\n\t\t\t\tswitch (joinType) {\n\t\t\t\t\tcase 'left': {\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'right': {\n\t\t\t\t\t\tthis.joinsNotNullableMap = Object.fromEntries(\n\t\t\t\t\t\t\tObject.entries(this.joinsNotNullableMap).map(([key]) => [key, false]),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'inner': {\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'full': {\n\t\t\t\t\t\tthis.joinsNotNullableMap = Object.fromEntries(\n\t\t\t\t\t\t\tObject.entries(this.joinsNotNullableMap).map(([key]) => [key, false]),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this as any;\n\t\t};\n\t}\n\n\t/**\n\t * Executes a `left join` operation by adding another table to the current query.\n\t *\n\t * Calling this method associates each row of the table with the corresponding row from the joined table, if a match is found. If no matching row exists, it sets all columns of the joined table to null.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#left-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User; pets: Pet | null }[] = await db.select()\n\t *   .from(users)\n\t *   .leftJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number; petId: number | null }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .leftJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\tleftJoin = this.createJoin('left');\n\n\t/**\n\t * Executes a `right join` operation by adding another table to the current query.\n\t *\n\t * Calling this method associates each row of the joined table with the corresponding row from the main table, if a match is found. If no matching row exists, it sets all columns of the main table to null.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#right-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User | null; pets: Pet }[] = await db.select()\n\t *   .from(users)\n\t *   .rightJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number | null; petId: number }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .rightJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\trightJoin = this.createJoin('right');\n\n\t/**\n\t * Executes an `inner join` operation, creating a new table by combining rows from two tables that have matching values.\n\t *\n\t * Calling this method retrieves rows that have corresponding entries in both joined tables. Rows without matching entries in either table are excluded, resulting in a table that includes only matching pairs.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#inner-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User; pets: Pet }[] = await db.select()\n\t *   .from(users)\n\t *   .innerJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number; petId: number }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .innerJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\tinnerJoin = this.createJoin('inner');\n\n\t/**\n\t * Executes a `full join` operation by combining rows from two tables into a new table.\n\t *\n\t * Calling this method retrieves all rows from both main and joined tables, merging rows with matching values and filling in `null` for non-matching columns.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#full-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User | null; pets: Pet | null }[] = await db.select()\n\t *   .from(users)\n\t *   .fullJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number | null; petId: number | null }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .fullJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\tfullJoin = this.createJoin('full');\n\n\tprivate createSetOperator(\n\t\ttype: SetOperator,\n\t\tisAll: boolean,\n\t): <TValue extends SQLiteSetOperatorWithResult<TResult>>(\n\t\trightSelection:\n\t\t\t| ((setOperators: GetSQLiteSetOperators) => SetOperatorRightSelect<TValue, TResult>)\n\t\t\t| SetOperatorRightSelect<TValue, TResult>,\n\t) => SQLiteSelectWithout<\n\t\tthis,\n\t\tTDynamic,\n\t\tSQLiteSetOperatorExcludedMethods,\n\t\ttrue\n\t> {\n\t\treturn (rightSelection) => {\n\t\t\tconst rightSelect = (typeof rightSelection === 'function'\n\t\t\t\t? rightSelection(getSQLiteSetOperators())\n\t\t\t\t: rightSelection) as TypedQueryBuilder<\n\t\t\t\t\tany,\n\t\t\t\t\tTResult\n\t\t\t\t>;\n\n\t\t\tif (!haveSameKeys(this.getSelectedFields(), rightSelect.getSelectedFields())) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Set operator error (union / intersect / except): selected fields are not the same or are in a different order',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.config.setOperators.push({ type, isAll, rightSelect });\n\t\t\treturn this as any;\n\t\t};\n\t}\n\n\t/**\n\t * Adds `union` set operator to the query.\n\t *\n\t * Calling this method will combine the result sets of the `select` statements and remove any duplicate rows that appear across them.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#union}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all unique names from customers and users tables\n\t * await db.select({ name: users.name })\n\t *   .from(users)\n\t *   .union(\n\t *     db.select({ name: customers.name }).from(customers)\n\t *   );\n\t * // or\n\t * import { union } from 'drizzle-orm/sqlite-core'\n\t *\n\t * await union(\n\t *   db.select({ name: users.name }).from(users),\n\t *   db.select({ name: customers.name }).from(customers)\n\t * );\n\t * ```\n\t */\n\tunion = this.createSetOperator('union', false);\n\n\t/**\n\t * Adds `union all` set operator to the query.\n\t *\n\t * Calling this method will combine the result-set of the `select` statements and keep all duplicate rows that appear across them.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#union-all}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all transaction ids from both online and in-store sales\n\t * await db.select({ transaction: onlineSales.transactionId })\n\t *   .from(onlineSales)\n\t *   .unionAll(\n\t *     db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n\t *   );\n\t * // or\n\t * import { unionAll } from 'drizzle-orm/sqlite-core'\n\t *\n\t * await unionAll(\n\t *   db.select({ transaction: onlineSales.transactionId }).from(onlineSales),\n\t *   db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n\t * );\n\t * ```\n\t */\n\tunionAll = this.createSetOperator('union', true);\n\n\t/**\n\t * Adds `intersect` set operator to the query.\n\t *\n\t * Calling this method will retain only the rows that are present in both result sets and eliminate duplicates.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select course names that are offered in both departments A and B\n\t * await db.select({ courseName: depA.courseName })\n\t *   .from(depA)\n\t *   .intersect(\n\t *     db.select({ courseName: depB.courseName }).from(depB)\n\t *   );\n\t * // or\n\t * import { intersect } from 'drizzle-orm/sqlite-core'\n\t *\n\t * await intersect(\n\t *   db.select({ courseName: depA.courseName }).from(depA),\n\t *   db.select({ courseName: depB.courseName }).from(depB)\n\t * );\n\t * ```\n\t */\n\tintersect = this.createSetOperator('intersect', false);\n\n\t/**\n\t * Adds `except` set operator to the query.\n\t *\n\t * Calling this method will retrieve all unique rows from the left query, except for the rows that are present in the result set of the right query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#except}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all courses offered in department A but not in department B\n\t * await db.select({ courseName: depA.courseName })\n\t *   .from(depA)\n\t *   .except(\n\t *     db.select({ courseName: depB.courseName }).from(depB)\n\t *   );\n\t * // or\n\t * import { except } from 'drizzle-orm/sqlite-core'\n\t *\n\t * await except(\n\t *   db.select({ courseName: depA.courseName }).from(depA),\n\t *   db.select({ courseName: depB.courseName }).from(depB)\n\t * );\n\t * ```\n\t */\n\texcept = this.createSetOperator('except', false);\n\n\t/** @internal */\n\taddSetOperators(setOperators: SQLiteSelectConfig['setOperators']): SQLiteSelectWithout<\n\t\tthis,\n\t\tTDynamic,\n\t\tSQLiteSetOperatorExcludedMethods,\n\t\ttrue\n\t> {\n\t\tthis.config.setOperators.push(...setOperators);\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `where` clause to the query.\n\t *\n\t * Calling this method will select only those rows that fulfill a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#filtering}\n\t *\n\t * @param where the `where` clause.\n\t *\n\t * @example\n\t * You can use conditional operators and `sql function` to filter the rows to be selected.\n\t *\n\t * ```ts\n\t * // Select all cars with green color\n\t * await db.select().from(cars).where(eq(cars.color, 'green'));\n\t * // or\n\t * await db.select().from(cars).where(sql`${cars.color} = 'green'`)\n\t * ```\n\t *\n\t * You can logically combine conditional operators with `and()` and `or()` operators:\n\t *\n\t * ```ts\n\t * // Select all BMW cars with a green color\n\t * await db.select().from(cars).where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n\t *\n\t * // Select all cars with the green or blue color\n\t * await db.select().from(cars).where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n\t * ```\n\t */\n\twhere(\n\t\twhere: ((aliases: TSelection) => SQL | undefined) | SQL | undefined,\n\t): SQLiteSelectWithout<this, TDynamic, 'where'> {\n\t\tif (typeof where === 'function') {\n\t\t\twhere = where(\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\t\t}\n\t\tthis.config.where = where;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `having` clause to the query.\n\t *\n\t * Calling this method will select only those rows that fulfill a specified condition. It is typically used with aggregate functions to filter the aggregated data based on a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#aggregations}\n\t *\n\t * @param having the `having` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all brands with more than one car\n\t * await db.select({\n\t * \tbrand: cars.brand,\n\t * \tcount: sql<number>`cast(count(${cars.id}) as int)`,\n\t * })\n\t *   .from(cars)\n\t *   .groupBy(cars.brand)\n\t *   .having(({ count }) => gt(count, 1));\n\t * ```\n\t */\n\thaving(\n\t\thaving: ((aliases: this['_']['selection']) => SQL | undefined) | SQL | undefined,\n\t): SQLiteSelectWithout<this, TDynamic, 'having'> {\n\t\tif (typeof having === 'function') {\n\t\t\thaving = having(\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\t\t}\n\t\tthis.config.having = having;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `group by` clause to the query.\n\t *\n\t * Calling this method will group rows that have the same values into summary rows, often used for aggregation purposes.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#aggregations}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Group and count people by their last names\n\t * await db.select({\n\t *    lastName: people.lastName,\n\t *    count: sql<number>`cast(count(*) as int)`\n\t * })\n\t *   .from(people)\n\t *   .groupBy(people.lastName);\n\t * ```\n\t */\n\tgroupBy(\n\t\tbuilder: (aliases: this['_']['selection']) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>,\n\t): SQLiteSelectWithout<this, TDynamic, 'groupBy'>;\n\tgroupBy(...columns: (SQLiteColumn | SQL)[]): SQLiteSelectWithout<this, TDynamic, 'groupBy'>;\n\tgroupBy(\n\t\t...columns:\n\t\t\t| [(aliases: this['_']['selection']) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>]\n\t\t\t| (SQLiteColumn | SQL | SQL.Aliased)[]\n\t): SQLiteSelectWithout<this, TDynamic, 'groupBy'> {\n\t\tif (typeof columns[0] === 'function') {\n\t\t\tconst groupBy = columns[0](\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\t\t\tthis.config.groupBy = Array.isArray(groupBy) ? groupBy : [groupBy];\n\t\t} else {\n\t\t\tthis.config.groupBy = columns as (SQLiteColumn | SQL | SQL.Aliased)[];\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `order by` clause to the query.\n\t *\n\t * Calling this method will sort the result-set in ascending or descending order. By default, the sort order is ascending.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#order-by}\n\t *\n\t * @example\n\t *\n\t * ```\n\t * // Select cars ordered by year\n\t * await db.select().from(cars).orderBy(cars.year);\n\t * ```\n\t *\n\t * You can specify whether results are in ascending or descending order with the `asc()` and `desc()` operators.\n\t *\n\t * ```ts\n\t * // Select cars ordered by year in descending order\n\t * await db.select().from(cars).orderBy(desc(cars.year));\n\t *\n\t * // Select cars ordered by year and price\n\t * await db.select().from(cars).orderBy(asc(cars.year), desc(cars.price));\n\t * ```\n\t */\n\torderBy(\n\t\tbuilder: (aliases: this['_']['selection']) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>,\n\t): SQLiteSelectWithout<this, TDynamic, 'orderBy'>;\n\torderBy(...columns: (SQLiteColumn | SQL)[]): SQLiteSelectWithout<this, TDynamic, 'orderBy'>;\n\torderBy(\n\t\t...columns:\n\t\t\t| [(aliases: this['_']['selection']) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>]\n\t\t\t| (SQLiteColumn | SQL | SQL.Aliased)[]\n\t): SQLiteSelectWithout<this, TDynamic, 'orderBy'> {\n\t\tif (typeof columns[0] === 'function') {\n\t\t\tconst orderBy = columns[0](\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\n\t\t\tconst orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];\n\n\t\t\tif (this.config.setOperators.length > 0) {\n\t\t\t\tthis.config.setOperators.at(-1)!.orderBy = orderByArray;\n\t\t\t} else {\n\t\t\t\tthis.config.orderBy = orderByArray;\n\t\t\t}\n\t\t} else {\n\t\t\tconst orderByArray = columns as (SQLiteColumn | SQL | SQL.Aliased)[];\n\n\t\t\tif (this.config.setOperators.length > 0) {\n\t\t\t\tthis.config.setOperators.at(-1)!.orderBy = orderByArray;\n\t\t\t} else {\n\t\t\t\tthis.config.orderBy = orderByArray;\n\t\t\t}\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `limit` clause to the query.\n\t *\n\t * Calling this method will set the maximum number of rows that will be returned by this query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#limit--offset}\n\t *\n\t * @param limit the `limit` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Get the first 10 people from this query.\n\t * await db.select().from(people).limit(10);\n\t * ```\n\t */\n\tlimit(limit: number | Placeholder): SQLiteSelectWithout<this, TDynamic, 'limit'> {\n\t\tif (this.config.setOperators.length > 0) {\n\t\t\tthis.config.setOperators.at(-1)!.limit = limit;\n\t\t} else {\n\t\t\tthis.config.limit = limit;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `offset` clause to the query.\n\t *\n\t * Calling this method will skip a number of rows when returning results from this query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#limit--offset}\n\t *\n\t * @param offset the `offset` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Get the 10th-20th people from this query.\n\t * await db.select().from(people).offset(10).limit(10);\n\t * ```\n\t */\n\toffset(offset: number | Placeholder): SQLiteSelectWithout<this, TDynamic, 'offset'> {\n\t\tif (this.config.setOperators.length > 0) {\n\t\t\tthis.config.setOperators.at(-1)!.offset = offset;\n\t\t} else {\n\t\t\tthis.config.offset = offset;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildSelectQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\tas<TAlias extends string>(\n\t\talias: TAlias,\n\t): SubqueryWithSelection<this['_']['selectedFields'], TAlias> {\n\t\treturn new Proxy(\n\t\t\tnew Subquery(this.getSQL(), this.config.fields, alias),\n\t\t\tnew SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t) as SubqueryWithSelection<this['_']['selectedFields'], TAlias>;\n\t}\n\n\t/** @internal */\n\toverride getSelectedFields(): this['_']['selectedFields'] {\n\t\treturn new Proxy(\n\t\t\tthis.config.fields,\n\t\t\tnew SelectionProxyHandler({ alias: this.tableName, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t) as this['_']['selectedFields'];\n\t}\n\n\t$dynamic(): SQLiteSelectDynamic<this> {\n\t\treturn this;\n\t}\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface SQLiteSelectBase<\n\tTTableName extends string | undefined,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTSelection extends ColumnsSelection,\n\tTSelectMode extends SelectMode = 'single',\n\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n\t\t: {},\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n\tTResult extends any[] = SelectResult<TSelection, TSelectMode, TNullabilityMap>[],\n\tTSelectedFields extends ColumnsSelection = BuildSubquerySelection<TSelection, TNullabilityMap>,\n> extends\n\tSQLiteSelectQueryBuilderBase<\n\t\tSQLiteSelectHKT,\n\t\tTTableName,\n\t\tTResultType,\n\t\tTRunResult,\n\t\tTSelection,\n\t\tTSelectMode,\n\t\tTNullabilityMap,\n\t\tTDynamic,\n\t\tTExcludedMethods,\n\t\tTResult,\n\t\tTSelectedFields\n\t>,\n\tQueryPromise<TResult>\n{}\n\nexport class SQLiteSelectBase<\n\tTTableName extends string | undefined,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTSelection,\n\tTSelectMode extends SelectMode = 'single',\n\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n\t\t: {},\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n\tTResult = SelectResult<TSelection, TSelectMode, TNullabilityMap>[],\n\tTSelectedFields extends ColumnsSelection = BuildSubquerySelection<TSelection, TNullabilityMap>,\n> extends SQLiteSelectQueryBuilderBase<\n\tSQLiteSelectHKT,\n\tTTableName,\n\tTResultType,\n\tTRunResult,\n\tTSelection,\n\tTSelectMode,\n\tTNullabilityMap,\n\tTDynamic,\n\tTExcludedMethods,\n\tTResult,\n\tTSelectedFields\n> implements RunnableQuery<TResult, 'sqlite'>, SQLWrapper {\n\tstatic override readonly [entityKind]: string = 'SQLiteSelect';\n\n\t/** @internal */\n\t_prepare(isOneTimeQuery = true): SQLiteSelectPrepare<this> {\n\t\tif (!this.session) {\n\t\t\tthrow new Error('Cannot execute a query on a query builder. Please use a database instance instead.');\n\t\t}\n\t\tconst fieldsList = orderSelectedFields<SQLiteColumn>(this.config.fields);\n\t\tconst query = this.session[isOneTimeQuery ? 'prepareOneTimeQuery' : 'prepareQuery'](\n\t\t\tthis.dialect.sqlToQuery(this.getSQL()),\n\t\t\tfieldsList,\n\t\t\t'all',\n\t\t\ttrue,\n\t\t);\n\t\tquery.joinsNotNullableMap = this.joinsNotNullableMap;\n\t\treturn query as ReturnType<this['prepare']>;\n\t}\n\n\tprepare(): SQLiteSelectPrepare<this> {\n\t\treturn this._prepare(false);\n\t}\n\n\trun: ReturnType<this['prepare']>['run'] = (placeholderValues) => {\n\t\treturn this._prepare().run(placeholderValues);\n\t};\n\n\tall: ReturnType<this['prepare']>['all'] = (placeholderValues) => {\n\t\treturn this._prepare().all(placeholderValues);\n\t};\n\n\tget: ReturnType<this['prepare']>['get'] = (placeholderValues) => {\n\t\treturn this._prepare().get(placeholderValues);\n\t};\n\n\tvalues: ReturnType<this['prepare']>['values'] = (placeholderValues) => {\n\t\treturn this._prepare().values(placeholderValues);\n\t};\n\n\tasync execute(): Promise<SQLiteSelectExecute<this>> {\n\t\treturn this.all() as SQLiteSelectExecute<this>;\n\t}\n}\n\napplyMixins(SQLiteSelectBase, [QueryPromise]);\n\nfunction createSetOperator(type: SetOperator, isAll: boolean): SQLiteCreateSetOperatorFn {\n\treturn (leftSelect, rightSelect, ...restSelects) => {\n\t\tconst setOperators = [rightSelect, ...restSelects].map((select) => ({\n\t\t\ttype,\n\t\t\tisAll,\n\t\t\trightSelect: select as AnySQLiteSelect,\n\t\t}));\n\n\t\tfor (const setOperator of setOperators) {\n\t\t\tif (!haveSameKeys((leftSelect as any).getSelectedFields(), setOperator.rightSelect.getSelectedFields())) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Set operator error (union / intersect / except): selected fields are not the same or are in a different order',\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn (leftSelect as AnySQLiteSelect).addSetOperators(setOperators) as any;\n\t};\n}\n\nconst getSQLiteSetOperators = () => ({\n\tunion,\n\tunionAll,\n\tintersect,\n\texcept,\n});\n\n/**\n * Adds `union` set operator to the query.\n *\n * Calling this method will combine the result sets of the `select` statements and remove any duplicate rows that appear across them.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#union}\n *\n * @example\n *\n * ```ts\n * // Select all unique names from customers and users tables\n * import { union } from 'drizzle-orm/sqlite-core'\n *\n * await union(\n *   db.select({ name: users.name }).from(users),\n *   db.select({ name: customers.name }).from(customers)\n * );\n * // or\n * await db.select({ name: users.name })\n *   .from(users)\n *   .union(\n *     db.select({ name: customers.name }).from(customers)\n *   );\n * ```\n */\nexport const union = createSetOperator('union', false);\n\n/**\n * Adds `union all` set operator to the query.\n *\n * Calling this method will combine the result-set of the `select` statements and keep all duplicate rows that appear across them.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#union-all}\n *\n * @example\n *\n * ```ts\n * // Select all transaction ids from both online and in-store sales\n * import { unionAll } from 'drizzle-orm/sqlite-core'\n *\n * await unionAll(\n *   db.select({ transaction: onlineSales.transactionId }).from(onlineSales),\n *   db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n * );\n * // or\n * await db.select({ transaction: onlineSales.transactionId })\n *   .from(onlineSales)\n *   .unionAll(\n *     db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n *   );\n * ```\n */\nexport const unionAll = createSetOperator('union', true);\n\n/**\n * Adds `intersect` set operator to the query.\n *\n * Calling this method will retain only the rows that are present in both result sets and eliminate duplicates.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect}\n *\n * @example\n *\n * ```ts\n * // Select course names that are offered in both departments A and B\n * import { intersect } from 'drizzle-orm/sqlite-core'\n *\n * await intersect(\n *   db.select({ courseName: depA.courseName }).from(depA),\n *   db.select({ courseName: depB.courseName }).from(depB)\n * );\n * // or\n * await db.select({ courseName: depA.courseName })\n *   .from(depA)\n *   .intersect(\n *     db.select({ courseName: depB.courseName }).from(depB)\n *   );\n * ```\n */\nexport const intersect = createSetOperator('intersect', false);\n\n/**\n * Adds `except` set operator to the query.\n *\n * Calling this method will retrieve all unique rows from the left query, except for the rows that are present in the result set of the right query.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#except}\n *\n * @example\n *\n * ```ts\n * // Select all courses offered in department A but not in department B\n * import { except } from 'drizzle-orm/sqlite-core'\n *\n * await except(\n *   db.select({ courseName: depA.courseName }).from(depA),\n *   db.select({ courseName: depB.courseName }).from(depB)\n * );\n * // or\n * await db.select({ courseName: depA.courseName })\n *   .from(depA)\n *   .except(\n *     db.select({ courseName: depB.courseName }).from(depB)\n *   );\n * ```\n */\nexport const except = createSetOperator('except', false);\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2187, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2193, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/query-builders/query-builder.ts"],"sourcesContent":["import { entityKind, is } from '~/entity.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { ColumnsSelection } from '~/sql/sql.ts';\nimport type { SQLiteDialectConfig } from '~/sqlite-core/dialect.ts';\nimport { SQLiteDialect, SQLiteSyncDialect } from '~/sqlite-core/dialect.ts';\nimport type { WithSubqueryWithSelection } from '~/sqlite-core/subquery.ts';\nimport { WithSubquery } from '~/subquery.ts';\nimport { SQLiteSelectBuilder } from './select.ts';\nimport type { SelectedFields } from './select.types.ts';\n\nexport class QueryBuilder {\n\tstatic readonly [entityKind]: string = 'SQLiteQueryBuilder';\n\n\tprivate dialect: SQLiteDialect | undefined;\n\tprivate dialectConfig: SQLiteDialectConfig | undefined;\n\n\tconstructor(dialect?: SQLiteDialect | SQLiteDialectConfig) {\n\t\tthis.dialect = is(dialect, SQLiteDialect) ? dialect : undefined;\n\t\tthis.dialectConfig = is(dialect, SQLiteDialect) ? undefined : dialect;\n\t}\n\n\t$with<TAlias extends string>(alias: TAlias) {\n\t\tconst queryBuilder = this;\n\n\t\treturn {\n\t\t\tas<TSelection extends ColumnsSelection>(\n\t\t\t\tqb: TypedQueryBuilder<TSelection> | ((qb: QueryBuilder) => TypedQueryBuilder<TSelection>),\n\t\t\t): WithSubqueryWithSelection<TSelection, TAlias> {\n\t\t\t\tif (typeof qb === 'function') {\n\t\t\t\t\tqb = qb(queryBuilder);\n\t\t\t\t}\n\n\t\t\t\treturn new Proxy(\n\t\t\t\t\tnew WithSubquery(qb.getSQL(), qb.getSelectedFields() as SelectedFields, alias, true),\n\t\t\t\t\tnew SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t\t\t) as WithSubqueryWithSelection<TSelection, TAlias>;\n\t\t\t},\n\t\t};\n\t}\n\n\twith(...queries: WithSubquery[]) {\n\t\tconst self = this;\n\n\t\tfunction select(): SQLiteSelectBuilder<undefined, 'sync', void, 'qb'>;\n\t\tfunction select<TSelection extends SelectedFields>(\n\t\t\tfields: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection, 'sync', void, 'qb'>;\n\t\tfunction select<TSelection extends SelectedFields>(\n\t\t\tfields?: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection | undefined, 'sync', void, 'qb'> {\n\t\t\treturn new SQLiteSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: undefined,\n\t\t\t\tdialect: self.getDialect(),\n\t\t\t\twithList: queries,\n\t\t\t});\n\t\t}\n\n\t\tfunction selectDistinct(): SQLiteSelectBuilder<undefined, 'sync', void, 'qb'>;\n\t\tfunction selectDistinct<TSelection extends SelectedFields>(\n\t\t\tfields: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection, 'sync', void, 'qb'>;\n\t\tfunction selectDistinct<TSelection extends SelectedFields>(\n\t\t\tfields?: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection | undefined, 'sync', void, 'qb'> {\n\t\t\treturn new SQLiteSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: undefined,\n\t\t\t\tdialect: self.getDialect(),\n\t\t\t\twithList: queries,\n\t\t\t\tdistinct: true,\n\t\t\t});\n\t\t}\n\n\t\treturn { select, selectDistinct };\n\t}\n\n\tselect(): SQLiteSelectBuilder<undefined, 'sync', void, 'qb'>;\n\tselect<TSelection extends SelectedFields>(\n\t\tfields: TSelection,\n\t): SQLiteSelectBuilder<TSelection, 'sync', void, 'qb'>;\n\tselect<TSelection extends SelectedFields>(\n\t\tfields?: TSelection,\n\t): SQLiteSelectBuilder<TSelection | undefined, 'sync', void, 'qb'> {\n\t\treturn new SQLiteSelectBuilder({ fields: fields ?? undefined, session: undefined, dialect: this.getDialect() });\n\t}\n\n\tselectDistinct(): SQLiteSelectBuilder<undefined, 'sync', void, 'qb'>;\n\tselectDistinct<TSelection extends SelectedFields>(\n\t\tfields: TSelection,\n\t): SQLiteSelectBuilder<TSelection, 'sync', void, 'qb'>;\n\tselectDistinct<TSelection extends SelectedFields>(\n\t\tfields?: TSelection,\n\t): SQLiteSelectBuilder<TSelection | undefined, 'sync', void, 'qb'> {\n\t\treturn new SQLiteSelectBuilder({\n\t\t\tfields: fields ?? undefined,\n\t\t\tsession: undefined,\n\t\t\tdialect: this.getDialect(),\n\t\t\tdistinct: true,\n\t\t});\n\t}\n\n\t// Lazy load dialect to avoid circular dependency\n\tprivate getDialect() {\n\t\tif (!this.dialect) {\n\t\t\tthis.dialect = new SQLiteSyncDialect(this.dialectConfig);\n\t\t}\n\n\t\treturn this.dialect;\n\t}\n}\n"],"names":[],"mappings":";;;AAAA,SAAS,YAAY,UAAU;AAK/B,SAAS,eAAe,yBAAyB;AAEjD,SAAS,oBAAoB;AAL7B,SAAS,6BAA6B;AAMtC,SAAS,2BAA2B;;;;;;AAG7B,MAAM,aAAa;IACzB,OAAA,kJAAiB,aAAU,CAAA,GAAY,qBAAA;IAE/B,QAAA;IACA,cAAA;IAER,YAAY,OAAA,CAA+C;QAC1D,IAAA,CAAK,OAAA,wJAAU,KAAA,EAAG,6KAAS,gBAAa,IAAI,UAAU,KAAA;QACtD,IAAA,CAAK,aAAA,IAAgB,yJAAA,EAAG,6KAAS,gBAAa,IAAI,KAAA,IAAY;IAC/D;IAEA,MAA6B,KAAA,EAAe;QAC3C,MAAM,eAAe,IAAA;QAErB,OAAO;YACN,IACC,EAAA,EACgD;gBAChD,IAAI,OAAO,OAAO,YAAY;oBAC7B,KAAK,GAAG,YAAY;gBACrB;gBAEA,OAAO,IAAI,MACV,uJAAI,eAAA,CAAa,GAAG,MAAA,CAAO,GAAG,GAAG,iBAAA,CAAkB,GAAqB,OAAO,IAAI,GACnF,IAAI,qLAAA,CAAsB;oBAAE;oBAAO,oBAAoB;oBAAS,aAAa;gBAAQ,CAAC;YAExF;QACD;IACD;IAEA,KAAA,GAAQ,OAAA,EAAyB;QAChC,MAAM,OAAO,IAAA;QAMb,SAAS,OACR,MAAA,EACkE;YAClE,OAAO,4LAAI,sBAAA,CAAoB;gBAC9B,QAAQ,UAAU,KAAA;gBAClB,SAAS,KAAA;gBACT,SAAS,KAAK,UAAA,CAAW;gBACzB,UAAU;YACX,CAAC;QACF;QAMA,SAAS,eACR,MAAA,EACkE;YAClE,OAAO,4LAAI,sBAAA,CAAoB;gBAC9B,QAAQ,UAAU,KAAA;gBAClB,SAAS,KAAA;gBACT,SAAS,KAAK,UAAA,CAAW;gBACzB,UAAU;gBACV,UAAU;YACX,CAAC;QACF;QAEA,OAAO;YAAE;YAAQ;QAAe;IACjC;IAMA,OACC,MAAA,EACkE;QAClE,OAAO,4LAAI,sBAAA,CAAoB;YAAE,QAAQ,UAAU,KAAA;YAAW,SAAS,KAAA;YAAW,SAAS,IAAA,CAAK,UAAA,CAAW;QAAE,CAAC;IAC/G;IAMA,eACC,MAAA,EACkE;QAClE,OAAO,4LAAI,sBAAA,CAAoB;YAC9B,QAAQ,UAAU,KAAA;YAClB,SAAS,KAAA;YACT,SAAS,IAAA,CAAK,UAAA,CAAW;YACzB,UAAU;QACX,CAAC;IACF;IAAA,iDAAA;IAGQ,aAAa;QACpB,IAAI,CAAC,IAAA,CAAK,OAAA,EAAS;YAClB,IAAA,CAAK,OAAA,GAAU,wKAAI,oBAAA,CAAkB,IAAA,CAAK,aAAa;QACxD;QAEA,OAAO,IAAA,CAAK,OAAA;IACb;AACD","ignoreList":[0]}},
    {"offset": {"line": 2278, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2284, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/query-builders/count.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport { SQL, sql, type SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteSession } from '../session.ts';\nimport type { SQLiteTable } from '../table.ts';\nimport type { SQLiteView } from '../view.ts';\n\nexport class SQLiteCountBuilder<\n\tTSession extends SQLiteSession<any, any, any, any>,\n> extends SQL<number> implements Promise<number>, SQLWrapper {\n\tprivate sql: SQL<number>;\n\n\tstatic override readonly [entityKind] = 'SQLiteCountBuilderAsync';\n\t[Symbol.toStringTag] = 'SQLiteCountBuilderAsync';\n\n\tprivate session: TSession;\n\n\tprivate static buildEmbeddedCount(\n\t\tsource: SQLiteTable | SQLiteView | SQL | SQLWrapper,\n\t\tfilters?: SQL<unknown>,\n\t): SQL<number> {\n\t\treturn sql<number>`(select count(*) from ${source}${sql.raw(' where ').if(filters)}${filters})`;\n\t}\n\n\tprivate static buildCount(\n\t\tsource: SQLiteTable | SQLiteView | SQL | SQLWrapper,\n\t\tfilters?: SQL<unknown>,\n\t): SQL<number> {\n\t\treturn sql<number>`select count(*) from ${source}${sql.raw(' where ').if(filters)}${filters}`;\n\t}\n\n\tconstructor(\n\t\treadonly params: {\n\t\t\tsource: SQLiteTable | SQLiteView | SQL | SQLWrapper;\n\t\t\tfilters?: SQL<unknown>;\n\t\t\tsession: TSession;\n\t\t},\n\t) {\n\t\tsuper(SQLiteCountBuilder.buildEmbeddedCount(params.source, params.filters).queryChunks);\n\n\t\tthis.session = params.session;\n\n\t\tthis.sql = SQLiteCountBuilder.buildCount(\n\t\t\tparams.source,\n\t\t\tparams.filters,\n\t\t);\n\t}\n\n\tthen<TResult1 = number, TResult2 = never>(\n\t\tonfulfilled?: ((value: number) => TResult1 | PromiseLike<TResult1>) | null | undefined,\n\t\tonrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined,\n\t): Promise<TResult1 | TResult2> {\n\t\treturn Promise.resolve(this.session.count(this.sql)).then(\n\t\t\tonfulfilled,\n\t\t\tonrejected,\n\t\t);\n\t}\n\n\tcatch(\n\t\tonRejected?: ((reason: any) => never | PromiseLike<never>) | null | undefined,\n\t): Promise<number> {\n\t\treturn this.then(undefined, onRejected);\n\t}\n\n\tfinally(onFinally?: (() => void) | null | undefined): Promise<number> {\n\t\treturn this.then(\n\t\t\t(value) => {\n\t\t\t\tonFinally?.();\n\t\t\t\treturn value;\n\t\t\t},\n\t\t\t(reason) => {\n\t\t\t\tonFinally?.();\n\t\t\t\tthrow reason;\n\t\t\t},\n\t\t);\n\t}\n}\n"],"names":[],"mappings":";;;AAAA,SAAS,kBAAkB;AAC3B,SAAS,KAAK,WAA4B;;;AAKnC,MAAM,gLAEH,MAAA,CAAmD;IAsB5D,YACU,MAAA,CAKR;QACD,KAAA,CAAM,mBAAmB,kBAAA,CAAmB,OAAO,MAAA,EAAQ,OAAO,OAAO,EAAE,WAAW;QAN7E,IAAA,CAAA,MAAA,GAAA;QAQT,IAAA,CAAK,OAAA,GAAU,OAAO,OAAA;QAEtB,IAAA,CAAK,GAAA,GAAM,mBAAmB,UAAA,CAC7B,OAAO,MAAA,EACP,OAAO,OAAA;IAET;IApCQ,IAAA;IAER,OAAA,kJAA0B,aAAU,CAAA,GAAI,0BAAA;IACxC,CAAC,OAAO,WAAW,CAAA,GAAI,0BAAA;IAEf,QAAA;IAER,OAAe,mBACd,MAAA,EACA,OAAA,EACc;QACd,4JAAO,MAAA,CAAA,sBAAA,EAAoC,MAAM,CAAA,uJAAG,MAAA,CAAI,GAAA,CAAI,SAAS,EAAE,EAAA,CAAG,OAAO,CAAC,CAAA,EAAG,OAAO,CAAA,CAAA,CAAA;IAC7F;IAEA,OAAe,WACd,MAAA,EACA,OAAA,EACc;QACd,4JAAO,MAAA,CAAA,qBAAA,EAAmC,MAAM,CAAA,uJAAG,MAAA,CAAI,GAAA,CAAI,SAAS,EAAE,EAAA,CAAG,OAAO,CAAC,CAAA,EAAG,OAAO,CAAA,CAAA;IAC5F;IAmBA,KACC,WAAA,EACA,UAAA,EAC+B;QAC/B,OAAO,QAAQ,OAAA,CAAQ,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,IAAA,CAAK,GAAG,CAAC,EAAE,IAAA,CACpD,aACA;IAEF;IAEA,MACC,UAAA,EACkB;QAClB,OAAO,IAAA,CAAK,IAAA,CAAK,KAAA,GAAW,UAAU;IACvC;IAEA,QAAQ,SAAA,EAA8D;QACrE,OAAO,IAAA,CAAK,IAAA,CACX,CAAC,UAAU;YACV,YAAY;YACZ,OAAO;QACR,GACA,CAAC,WAAW;YACX,YAAY;YACZ,MAAM;QACP;IAEF;AACD","ignoreList":[0]}},
    {"offset": {"line": 2326, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2332, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/query-builders/update.ts"],"sourcesContent":["import type { GetColumnData } from '~/column.ts';\nimport { entityKind, is } from '~/entity.ts';\nimport type { JoinType, SelectResultFields } from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { Placeholder, Query, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteDialect } from '~/sqlite-core/dialect.ts';\nimport type { SQLitePreparedQuery, SQLiteSession } from '~/sqlite-core/session.ts';\nimport { SQLiteTable } from '~/sqlite-core/table.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { Table } from '~/table.ts';\nimport {\n\ttype DrizzleTypeError,\n\tgetTableLikeName,\n\tmapUpdateSet,\n\torderSelectedFields,\n\ttype UpdateSet,\n\ttype ValueOrArray,\n} from '~/utils.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport type { SQLiteColumn } from '../columns/common.ts';\nimport { SQLiteViewBase } from '../view-base.ts';\nimport type { SelectedFields, SelectedFieldsOrdered, SQLiteSelectJoinConfig } from './select.types.ts';\n\nexport interface SQLiteUpdateConfig {\n\twhere?: SQL | undefined;\n\tlimit?: number | Placeholder;\n\torderBy?: (SQLiteColumn | SQL | SQL.Aliased)[];\n\tset: UpdateSet;\n\ttable: SQLiteTable;\n\tfrom?: SQLiteTable | Subquery | SQLiteViewBase | SQL;\n\tjoins: SQLiteSelectJoinConfig[];\n\treturning?: SelectedFieldsOrdered;\n\twithList?: Subquery[];\n}\n\nexport type SQLiteUpdateSetSource<TTable extends SQLiteTable> =\n\t& {\n\t\t[Key in keyof TTable['$inferInsert']]?:\n\t\t\t| GetColumnData<TTable['_']['columns'][Key], 'query'>\n\t\t\t| SQL\n\t\t\t| SQLiteColumn;\n\t}\n\t& {};\n\nexport class SQLiteUpdateBuilder<\n\tTTable extends SQLiteTable,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteUpdateBuilder';\n\n\tdeclare readonly _: {\n\t\treadonly table: TTable;\n\t};\n\n\tconstructor(\n\t\tprotected table: TTable,\n\t\tprotected session: SQLiteSession<any, any, any, any>,\n\t\tprotected dialect: SQLiteDialect,\n\t\tprivate withList?: Subquery[],\n\t) {}\n\n\tset(\n\t\tvalues: SQLiteUpdateSetSource<TTable>,\n\t): SQLiteUpdateWithout<\n\t\tSQLiteUpdateBase<TTable, TResultType, TRunResult>,\n\t\tfalse,\n\t\t'leftJoin' | 'rightJoin' | 'innerJoin' | 'fullJoin'\n\t> {\n\t\treturn new SQLiteUpdateBase(\n\t\t\tthis.table,\n\t\t\tmapUpdateSet(this.table, values),\n\t\t\tthis.session,\n\t\t\tthis.dialect,\n\t\t\tthis.withList,\n\t\t) as any;\n\t}\n}\n\nexport type SQLiteUpdateWithout<\n\tT extends AnySQLiteUpdate,\n\tTDynamic extends boolean,\n\tK extends keyof T & string,\n> = TDynamic extends true ? T : Omit<\n\tSQLiteUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tT['_']['from'],\n\t\tT['_']['returning'],\n\t\tTDynamic,\n\t\tT['_']['excludedMethods'] | K\n\t>,\n\tT['_']['excludedMethods'] | K\n>;\n\nexport type SQLiteUpdateWithJoins<\n\tT extends AnySQLiteUpdate,\n\tTDynamic extends boolean,\n\tTFrom extends SQLiteTable | Subquery | SQLiteViewBase | SQL,\n> = TDynamic extends true ? T : Omit<\n\tSQLiteUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tTFrom,\n\t\tT['_']['returning'],\n\t\tTDynamic,\n\t\tExclude<T['_']['excludedMethods'] | 'from', 'leftJoin' | 'rightJoin' | 'innerJoin' | 'fullJoin'>\n\t>,\n\tExclude<T['_']['excludedMethods'] | 'from', 'leftJoin' | 'rightJoin' | 'innerJoin' | 'fullJoin'>\n>;\n\nexport type SQLiteUpdateReturningAll<T extends AnySQLiteUpdate, TDynamic extends boolean> = SQLiteUpdateWithout<\n\tSQLiteUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tT['_']['from'],\n\t\tT['_']['table']['$inferSelect'],\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteUpdateReturning<\n\tT extends AnySQLiteUpdate,\n\tTDynamic extends boolean,\n\tTSelectedFields extends SelectedFields,\n> = SQLiteUpdateWithout<\n\tSQLiteUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tT['_']['from'],\n\t\tSelectResultFields<TSelectedFields>,\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteUpdateExecute<T extends AnySQLiteUpdate> = T['_']['returning'] extends undefined ? T['_']['runResult']\n\t: T['_']['returning'][];\n\nexport type SQLiteUpdatePrepare<T extends AnySQLiteUpdate> = SQLitePreparedQuery<\n\t{\n\t\ttype: T['_']['resultType'];\n\t\trun: T['_']['runResult'];\n\t\tall: T['_']['returning'] extends undefined ? DrizzleTypeError<'.all() cannot be used without .returning()'>\n\t\t\t: T['_']['returning'][];\n\t\tget: T['_']['returning'] extends undefined ? DrizzleTypeError<'.get() cannot be used without .returning()'>\n\t\t\t: T['_']['returning'];\n\t\tvalues: T['_']['returning'] extends undefined ? DrizzleTypeError<'.values() cannot be used without .returning()'>\n\t\t\t: any[][];\n\t\texecute: SQLiteUpdateExecute<T>;\n\t}\n>;\n\nexport type SQLiteUpdateJoinFn<\n\tT extends AnySQLiteUpdate,\n> = <\n\tTJoinedTable extends SQLiteTable | Subquery | SQLiteViewBase | SQL,\n>(\n\ttable: TJoinedTable,\n\ton:\n\t\t| (\n\t\t\t(\n\t\t\t\tupdateTable: T['_']['table']['_']['columns'],\n\t\t\t\tfrom: T['_']['from'] extends SQLiteTable ? T['_']['from']['_']['columns']\n\t\t\t\t\t: T['_']['from'] extends Subquery | SQLiteViewBase ? T['_']['from']['_']['selectedFields']\n\t\t\t\t\t: never,\n\t\t\t) => SQL | undefined\n\t\t)\n\t\t| SQL\n\t\t| undefined,\n) => T;\n\nexport type SQLiteUpdateDynamic<T extends AnySQLiteUpdate> = SQLiteUpdate<\n\tT['_']['table'],\n\tT['_']['resultType'],\n\tT['_']['runResult'],\n\tT['_']['returning']\n>;\n\nexport type SQLiteUpdate<\n\tTTable extends SQLiteTable = SQLiteTable,\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = any,\n\tTFrom extends SQLiteTable | Subquery | SQLiteViewBase | SQL | undefined = undefined,\n\tTReturning extends Record<string, unknown> | undefined = Record<string, unknown> | undefined,\n> = SQLiteUpdateBase<TTable, TResultType, TRunResult, TFrom, TReturning, true, never>;\n\nexport type AnySQLiteUpdate = SQLiteUpdateBase<any, any, any, any, any, any, any>;\n\nexport interface SQLiteUpdateBase<\n\tTTable extends SQLiteTable = SQLiteTable,\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = unknown,\n\tTFrom extends SQLiteTable | Subquery | SQLiteViewBase | SQL | undefined = undefined,\n\tTReturning = undefined,\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n> extends SQLWrapper, QueryPromise<TReturning extends undefined ? TRunResult : TReturning[]> {\n\treadonly _: {\n\t\treadonly dialect: 'sqlite';\n\t\treadonly table: TTable;\n\t\treadonly resultType: TResultType;\n\t\treadonly runResult: TRunResult;\n\t\treadonly from: TFrom;\n\t\treadonly returning: TReturning;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TReturning extends undefined ? TRunResult : TReturning[];\n\t};\n}\n\nexport class SQLiteUpdateBase<\n\tTTable extends SQLiteTable = SQLiteTable,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = unknown,\n\tTFrom extends SQLiteTable | Subquery | SQLiteViewBase | SQL | undefined = undefined,\n\tTReturning = undefined,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTDynamic extends boolean = false,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<TReturning extends undefined ? TRunResult : TReturning[]>\n\timplements RunnableQuery<TReturning extends undefined ? TRunResult : TReturning[], 'sqlite'>, SQLWrapper\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteUpdate';\n\n\t/** @internal */\n\tconfig: SQLiteUpdateConfig;\n\n\tconstructor(\n\t\ttable: TTable,\n\t\tset: UpdateSet,\n\t\tprivate session: SQLiteSession<any, any, any, any>,\n\t\tprivate dialect: SQLiteDialect,\n\t\twithList?: Subquery[],\n\t) {\n\t\tsuper();\n\t\tthis.config = { set, table, withList, joins: [] };\n\t}\n\n\tfrom<TFrom extends SQLiteTable | Subquery | SQLiteViewBase | SQL>(\n\t\tsource: TFrom,\n\t): SQLiteUpdateWithJoins<this, TDynamic, TFrom> {\n\t\tthis.config.from = source;\n\t\treturn this as any;\n\t}\n\n\tprivate createJoin<TJoinType extends JoinType>(\n\t\tjoinType: TJoinType,\n\t): SQLiteUpdateJoinFn<this> {\n\t\treturn ((\n\t\t\ttable: SQLiteTable | Subquery | SQLiteViewBase | SQL,\n\t\t\ton: ((updateTable: TTable, from: TFrom) => SQL | undefined) | SQL | undefined,\n\t\t) => {\n\t\t\tconst tableName = getTableLikeName(table);\n\n\t\t\tif (typeof tableName === 'string' && this.config.joins.some((join) => join.alias === tableName)) {\n\t\t\t\tthrow new Error(`Alias \"${tableName}\" is already used in this query`);\n\t\t\t}\n\n\t\t\tif (typeof on === 'function') {\n\t\t\t\tconst from = this.config.from\n\t\t\t\t\t? is(table, SQLiteTable)\n\t\t\t\t\t\t? table[Table.Symbol.Columns]\n\t\t\t\t\t\t: is(table, Subquery)\n\t\t\t\t\t\t? table._.selectedFields\n\t\t\t\t\t\t: is(table, SQLiteViewBase)\n\t\t\t\t\t\t? table[ViewBaseConfig].selectedFields\n\t\t\t\t\t\t: undefined\n\t\t\t\t\t: undefined;\n\t\t\t\ton = on(\n\t\t\t\t\tnew Proxy(\n\t\t\t\t\t\tthis.config.table[Table.Symbol.Columns],\n\t\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t\t) as any,\n\t\t\t\t\tfrom && new Proxy(\n\t\t\t\t\t\tfrom,\n\t\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t\t) as any,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.config.joins.push({ on, table, joinType, alias: tableName });\n\n\t\t\treturn this as any;\n\t\t}) as any;\n\t}\n\n\tleftJoin = this.createJoin('left');\n\n\trightJoin = this.createJoin('right');\n\n\tinnerJoin = this.createJoin('inner');\n\n\tfullJoin = this.createJoin('full');\n\n\t/**\n\t * Adds a 'where' clause to the query.\n\t *\n\t * Calling this method will update only those rows that fulfill a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/update}\n\t *\n\t * @param where the 'where' clause.\n\t *\n\t * @example\n\t * You can use conditional operators and `sql function` to filter the rows to be updated.\n\t *\n\t * ```ts\n\t * // Update all cars with green color\n\t * db.update(cars).set({ color: 'red' })\n\t *   .where(eq(cars.color, 'green'));\n\t * // or\n\t * db.update(cars).set({ color: 'red' })\n\t *   .where(sql`${cars.color} = 'green'`)\n\t * ```\n\t *\n\t * You can logically combine conditional operators with `and()` and `or()` operators:\n\t *\n\t * ```ts\n\t * // Update all BMW cars with a green color\n\t * db.update(cars).set({ color: 'red' })\n\t *   .where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n\t *\n\t * // Update all cars with the green or blue color\n\t * db.update(cars).set({ color: 'red' })\n\t *   .where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n\t * ```\n\t */\n\twhere(where: SQL | undefined): SQLiteUpdateWithout<this, TDynamic, 'where'> {\n\t\tthis.config.where = where;\n\t\treturn this as any;\n\t}\n\n\torderBy(\n\t\tbuilder: (updateTable: TTable) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>,\n\t): SQLiteUpdateWithout<this, TDynamic, 'orderBy'>;\n\torderBy(...columns: (SQLiteColumn | SQL | SQL.Aliased)[]): SQLiteUpdateWithout<this, TDynamic, 'orderBy'>;\n\torderBy(\n\t\t...columns:\n\t\t\t| [(updateTable: TTable) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>]\n\t\t\t| (SQLiteColumn | SQL | SQL.Aliased)[]\n\t): SQLiteUpdateWithout<this, TDynamic, 'orderBy'> {\n\t\tif (typeof columns[0] === 'function') {\n\t\t\tconst orderBy = columns[0](\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.table[Table.Symbol.Columns],\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' }),\n\t\t\t\t) as any,\n\t\t\t);\n\n\t\t\tconst orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];\n\t\t\tthis.config.orderBy = orderByArray;\n\t\t} else {\n\t\t\tconst orderByArray = columns as (SQLiteColumn | SQL | SQL.Aliased)[];\n\t\t\tthis.config.orderBy = orderByArray;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\tlimit(limit: number | Placeholder): SQLiteUpdateWithout<this, TDynamic, 'limit'> {\n\t\tthis.config.limit = limit;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `returning` clause to the query.\n\t *\n\t * Calling this method will return the specified fields of the updated rows. If no fields are specified, all fields will be returned.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/update#update-with-returning}\n\t *\n\t * @example\n\t * ```ts\n\t * // Update all cars with the green color and return all fields\n\t * const updatedCars: Car[] = await db.update(cars)\n\t *   .set({ color: 'red' })\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning();\n\t *\n\t * // Update all cars with the green color and return only their id and brand fields\n\t * const updatedCarsIdsAndBrands: { id: number, brand: string }[] = await db.update(cars)\n\t *   .set({ color: 'red' })\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning({ id: cars.id, brand: cars.brand });\n\t * ```\n\t */\n\treturning(): SQLiteUpdateReturningAll<this, TDynamic>;\n\treturning<TSelectedFields extends SelectedFields>(\n\t\tfields: TSelectedFields,\n\t): SQLiteUpdateReturning<this, TDynamic, TSelectedFields>;\n\treturning(\n\t\tfields: SelectedFields = this.config.table[SQLiteTable.Symbol.Columns],\n\t): SQLiteUpdateWithout<AnySQLiteUpdate, TDynamic, 'returning'> {\n\t\tthis.config.returning = orderSelectedFields<SQLiteColumn>(fields);\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildUpdateQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\t/** @internal */\n\t_prepare(isOneTimeQuery = true): SQLiteUpdatePrepare<this> {\n\t\treturn this.session[isOneTimeQuery ? 'prepareOneTimeQuery' : 'prepareQuery'](\n\t\t\tthis.dialect.sqlToQuery(this.getSQL()),\n\t\t\tthis.config.returning,\n\t\t\tthis.config.returning ? 'all' : 'run',\n\t\t\ttrue,\n\t\t) as SQLiteUpdatePrepare<this>;\n\t}\n\n\tprepare(): SQLiteUpdatePrepare<this> {\n\t\treturn this._prepare(false);\n\t}\n\n\trun: ReturnType<this['prepare']>['run'] = (placeholderValues) => {\n\t\treturn this._prepare().run(placeholderValues);\n\t};\n\n\tall: ReturnType<this['prepare']>['all'] = (placeholderValues) => {\n\t\treturn this._prepare().all(placeholderValues);\n\t};\n\n\tget: ReturnType<this['prepare']>['get'] = (placeholderValues) => {\n\t\treturn this._prepare().get(placeholderValues);\n\t};\n\n\tvalues: ReturnType<this['prepare']>['values'] = (placeholderValues) => {\n\t\treturn this._prepare().values(placeholderValues);\n\t};\n\n\toverride async execute(): Promise<SQLiteUpdateExecute<this>> {\n\t\treturn (this.config.returning ? this.all() : this.run()) as SQLiteUpdateExecute<this>;\n\t}\n\n\t$dynamic(): SQLiteUpdateDynamic<this> {\n\t\treturn this as any;\n\t}\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2507, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2513, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/query-builders/insert.ts"],"sourcesContent":["import { entityKind, is } from '~/entity.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type { SelectResultFields } from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { Placeholder, Query, SQLWrapper } from '~/sql/sql.ts';\nimport { Param, SQL, sql } from '~/sql/sql.ts';\nimport type { SQLiteDialect } from '~/sqlite-core/dialect.ts';\nimport type { IndexColumn } from '~/sqlite-core/indexes.ts';\nimport type { SQLitePreparedQuery, SQLiteSession } from '~/sqlite-core/session.ts';\nimport { SQLiteTable } from '~/sqlite-core/table.ts';\nimport type { Subquery } from '~/subquery.ts';\nimport { Columns, Table } from '~/table.ts';\nimport { type DrizzleTypeError, haveSameKeys, mapUpdateSet, orderSelectedFields, type Simplify } from '~/utils.ts';\nimport type { AnySQLiteColumn, SQLiteColumn } from '../columns/common.ts';\nimport { QueryBuilder } from './query-builder.ts';\nimport type { SelectedFieldsFlat, SelectedFieldsOrdered } from './select.types.ts';\nimport type { SQLiteUpdateSetSource } from './update.ts';\n\nexport interface SQLiteInsertConfig<TTable extends SQLiteTable = SQLiteTable> {\n\ttable: TTable;\n\tvalues: Record<string, Param | SQL>[] | SQLiteInsertSelectQueryBuilder<TTable> | SQL;\n\twithList?: Subquery[];\n\tonConflict?: SQL;\n\treturning?: SelectedFieldsOrdered;\n\tselect?: boolean;\n}\n\nexport type SQLiteInsertValue<TTable extends SQLiteTable> = Simplify<\n\t{\n\t\t[Key in keyof TTable['$inferInsert']]: TTable['$inferInsert'][Key] | SQL | Placeholder;\n\t}\n>;\n\nexport type SQLiteInsertSelectQueryBuilder<TTable extends SQLiteTable> = TypedQueryBuilder<\n\t{ [K in keyof TTable['$inferInsert']]: AnySQLiteColumn | SQL | SQL.Aliased | TTable['$inferInsert'][K] }\n>;\n\nexport class SQLiteInsertBuilder<\n\tTTable extends SQLiteTable,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteInsertBuilder';\n\n\tconstructor(\n\t\tprotected table: TTable,\n\t\tprotected session: SQLiteSession<any, any, any, any>,\n\t\tprotected dialect: SQLiteDialect,\n\t\tprivate withList?: Subquery[],\n\t) {}\n\n\tvalues(value: SQLiteInsertValue<TTable>): SQLiteInsertBase<TTable, TResultType, TRunResult>;\n\tvalues(values: SQLiteInsertValue<TTable>[]): SQLiteInsertBase<TTable, TResultType, TRunResult>;\n\tvalues(\n\t\tvalues: SQLiteInsertValue<TTable> | SQLiteInsertValue<TTable>[],\n\t): SQLiteInsertBase<TTable, TResultType, TRunResult> {\n\t\tvalues = Array.isArray(values) ? values : [values];\n\t\tif (values.length === 0) {\n\t\t\tthrow new Error('values() must be called with at least one value');\n\t\t}\n\t\tconst mappedValues = values.map((entry) => {\n\t\t\tconst result: Record<string, Param | SQL> = {};\n\t\t\tconst cols = this.table[Table.Symbol.Columns];\n\t\t\tfor (const colKey of Object.keys(entry)) {\n\t\t\t\tconst colValue = entry[colKey as keyof typeof entry];\n\t\t\t\tresult[colKey] = is(colValue, SQL) ? colValue : new Param(colValue, cols[colKey]);\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\n\t\t// if (mappedValues.length > 1 && mappedValues.some((t) => Object.keys(t).length === 0)) {\n\t\t// \tthrow new Error(\n\t\t// \t\t`One of the values you want to insert is empty. In SQLite you can insert only one empty object per statement. For this case Drizzle with use \"INSERT INTO ... DEFAULT VALUES\" syntax`,\n\t\t// \t);\n\t\t// }\n\n\t\treturn new SQLiteInsertBase(this.table, mappedValues, this.session, this.dialect, this.withList);\n\t}\n\n\tselect(\n\t\tselectQuery: (qb: QueryBuilder) => SQLiteInsertSelectQueryBuilder<TTable>,\n\t): SQLiteInsertBase<TTable, TResultType, TRunResult>;\n\tselect(selectQuery: (qb: QueryBuilder) => SQL): SQLiteInsertBase<TTable, TResultType, TRunResult>;\n\tselect(selectQuery: SQL): SQLiteInsertBase<TTable, TResultType, TRunResult>;\n\tselect(selectQuery: SQLiteInsertSelectQueryBuilder<TTable>): SQLiteInsertBase<TTable, TResultType, TRunResult>;\n\tselect(\n\t\tselectQuery:\n\t\t\t| SQL\n\t\t\t| SQLiteInsertSelectQueryBuilder<TTable>\n\t\t\t| ((qb: QueryBuilder) => SQLiteInsertSelectQueryBuilder<TTable> | SQL),\n\t): SQLiteInsertBase<TTable, TResultType, TRunResult> {\n\t\tconst select = typeof selectQuery === 'function' ? selectQuery(new QueryBuilder()) : selectQuery;\n\n\t\tif (\n\t\t\t!is(select, SQL)\n\t\t\t&& !haveSameKeys(this.table[Columns], select._.selectedFields)\n\t\t) {\n\t\t\tthrow new Error(\n\t\t\t\t'Insert select error: selected fields are not the same or are in a different order compared to the table definition',\n\t\t\t);\n\t\t}\n\n\t\treturn new SQLiteInsertBase(this.table, select, this.session, this.dialect, this.withList, true);\n\t}\n}\n\nexport type SQLiteInsertWithout<T extends AnySQLiteInsert, TDynamic extends boolean, K extends keyof T & string> =\n\tTDynamic extends true ? T\n\t\t: Omit<\n\t\t\tSQLiteInsertBase<\n\t\t\t\tT['_']['table'],\n\t\t\t\tT['_']['resultType'],\n\t\t\t\tT['_']['runResult'],\n\t\t\t\tT['_']['returning'],\n\t\t\t\tTDynamic,\n\t\t\t\tT['_']['excludedMethods'] | K\n\t\t\t>,\n\t\t\tT['_']['excludedMethods'] | K\n\t\t>;\n\nexport type SQLiteInsertReturning<\n\tT extends AnySQLiteInsert,\n\tTDynamic extends boolean,\n\tTSelectedFields extends SelectedFieldsFlat,\n> = SQLiteInsertWithout<\n\tSQLiteInsertBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tSelectResultFields<TSelectedFields>,\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteInsertReturningAll<\n\tT extends AnySQLiteInsert,\n\tTDynamic extends boolean,\n> = SQLiteInsertWithout<\n\tSQLiteInsertBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tT['_']['table']['$inferSelect'],\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteInsertOnConflictDoUpdateConfig<T extends AnySQLiteInsert> = {\n\ttarget: IndexColumn | IndexColumn[];\n\t/** @deprecated - use either `targetWhere` or `setWhere` */\n\twhere?: SQL;\n\t// TODO: add tests for targetWhere and setWhere\n\ttargetWhere?: SQL;\n\tsetWhere?: SQL;\n\tset: SQLiteUpdateSetSource<T['_']['table']>;\n};\n\nexport type SQLiteInsertDynamic<T extends AnySQLiteInsert> = SQLiteInsert<\n\tT['_']['table'],\n\tT['_']['resultType'],\n\tT['_']['runResult'],\n\tT['_']['returning']\n>;\n\nexport type SQLiteInsertExecute<T extends AnySQLiteInsert> = T['_']['returning'] extends undefined ? T['_']['runResult']\n\t: T['_']['returning'][];\n\nexport type SQLiteInsertPrepare<T extends AnySQLiteInsert> = SQLitePreparedQuery<\n\t{\n\t\ttype: T['_']['resultType'];\n\t\trun: T['_']['runResult'];\n\t\tall: T['_']['returning'] extends undefined ? DrizzleTypeError<'.all() cannot be used without .returning()'>\n\t\t\t: T['_']['returning'][];\n\t\tget: T['_']['returning'] extends undefined ? DrizzleTypeError<'.get() cannot be used without .returning()'>\n\t\t\t: T['_']['returning'];\n\t\tvalues: T['_']['returning'] extends undefined ? DrizzleTypeError<'.values() cannot be used without .returning()'>\n\t\t\t: any[][];\n\t\texecute: SQLiteInsertExecute<T>;\n\t}\n>;\n\nexport type AnySQLiteInsert = SQLiteInsertBase<any, any, any, any, any, any>;\n\nexport type SQLiteInsert<\n\tTTable extends SQLiteTable = SQLiteTable,\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = unknown,\n\tTReturning = any,\n> = SQLiteInsertBase<TTable, TResultType, TRunResult, TReturning, true, never>;\n\nexport interface SQLiteInsertBase<\n\tTTable extends SQLiteTable,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTReturning = undefined,\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n> extends\n\tSQLWrapper,\n\tQueryPromise<TReturning extends undefined ? TRunResult : TReturning[]>,\n\tRunnableQuery<TReturning extends undefined ? TRunResult : TReturning[], 'sqlite'>\n{\n\treadonly _: {\n\t\treadonly dialect: 'sqlite';\n\t\treadonly table: TTable;\n\t\treadonly resultType: TResultType;\n\t\treadonly runResult: TRunResult;\n\t\treadonly returning: TReturning;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TReturning extends undefined ? TRunResult : TReturning[];\n\t};\n}\n\nexport class SQLiteInsertBase<\n\tTTable extends SQLiteTable,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTReturning = undefined,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTDynamic extends boolean = false,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<TReturning extends undefined ? TRunResult : TReturning[]>\n\timplements RunnableQuery<TReturning extends undefined ? TRunResult : TReturning[], 'sqlite'>, SQLWrapper\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteInsert';\n\n\t/** @internal */\n\tconfig: SQLiteInsertConfig<TTable>;\n\n\tconstructor(\n\t\ttable: TTable,\n\t\tvalues: SQLiteInsertConfig['values'],\n\t\tprivate session: SQLiteSession<any, any, any, any>,\n\t\tprivate dialect: SQLiteDialect,\n\t\twithList?: Subquery[],\n\t\tselect?: boolean,\n\t) {\n\t\tsuper();\n\t\tthis.config = { table, values: values as any, withList, select };\n\t}\n\n\t/**\n\t * Adds a `returning` clause to the query.\n\t *\n\t * Calling this method will return the specified fields of the inserted rows. If no fields are specified, all fields will be returned.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert#insert-returning}\n\t *\n\t * @example\n\t * ```ts\n\t * // Insert one row and return all fields\n\t * const insertedCar: Car[] = await db.insert(cars)\n\t *   .values({ brand: 'BMW' })\n\t *   .returning();\n\t *\n\t * // Insert one row and return only the id\n\t * const insertedCarId: { id: number }[] = await db.insert(cars)\n\t *   .values({ brand: 'BMW' })\n\t *   .returning({ id: cars.id });\n\t * ```\n\t */\n\treturning(): SQLiteInsertReturningAll<this, TDynamic>;\n\treturning<TSelectedFields extends SelectedFieldsFlat>(\n\t\tfields: TSelectedFields,\n\t): SQLiteInsertReturning<this, TDynamic, TSelectedFields>;\n\treturning(\n\t\tfields: SelectedFieldsFlat = this.config.table[SQLiteTable.Symbol.Columns],\n\t): SQLiteInsertWithout<AnySQLiteInsert, TDynamic, 'returning'> {\n\t\tthis.config.returning = orderSelectedFields<SQLiteColumn>(fields);\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `on conflict do nothing` clause to the query.\n\t *\n\t * Calling this method simply avoids inserting a row as its alternative action.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert#on-conflict-do-nothing}\n\t *\n\t * @param config The `target` and `where` clauses.\n\t *\n\t * @example\n\t * ```ts\n\t * // Insert one row and cancel the insert if there's a conflict\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoNothing();\n\t *\n\t * // Explicitly specify conflict target\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoNothing({ target: cars.id });\n\t * ```\n\t */\n\tonConflictDoNothing(config: { target?: IndexColumn | IndexColumn[]; where?: SQL } = {}): this {\n\t\tif (config.target === undefined) {\n\t\t\tthis.config.onConflict = sql`do nothing`;\n\t\t} else {\n\t\t\tconst targetSql = Array.isArray(config.target) ? sql`${config.target}` : sql`${[config.target]}`;\n\t\t\tconst whereSql = config.where ? sql` where ${config.where}` : sql``;\n\t\t\tthis.config.onConflict = sql`${targetSql} do nothing${whereSql}`;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds an `on conflict do update` clause to the query.\n\t *\n\t * Calling this method will update the existing row that conflicts with the row proposed for insertion as its alternative action.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert#upserts-and-conflicts}\n\t *\n\t * @param config The `target`, `set` and `where` clauses.\n\t *\n\t * @example\n\t * ```ts\n\t * // Update the row if there's a conflict\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoUpdate({\n\t *     target: cars.id,\n\t *     set: { brand: 'Porsche' }\n\t *   });\n\t *\n\t * // Upsert with 'where' clause\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoUpdate({\n\t *     target: cars.id,\n\t *     set: { brand: 'newBMW' },\n\t *     where: sql`${cars.createdAt} > '2023-01-01'::date`,\n\t *   });\n\t * ```\n\t */\n\tonConflictDoUpdate(config: SQLiteInsertOnConflictDoUpdateConfig<this>): this {\n\t\tif (config.where && (config.targetWhere || config.setWhere)) {\n\t\t\tthrow new Error(\n\t\t\t\t'You cannot use both \"where\" and \"targetWhere\"/\"setWhere\" at the same time - \"where\" is deprecated, use \"targetWhere\" or \"setWhere\" instead.',\n\t\t\t);\n\t\t}\n\t\tconst whereSql = config.where ? sql` where ${config.where}` : undefined;\n\t\tconst targetWhereSql = config.targetWhere ? sql` where ${config.targetWhere}` : undefined;\n\t\tconst setWhereSql = config.setWhere ? sql` where ${config.setWhere}` : undefined;\n\t\tconst targetSql = Array.isArray(config.target) ? sql`${config.target}` : sql`${[config.target]}`;\n\t\tconst setSql = this.dialect.buildUpdateSet(this.config.table, mapUpdateSet(this.config.table, config.set));\n\t\tthis.config.onConflict = sql`${targetSql}${targetWhereSql} do update set ${setSql}${whereSql}${setWhereSql}`;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildInsertQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\t/** @internal */\n\t_prepare(isOneTimeQuery = true): SQLiteInsertPrepare<this> {\n\t\treturn this.session[isOneTimeQuery ? 'prepareOneTimeQuery' : 'prepareQuery'](\n\t\t\tthis.dialect.sqlToQuery(this.getSQL()),\n\t\t\tthis.config.returning,\n\t\t\tthis.config.returning ? 'all' : 'run',\n\t\t\ttrue,\n\t\t) as SQLiteInsertPrepare<this>;\n\t}\n\n\tprepare(): SQLiteInsertPrepare<this> {\n\t\treturn this._prepare(false);\n\t}\n\n\trun: ReturnType<this['prepare']>['run'] = (placeholderValues) => {\n\t\treturn this._prepare().run(placeholderValues);\n\t};\n\n\tall: ReturnType<this['prepare']>['all'] = (placeholderValues) => {\n\t\treturn this._prepare().all(placeholderValues);\n\t};\n\n\tget: ReturnType<this['prepare']>['get'] = (placeholderValues) => {\n\t\treturn this._prepare().get(placeholderValues);\n\t};\n\n\tvalues: ReturnType<this['prepare']>['values'] = (placeholderValues) => {\n\t\treturn this._prepare().values(placeholderValues);\n\t};\n\n\toverride async execute(): Promise<SQLiteInsertExecute<this>> {\n\t\treturn (this.config.returning ? this.all() : this.run()) as SQLiteInsertExecute<this>;\n\t}\n\n\t$dynamic(): SQLiteInsertDynamic<this> {\n\t\treturn this as any;\n\t}\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2692, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2698, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/query-builders/delete.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport type { SelectResultFields } from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { Placeholder, Query, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteDialect } from '~/sqlite-core/dialect.ts';\nimport type { SQLitePreparedQuery, SQLiteSession } from '~/sqlite-core/session.ts';\nimport { SQLiteTable } from '~/sqlite-core/table.ts';\nimport type { Subquery } from '~/subquery.ts';\nimport { Table } from '~/table.ts';\nimport { type DrizzleTypeError, orderSelectedFields, type ValueOrArray } from '~/utils.ts';\nimport type { SQLiteColumn } from '../columns/common.ts';\nimport type { SelectedFieldsFlat, SelectedFieldsOrdered } from './select.types.ts';\n\nexport type SQLiteDeleteWithout<\n\tT extends AnySQLiteDeleteBase,\n\tTDynamic extends boolean,\n\tK extends keyof T & string,\n> = TDynamic extends true ? T\n\t: Omit<\n\t\tSQLiteDeleteBase<\n\t\t\tT['_']['table'],\n\t\t\tT['_']['resultType'],\n\t\t\tT['_']['runResult'],\n\t\t\tT['_']['returning'],\n\t\t\tTDynamic,\n\t\t\tT['_']['excludedMethods'] | K\n\t\t>,\n\t\tT['_']['excludedMethods'] | K\n\t>;\n\nexport type SQLiteDelete<\n\tTTable extends SQLiteTable = SQLiteTable,\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = unknown,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n> = SQLiteDeleteBase<TTable, TResultType, TRunResult, TReturning, true, never>;\n\nexport interface SQLiteDeleteConfig {\n\twhere?: SQL | undefined;\n\tlimit?: number | Placeholder;\n\torderBy?: (SQLiteColumn | SQL | SQL.Aliased)[];\n\ttable: SQLiteTable;\n\treturning?: SelectedFieldsOrdered;\n\twithList?: Subquery[];\n}\n\nexport type SQLiteDeleteReturningAll<\n\tT extends AnySQLiteDeleteBase,\n\tTDynamic extends boolean,\n> = SQLiteDeleteWithout<\n\tSQLiteDeleteBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tT['_']['table']['$inferSelect'],\n\t\tT['_']['dynamic'],\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteDeleteReturning<\n\tT extends AnySQLiteDeleteBase,\n\tTDynamic extends boolean,\n\tTSelectedFields extends SelectedFieldsFlat,\n> = SQLiteDeleteWithout<\n\tSQLiteDeleteBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tSelectResultFields<TSelectedFields>,\n\t\tT['_']['dynamic'],\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteDeleteExecute<T extends AnySQLiteDeleteBase> = T['_']['returning'] extends undefined\n\t? T['_']['runResult']\n\t: T['_']['returning'][];\n\nexport type SQLiteDeletePrepare<T extends AnySQLiteDeleteBase> = SQLitePreparedQuery<{\n\ttype: T['_']['resultType'];\n\trun: T['_']['runResult'];\n\tall: T['_']['returning'] extends undefined ? DrizzleTypeError<'.all() cannot be used without .returning()'>\n\t\t: T['_']['returning'][];\n\tget: T['_']['returning'] extends undefined ? DrizzleTypeError<'.get() cannot be used without .returning()'>\n\t\t: T['_']['returning'] | undefined;\n\tvalues: T['_']['returning'] extends undefined ? DrizzleTypeError<'.values() cannot be used without .returning()'>\n\t\t: any[][];\n\texecute: SQLiteDeleteExecute<T>;\n}>;\n\nexport type SQLiteDeleteDynamic<T extends AnySQLiteDeleteBase> = SQLiteDelete<\n\tT['_']['table'],\n\tT['_']['resultType'],\n\tT['_']['runResult'],\n\tT['_']['returning']\n>;\n\nexport type AnySQLiteDeleteBase = SQLiteDeleteBase<any, any, any, any, any, any>;\n\nexport interface SQLiteDeleteBase<\n\tTTable extends SQLiteTable,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n> extends\n\tQueryPromise<TReturning extends undefined ? TRunResult : TReturning[]>,\n\tRunnableQuery<TReturning extends undefined ? TRunResult : TReturning[], 'sqlite'>,\n\tSQLWrapper\n{\n\treadonly _: {\n\t\tdialect: 'sqlite';\n\t\treadonly table: TTable;\n\t\treadonly resultType: TResultType;\n\t\treadonly runResult: TRunResult;\n\t\treadonly returning: TReturning;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TReturning extends undefined ? TRunResult : TReturning[];\n\t};\n}\n\nexport class SQLiteDeleteBase<\n\tTTable extends SQLiteTable,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n\tTDynamic extends boolean = false,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<TReturning extends undefined ? TRunResult : TReturning[]>\n\timplements RunnableQuery<TReturning extends undefined ? TRunResult : TReturning[], 'sqlite'>, SQLWrapper\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteDelete';\n\n\t/** @internal */\n\tconfig: SQLiteDeleteConfig;\n\n\tconstructor(\n\t\tprivate table: TTable,\n\t\tprivate session: SQLiteSession<any, any, any, any>,\n\t\tprivate dialect: SQLiteDialect,\n\t\twithList?: Subquery[],\n\t) {\n\t\tsuper();\n\t\tthis.config = { table, withList };\n\t}\n\n\t/**\n\t * Adds a `where` clause to the query.\n\t *\n\t * Calling this method will delete only those rows that fulfill a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/delete}\n\t *\n\t * @param where the `where` clause.\n\t *\n\t * @example\n\t * You can use conditional operators and `sql function` to filter the rows to be deleted.\n\t *\n\t * ```ts\n\t * // Delete all cars with green color\n\t * db.delete(cars).where(eq(cars.color, 'green'));\n\t * // or\n\t * db.delete(cars).where(sql`${cars.color} = 'green'`)\n\t * ```\n\t *\n\t * You can logically combine conditional operators with `and()` and `or()` operators:\n\t *\n\t * ```ts\n\t * // Delete all BMW cars with a green color\n\t * db.delete(cars).where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n\t *\n\t * // Delete all cars with the green or blue color\n\t * db.delete(cars).where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n\t * ```\n\t */\n\twhere(where: SQL | undefined): SQLiteDeleteWithout<this, TDynamic, 'where'> {\n\t\tthis.config.where = where;\n\t\treturn this as any;\n\t}\n\n\torderBy(\n\t\tbuilder: (deleteTable: TTable) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>,\n\t): SQLiteDeleteWithout<this, TDynamic, 'orderBy'>;\n\torderBy(...columns: (SQLiteColumn | SQL | SQL.Aliased)[]): SQLiteDeleteWithout<this, TDynamic, 'orderBy'>;\n\torderBy(\n\t\t...columns:\n\t\t\t| [(deleteTable: TTable) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>]\n\t\t\t| (SQLiteColumn | SQL | SQL.Aliased)[]\n\t): SQLiteDeleteWithout<this, TDynamic, 'orderBy'> {\n\t\tif (typeof columns[0] === 'function') {\n\t\t\tconst orderBy = columns[0](\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.table[Table.Symbol.Columns],\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' }),\n\t\t\t\t) as any,\n\t\t\t);\n\n\t\t\tconst orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];\n\t\t\tthis.config.orderBy = orderByArray;\n\t\t} else {\n\t\t\tconst orderByArray = columns as (SQLiteColumn | SQL | SQL.Aliased)[];\n\t\t\tthis.config.orderBy = orderByArray;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\tlimit(limit: number | Placeholder): SQLiteDeleteWithout<this, TDynamic, 'limit'> {\n\t\tthis.config.limit = limit;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `returning` clause to the query.\n\t *\n\t * Calling this method will return the specified fields of the deleted rows. If no fields are specified, all fields will be returned.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/delete#delete-with-return}\n\t *\n\t * @example\n\t * ```ts\n\t * // Delete all cars with the green color and return all fields\n\t * const deletedCars: Car[] = await db.delete(cars)\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning();\n\t *\n\t * // Delete all cars with the green color and return only their id and brand fields\n\t * const deletedCarsIdsAndBrands: { id: number, brand: string }[] = await db.delete(cars)\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning({ id: cars.id, brand: cars.brand });\n\t * ```\n\t */\n\treturning(): SQLiteDeleteReturningAll<this, TDynamic>;\n\treturning<TSelectedFields extends SelectedFieldsFlat>(\n\t\tfields: TSelectedFields,\n\t): SQLiteDeleteReturning<this, TDynamic, TSelectedFields>;\n\treturning(\n\t\tfields: SelectedFieldsFlat = this.table[SQLiteTable.Symbol.Columns],\n\t): SQLiteDeleteReturning<this, TDynamic, any> {\n\t\tthis.config.returning = orderSelectedFields<SQLiteColumn>(fields);\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildDeleteQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\t/** @internal */\n\t_prepare(isOneTimeQuery = true): SQLiteDeletePrepare<this> {\n\t\treturn this.session[isOneTimeQuery ? 'prepareOneTimeQuery' : 'prepareQuery'](\n\t\t\tthis.dialect.sqlToQuery(this.getSQL()),\n\t\t\tthis.config.returning,\n\t\t\tthis.config.returning ? 'all' : 'run',\n\t\t\ttrue,\n\t\t) as SQLiteDeletePrepare<this>;\n\t}\n\n\tprepare(): SQLiteDeletePrepare<this> {\n\t\treturn this._prepare(false);\n\t}\n\n\trun: ReturnType<this['prepare']>['run'] = (placeholderValues) => {\n\t\treturn this._prepare().run(placeholderValues);\n\t};\n\n\tall: ReturnType<this['prepare']>['all'] = (placeholderValues) => {\n\t\treturn this._prepare().all(placeholderValues);\n\t};\n\n\tget: ReturnType<this['prepare']>['get'] = (placeholderValues) => {\n\t\treturn this._prepare().get(placeholderValues);\n\t};\n\n\tvalues: ReturnType<this['prepare']>['values'] = (placeholderValues) => {\n\t\treturn this._prepare().values(placeholderValues);\n\t};\n\n\toverride async execute(placeholderValues?: Record<string, unknown>): Promise<SQLiteDeleteExecute<this>> {\n\t\treturn this._prepare().execute(placeholderValues) as SQLiteDeleteExecute<this>;\n\t}\n\n\t$dynamic(): SQLiteDeleteDynamic<this> {\n\t\treturn this as any;\n\t}\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2816, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2822, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/query-builders/raw.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { PreparedQuery } from '~/session.ts';\nimport type { SQL, SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteAsyncDialect } from '../dialect.ts';\n\ntype SQLiteRawAction = 'all' | 'get' | 'values' | 'run';\nexport interface SQLiteRawConfig {\n\taction: SQLiteRawAction;\n}\n\nexport interface SQLiteRaw<TResult> extends QueryPromise<TResult>, RunnableQuery<TResult, 'sqlite'>, SQLWrapper {}\n\nexport class SQLiteRaw<TResult> extends QueryPromise<TResult>\n\timplements RunnableQuery<TResult, 'sqlite'>, SQLWrapper, PreparedQuery\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteRaw';\n\n\tdeclare readonly _: {\n\t\treadonly dialect: 'sqlite';\n\t\treadonly result: TResult;\n\t};\n\n\t/** @internal */\n\tconfig: SQLiteRawConfig;\n\n\tconstructor(\n\t\tpublic execute: () => Promise<TResult>,\n\t\t/** @internal */\n\t\tpublic getSQL: () => SQL,\n\t\taction: SQLiteRawAction,\n\t\tprivate dialect: SQLiteAsyncDialect,\n\t\tprivate mapBatchResult: (result: unknown) => unknown,\n\t) {\n\t\tsuper();\n\t\tthis.config = { action };\n\t}\n\n\tgetQuery() {\n\t\treturn { ...this.dialect.sqlToQuery(this.getSQL()), method: this.config.action };\n\t}\n\n\tmapResult(result: unknown, isFromBatch?: boolean) {\n\t\treturn isFromBatch ? this.mapBatchResult(result) : result;\n\t}\n\n\t_prepare(): PreparedQuery {\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tisResponseInArrayMode(): boolean {\n\t\treturn false;\n\t}\n}\n"],"names":[],"mappings":";;;AAAA,SAAS,kBAAkB;AAC3B,SAAS,oBAAoB;;;AAatB,MAAM,6KAA2B,eAAA,CAExC;IAWC,YACQ,OAAA,EAEA,MAAA,EACP,MAAA,EACQ,OAAA,EACA,cAAA,CACP;QACD,KAAA,CAAM;QAPC,IAAA,CAAA,OAAA,GAAA;QAEA,IAAA,CAAA,MAAA,GAAA;QAEC,IAAA,CAAA,OAAA,GAAA;QACA,IAAA,CAAA,cAAA,GAAA;QAGR,IAAA,CAAK,MAAA,GAAS;YAAE;QAAO;IACxB;IApBA,OAAA,kJAA0B,aAAU,CAAA,GAAY,YAAA;IAAA,cAAA,GAQhD,OAAA;IAcA,WAAW;QACV,OAAO;YAAE,GAAG,IAAA,CAAK,OAAA,CAAQ,UAAA,CAAW,IAAA,CAAK,MAAA,CAAO,CAAC,CAAA;YAAG,QAAQ,IAAA,CAAK,MAAA,CAAO,MAAA;QAAO;IAChF;IAEA,UAAU,MAAA,EAAiB,WAAA,EAAuB;QACjD,OAAO,cAAc,IAAA,CAAK,cAAA,CAAe,MAAM,IAAI;IACpD;IAEA,WAA0B;QACzB,OAAO,IAAA;IACR;IAAA,cAAA,GAGA,wBAAiC;QAChC,OAAO;IACR;AACD","ignoreList":[0]}},
    {"offset": {"line": 2860, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2866, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/db.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type { ExtractTablesWithRelations, RelationalSchemaConfig, TablesRelationalConfig } from '~/relations.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport { type ColumnsSelection, type SQL, sql, type SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteAsyncDialect, SQLiteSyncDialect } from '~/sqlite-core/dialect.ts';\nimport {\n\tQueryBuilder,\n\tSQLiteDeleteBase,\n\tSQLiteInsertBuilder,\n\tSQLiteSelectBuilder,\n\tSQLiteUpdateBuilder,\n} from '~/sqlite-core/query-builders/index.ts';\nimport type {\n\tDBResult,\n\tResult,\n\tSQLiteSession,\n\tSQLiteTransaction,\n\tSQLiteTransactionConfig,\n} from '~/sqlite-core/session.ts';\nimport type { SQLiteTable } from '~/sqlite-core/table.ts';\nimport { WithSubquery } from '~/subquery.ts';\nimport type { DrizzleTypeError } from '~/utils.ts';\nimport { SQLiteCountBuilder } from './query-builders/count.ts';\nimport { RelationalQueryBuilder } from './query-builders/query.ts';\nimport { SQLiteRaw } from './query-builders/raw.ts';\nimport type { SelectedFields } from './query-builders/select.types.ts';\nimport type { WithSubqueryWithSelection } from './subquery.ts';\nimport type { SQLiteViewBase } from './view-base.ts';\n\nexport class BaseSQLiteDatabase<\n\tTResultKind extends 'sync' | 'async',\n\tTRunResult,\n\tTFullSchema extends Record<string, unknown> = Record<string, never>,\n\tTSchema extends TablesRelationalConfig = ExtractTablesWithRelations<TFullSchema>,\n> {\n\tstatic readonly [entityKind]: string = 'BaseSQLiteDatabase';\n\n\tdeclare readonly _: {\n\t\treadonly schema: TSchema | undefined;\n\t\treadonly fullSchema: TFullSchema;\n\t\treadonly tableNamesMap: Record<string, string>;\n\t};\n\n\tquery: TFullSchema extends Record<string, never>\n\t\t? DrizzleTypeError<'Seems like the schema generic is missing - did you forget to add it to your DB type?'>\n\t\t: {\n\t\t\t[K in keyof TSchema]: RelationalQueryBuilder<TResultKind, TFullSchema, TSchema, TSchema[K]>;\n\t\t};\n\n\tconstructor(\n\t\tprivate resultKind: TResultKind,\n\t\t/** @internal */\n\t\treadonly dialect: { sync: SQLiteSyncDialect; async: SQLiteAsyncDialect }[TResultKind],\n\t\t/** @internal */\n\t\treadonly session: SQLiteSession<TResultKind, TRunResult, TFullSchema, TSchema>,\n\t\tschema: RelationalSchemaConfig<TSchema> | undefined,\n\t) {\n\t\tthis._ = schema\n\t\t\t? {\n\t\t\t\tschema: schema.schema,\n\t\t\t\tfullSchema: schema.fullSchema as TFullSchema,\n\t\t\t\ttableNamesMap: schema.tableNamesMap,\n\t\t\t}\n\t\t\t: {\n\t\t\t\tschema: undefined,\n\t\t\t\tfullSchema: {} as TFullSchema,\n\t\t\t\ttableNamesMap: {},\n\t\t\t};\n\t\tthis.query = {} as typeof this['query'];\n\t\tconst query = this.query as {\n\t\t\t[K in keyof TSchema]: RelationalQueryBuilder<TResultKind, TFullSchema, TSchema, TSchema[K]>;\n\t\t};\n\t\tif (this._.schema) {\n\t\t\tfor (const [tableName, columns] of Object.entries(this._.schema)) {\n\t\t\t\tquery[tableName as keyof TSchema] = new RelationalQueryBuilder(\n\t\t\t\t\tresultKind,\n\t\t\t\t\tschema!.fullSchema,\n\t\t\t\t\tthis._.schema,\n\t\t\t\t\tthis._.tableNamesMap,\n\t\t\t\t\tschema!.fullSchema[tableName] as SQLiteTable,\n\t\t\t\t\tcolumns,\n\t\t\t\t\tdialect,\n\t\t\t\t\tsession as SQLiteSession<any, any, any, any> as any,\n\t\t\t\t) as typeof query[keyof TSchema];\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates a subquery that defines a temporary named result set as a CTE.\n\t *\n\t * It is useful for breaking down complex queries into simpler parts and for reusing the result set in subsequent parts of the query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#with-clause}\n\t *\n\t * @param alias The alias for the subquery.\n\t *\n\t * Failure to provide an alias will result in a DrizzleTypeError, preventing the subquery from being referenced in other queries.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Create a subquery with alias 'sq' and use it in the select query\n\t * const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));\n\t *\n\t * const result = await db.with(sq).select().from(sq);\n\t * ```\n\t *\n\t * To select arbitrary SQL values as fields in a CTE and reference them in other CTEs or in the main query, you need to add aliases to them:\n\t *\n\t * ```ts\n\t * // Select an arbitrary SQL value as a field in a CTE and reference it in the main query\n\t * const sq = db.$with('sq').as(db.select({\n\t *   name: sql<string>`upper(${users.name})`.as('name'),\n\t * })\n\t * .from(users));\n\t *\n\t * const result = await db.with(sq).select({ name: sq.name }).from(sq);\n\t * ```\n\t */\n\t$with<TAlias extends string>(alias: TAlias) {\n\t\tconst self = this;\n\t\treturn {\n\t\t\tas<TSelection extends ColumnsSelection>(\n\t\t\t\tqb: TypedQueryBuilder<TSelection> | ((qb: QueryBuilder) => TypedQueryBuilder<TSelection>),\n\t\t\t): WithSubqueryWithSelection<TSelection, TAlias> {\n\t\t\t\tif (typeof qb === 'function') {\n\t\t\t\t\tqb = qb(new QueryBuilder(self.dialect));\n\t\t\t\t}\n\n\t\t\t\treturn new Proxy(\n\t\t\t\t\tnew WithSubquery(qb.getSQL(), qb.getSelectedFields() as SelectedFields, alias, true),\n\t\t\t\t\tnew SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t\t\t) as WithSubqueryWithSelection<TSelection, TAlias>;\n\t\t\t},\n\t\t};\n\t}\n\n\t$count(\n\t\tsource: SQLiteTable | SQLiteViewBase | SQL | SQLWrapper,\n\t\tfilters?: SQL<unknown>,\n\t) {\n\t\treturn new SQLiteCountBuilder({ source, filters, session: this.session });\n\t}\n\n\t/**\n\t * Incorporates a previously defined CTE (using `$with`) into the main query.\n\t *\n\t * This method allows the main query to reference a temporary named result set.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#with-clause}\n\t *\n\t * @param queries The CTEs to incorporate into the main query.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Define a subquery 'sq' as a CTE using $with\n\t * const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));\n\t *\n\t * // Incorporate the CTE 'sq' into the main query and select from it\n\t * const result = await db.with(sq).select().from(sq);\n\t * ```\n\t */\n\twith(...queries: WithSubquery[]) {\n\t\tconst self = this;\n\n\t\t/**\n\t\t * Creates a select query.\n\t\t *\n\t\t * Calling this method with no arguments will select all columns from the table. Pass a selection object to specify the columns you want to select.\n\t\t *\n\t\t * Use `.from()` method to specify which table to select from.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/select}\n\t\t *\n\t\t * @param fields The selection object.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Select all columns and all rows from the 'cars' table\n\t\t * const allCars: Car[] = await db.select().from(cars);\n\t\t *\n\t\t * // Select specific columns and all rows from the 'cars' table\n\t\t * const carsIdsAndBrands: { id: number; brand: string }[] = await db.select({\n\t\t *   id: cars.id,\n\t\t *   brand: cars.brand\n\t\t * })\n\t\t *   .from(cars);\n\t\t * ```\n\t\t *\n\t\t * Like in SQL, you can use arbitrary expressions as selection fields, not just table columns:\n\t\t *\n\t\t * ```ts\n\t\t * // Select specific columns along with expression and all rows from the 'cars' table\n\t\t * const carsIdsAndLowerNames: { id: number; lowerBrand: string }[] = await db.select({\n\t\t *   id: cars.id,\n\t\t *   lowerBrand: sql<string>`lower(${cars.brand})`,\n\t\t * })\n\t\t *   .from(cars);\n\t\t * ```\n\t\t */\n\t\tfunction select(): SQLiteSelectBuilder<undefined, TResultKind, TRunResult>;\n\t\tfunction select<TSelection extends SelectedFields>(\n\t\t\tfields: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection, TResultKind, TRunResult>;\n\t\tfunction select(\n\t\t\tfields?: SelectedFields,\n\t\t): SQLiteSelectBuilder<SelectedFields | undefined, TResultKind, TRunResult> {\n\t\t\treturn new SQLiteSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: self.session,\n\t\t\t\tdialect: self.dialect,\n\t\t\t\twithList: queries,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Adds `distinct` expression to the select query.\n\t\t *\n\t\t * Calling this method will return only unique values. When multiple columns are selected, it returns rows with unique combinations of values in these columns.\n\t\t *\n\t\t * Use `.from()` method to specify which table to select from.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/select#distinct}\n\t\t *\n\t\t * @param fields The selection object.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Select all unique rows from the 'cars' table\n\t\t * await db.selectDistinct()\n\t\t *   .from(cars)\n\t\t *   .orderBy(cars.id, cars.brand, cars.color);\n\t\t *\n\t\t * // Select all unique brands from the 'cars' table\n\t\t * await db.selectDistinct({ brand: cars.brand })\n\t\t *   .from(cars)\n\t\t *   .orderBy(cars.brand);\n\t\t * ```\n\t\t */\n\t\tfunction selectDistinct(): SQLiteSelectBuilder<undefined, TResultKind, TRunResult>;\n\t\tfunction selectDistinct<TSelection extends SelectedFields>(\n\t\t\tfields: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection, TResultKind, TRunResult>;\n\t\tfunction selectDistinct(\n\t\t\tfields?: SelectedFields,\n\t\t): SQLiteSelectBuilder<SelectedFields | undefined, TResultKind, TRunResult> {\n\t\t\treturn new SQLiteSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: self.session,\n\t\t\t\tdialect: self.dialect,\n\t\t\t\twithList: queries,\n\t\t\t\tdistinct: true,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Creates an update query.\n\t\t *\n\t\t * Calling this method without `.where()` clause will update all rows in a table. The `.where()` clause specifies which rows should be updated.\n\t\t *\n\t\t * Use `.set()` method to specify which values to update.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/update}\n\t\t *\n\t\t * @param table The table to update.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Update all rows in the 'cars' table\n\t\t * await db.update(cars).set({ color: 'red' });\n\t\t *\n\t\t * // Update rows with filters and conditions\n\t\t * await db.update(cars).set({ color: 'red' }).where(eq(cars.brand, 'BMW'));\n\t\t *\n\t\t * // Update with returning clause\n\t\t * const updatedCar: Car[] = await db.update(cars)\n\t\t *   .set({ color: 'red' })\n\t\t *   .where(eq(cars.id, 1))\n\t\t *   .returning();\n\t\t * ```\n\t\t */\n\t\tfunction update<TTable extends SQLiteTable>(table: TTable): SQLiteUpdateBuilder<TTable, TResultKind, TRunResult> {\n\t\t\treturn new SQLiteUpdateBuilder(table, self.session, self.dialect, queries);\n\t\t}\n\n\t\t/**\n\t\t * Creates an insert query.\n\t\t *\n\t\t * Calling this method will create new rows in a table. Use `.values()` method to specify which values to insert.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/insert}\n\t\t *\n\t\t * @param table The table to insert into.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Insert one row\n\t\t * await db.insert(cars).values({ brand: 'BMW' });\n\t\t *\n\t\t * // Insert multiple rows\n\t\t * await db.insert(cars).values([{ brand: 'BMW' }, { brand: 'Porsche' }]);\n\t\t *\n\t\t * // Insert with returning clause\n\t\t * const insertedCar: Car[] = await db.insert(cars)\n\t\t *   .values({ brand: 'BMW' })\n\t\t *   .returning();\n\t\t * ```\n\t\t */\n\t\tfunction insert<TTable extends SQLiteTable>(into: TTable): SQLiteInsertBuilder<TTable, TResultKind, TRunResult> {\n\t\t\treturn new SQLiteInsertBuilder(into, self.session, self.dialect, queries);\n\t\t}\n\n\t\t/**\n\t\t * Creates a delete query.\n\t\t *\n\t\t * Calling this method without `.where()` clause will delete all rows in a table. The `.where()` clause specifies which rows should be deleted.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/delete}\n\t\t *\n\t\t * @param table The table to delete from.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Delete all rows in the 'cars' table\n\t\t * await db.delete(cars);\n\t\t *\n\t\t * // Delete rows with filters and conditions\n\t\t * await db.delete(cars).where(eq(cars.color, 'green'));\n\t\t *\n\t\t * // Delete with returning clause\n\t\t * const deletedCar: Car[] = await db.delete(cars)\n\t\t *   .where(eq(cars.id, 1))\n\t\t *   .returning();\n\t\t * ```\n\t\t */\n\t\tfunction delete_<TTable extends SQLiteTable>(from: TTable): SQLiteDeleteBase<TTable, TResultKind, TRunResult> {\n\t\t\treturn new SQLiteDeleteBase(from, self.session, self.dialect, queries);\n\t\t}\n\n\t\treturn { select, selectDistinct, update, insert, delete: delete_ };\n\t}\n\n\t/**\n\t * Creates a select query.\n\t *\n\t * Calling this method with no arguments will select all columns from the table. Pass a selection object to specify the columns you want to select.\n\t *\n\t * Use `.from()` method to specify which table to select from.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select}\n\t *\n\t * @param fields The selection object.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all columns and all rows from the 'cars' table\n\t * const allCars: Car[] = await db.select().from(cars);\n\t *\n\t * // Select specific columns and all rows from the 'cars' table\n\t * const carsIdsAndBrands: { id: number; brand: string }[] = await db.select({\n\t *   id: cars.id,\n\t *   brand: cars.brand\n\t * })\n\t *   .from(cars);\n\t * ```\n\t *\n\t * Like in SQL, you can use arbitrary expressions as selection fields, not just table columns:\n\t *\n\t * ```ts\n\t * // Select specific columns along with expression and all rows from the 'cars' table\n\t * const carsIdsAndLowerNames: { id: number; lowerBrand: string }[] = await db.select({\n\t *   id: cars.id,\n\t *   lowerBrand: sql<string>`lower(${cars.brand})`,\n\t * })\n\t *   .from(cars);\n\t * ```\n\t */\n\tselect(): SQLiteSelectBuilder<undefined, TResultKind, TRunResult>;\n\tselect<TSelection extends SelectedFields>(\n\t\tfields: TSelection,\n\t): SQLiteSelectBuilder<TSelection, TResultKind, TRunResult>;\n\tselect(fields?: SelectedFields): SQLiteSelectBuilder<SelectedFields | undefined, TResultKind, TRunResult> {\n\t\treturn new SQLiteSelectBuilder({ fields: fields ?? undefined, session: this.session, dialect: this.dialect });\n\t}\n\n\t/**\n\t * Adds `distinct` expression to the select query.\n\t *\n\t * Calling this method will return only unique values. When multiple columns are selected, it returns rows with unique combinations of values in these columns.\n\t *\n\t * Use `.from()` method to specify which table to select from.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#distinct}\n\t *\n\t * @param fields The selection object.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all unique rows from the 'cars' table\n\t * await db.selectDistinct()\n\t *   .from(cars)\n\t *   .orderBy(cars.id, cars.brand, cars.color);\n\t *\n\t * // Select all unique brands from the 'cars' table\n\t * await db.selectDistinct({ brand: cars.brand })\n\t *   .from(cars)\n\t *   .orderBy(cars.brand);\n\t * ```\n\t */\n\tselectDistinct(): SQLiteSelectBuilder<undefined, TResultKind, TRunResult>;\n\tselectDistinct<TSelection extends SelectedFields>(\n\t\tfields: TSelection,\n\t): SQLiteSelectBuilder<TSelection, TResultKind, TRunResult>;\n\tselectDistinct(\n\t\tfields?: SelectedFields,\n\t): SQLiteSelectBuilder<SelectedFields | undefined, TResultKind, TRunResult> {\n\t\treturn new SQLiteSelectBuilder({\n\t\t\tfields: fields ?? undefined,\n\t\t\tsession: this.session,\n\t\t\tdialect: this.dialect,\n\t\t\tdistinct: true,\n\t\t});\n\t}\n\n\t/**\n\t * Creates an update query.\n\t *\n\t * Calling this method without `.where()` clause will update all rows in a table. The `.where()` clause specifies which rows should be updated.\n\t *\n\t * Use `.set()` method to specify which values to update.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/update}\n\t *\n\t * @param table The table to update.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Update all rows in the 'cars' table\n\t * await db.update(cars).set({ color: 'red' });\n\t *\n\t * // Update rows with filters and conditions\n\t * await db.update(cars).set({ color: 'red' }).where(eq(cars.brand, 'BMW'));\n\t *\n\t * // Update with returning clause\n\t * const updatedCar: Car[] = await db.update(cars)\n\t *   .set({ color: 'red' })\n\t *   .where(eq(cars.id, 1))\n\t *   .returning();\n\t * ```\n\t */\n\tupdate<TTable extends SQLiteTable>(table: TTable): SQLiteUpdateBuilder<TTable, TResultKind, TRunResult> {\n\t\treturn new SQLiteUpdateBuilder(table, this.session, this.dialect);\n\t}\n\n\t/**\n\t * Creates an insert query.\n\t *\n\t * Calling this method will create new rows in a table. Use `.values()` method to specify which values to insert.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert}\n\t *\n\t * @param table The table to insert into.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Insert one row\n\t * await db.insert(cars).values({ brand: 'BMW' });\n\t *\n\t * // Insert multiple rows\n\t * await db.insert(cars).values([{ brand: 'BMW' }, { brand: 'Porsche' }]);\n\t *\n\t * // Insert with returning clause\n\t * const insertedCar: Car[] = await db.insert(cars)\n\t *   .values({ brand: 'BMW' })\n\t *   .returning();\n\t * ```\n\t */\n\tinsert<TTable extends SQLiteTable>(into: TTable): SQLiteInsertBuilder<TTable, TResultKind, TRunResult> {\n\t\treturn new SQLiteInsertBuilder(into, this.session, this.dialect);\n\t}\n\n\t/**\n\t * Creates a delete query.\n\t *\n\t * Calling this method without `.where()` clause will delete all rows in a table. The `.where()` clause specifies which rows should be deleted.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/delete}\n\t *\n\t * @param table The table to delete from.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Delete all rows in the 'cars' table\n\t * await db.delete(cars);\n\t *\n\t * // Delete rows with filters and conditions\n\t * await db.delete(cars).where(eq(cars.color, 'green'));\n\t *\n\t * // Delete with returning clause\n\t * const deletedCar: Car[] = await db.delete(cars)\n\t *   .where(eq(cars.id, 1))\n\t *   .returning();\n\t * ```\n\t */\n\tdelete<TTable extends SQLiteTable>(from: TTable): SQLiteDeleteBase<TTable, TResultKind, TRunResult> {\n\t\treturn new SQLiteDeleteBase(from, this.session, this.dialect);\n\t}\n\n\trun(query: SQLWrapper | string): DBResult<TResultKind, TRunResult> {\n\t\tconst sequel = typeof query === 'string' ? sql.raw(query) : query.getSQL();\n\t\tif (this.resultKind === 'async') {\n\t\t\treturn new SQLiteRaw(\n\t\t\t\tasync () => this.session.run(sequel),\n\t\t\t\t() => sequel,\n\t\t\t\t'run',\n\t\t\t\tthis.dialect as SQLiteAsyncDialect,\n\t\t\t\tthis.session.extractRawRunValueFromBatchResult.bind(this.session),\n\t\t\t) as DBResult<TResultKind, TRunResult>;\n\t\t}\n\t\treturn this.session.run(sequel) as DBResult<TResultKind, TRunResult>;\n\t}\n\n\tall<T = unknown>(query: SQLWrapper | string): DBResult<TResultKind, T[]> {\n\t\tconst sequel = typeof query === 'string' ? sql.raw(query) : query.getSQL();\n\t\tif (this.resultKind === 'async') {\n\t\t\treturn new SQLiteRaw(\n\t\t\t\tasync () => this.session.all(sequel),\n\t\t\t\t() => sequel,\n\t\t\t\t'all',\n\t\t\t\tthis.dialect as SQLiteAsyncDialect,\n\t\t\t\tthis.session.extractRawAllValueFromBatchResult.bind(this.session),\n\t\t\t) as any;\n\t\t}\n\t\treturn this.session.all(sequel) as DBResult<TResultKind, T[]>;\n\t}\n\n\tget<T = unknown>(query: SQLWrapper | string): DBResult<TResultKind, T> {\n\t\tconst sequel = typeof query === 'string' ? sql.raw(query) : query.getSQL();\n\t\tif (this.resultKind === 'async') {\n\t\t\treturn new SQLiteRaw(\n\t\t\t\tasync () => this.session.get(sequel),\n\t\t\t\t() => sequel,\n\t\t\t\t'get',\n\t\t\t\tthis.dialect as SQLiteAsyncDialect,\n\t\t\t\tthis.session.extractRawGetValueFromBatchResult.bind(this.session),\n\t\t\t) as DBResult<TResultKind, T>;\n\t\t}\n\t\treturn this.session.get(sequel) as DBResult<TResultKind, T>;\n\t}\n\n\tvalues<T extends unknown[] = unknown[]>(query: SQLWrapper | string): DBResult<TResultKind, T[]> {\n\t\tconst sequel = typeof query === 'string' ? sql.raw(query) : query.getSQL();\n\t\tif (this.resultKind === 'async') {\n\t\t\treturn new SQLiteRaw(\n\t\t\t\tasync () => this.session.values(sequel),\n\t\t\t\t() => sequel,\n\t\t\t\t'values',\n\t\t\t\tthis.dialect as SQLiteAsyncDialect,\n\t\t\t\tthis.session.extractRawValuesValueFromBatchResult.bind(this.session),\n\t\t\t) as any;\n\t\t}\n\t\treturn this.session.values(sequel) as DBResult<TResultKind, T[]>;\n\t}\n\n\ttransaction<T>(\n\t\ttransaction: (tx: SQLiteTransaction<TResultKind, TRunResult, TFullSchema, TSchema>) => Result<TResultKind, T>,\n\t\tconfig?: SQLiteTransactionConfig,\n\t): Result<TResultKind, T> {\n\t\treturn this.session.transaction(transaction, config);\n\t}\n}\n\nexport type SQLiteWithReplicas<Q> = Q & { $primary: Q };\n\nexport const withReplicas = <\n\tTResultKind extends 'sync' | 'async',\n\tTRunResult,\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n\tQ extends BaseSQLiteDatabase<\n\t\tTResultKind,\n\t\tTRunResult,\n\t\tTFullSchema,\n\t\tTSchema extends Record<string, unknown> ? ExtractTablesWithRelations<TFullSchema> : TSchema\n\t>,\n>(\n\tprimary: Q,\n\treplicas: [Q, ...Q[]],\n\tgetReplica: (replicas: Q[]) => Q = () => replicas[Math.floor(Math.random() * replicas.length)]!,\n): SQLiteWithReplicas<Q> => {\n\tconst select: Q['select'] = (...args: []) => getReplica(replicas).select(...args);\n\tconst selectDistinct: Q['selectDistinct'] = (...args: []) => getReplica(replicas).selectDistinct(...args);\n\tconst $with: Q['with'] = (...args: []) => getReplica(replicas).with(...args);\n\n\tconst update: Q['update'] = (...args: [any]) => primary.update(...args);\n\tconst insert: Q['insert'] = (...args: [any]) => primary.insert(...args);\n\tconst $delete: Q['delete'] = (...args: [any]) => primary.delete(...args);\n\tconst run: Q['run'] = (...args: [any]) => primary.run(...args);\n\tconst all: Q['all'] = (...args: [any]) => primary.all(...args);\n\tconst get: Q['get'] = (...args: [any]) => primary.get(...args);\n\tconst values: Q['values'] = (...args: [any]) => primary.values(...args);\n\tconst transaction: Q['transaction'] = (...args: [any]) => primary.transaction(...args);\n\n\treturn {\n\t\t...primary,\n\t\tupdate,\n\t\tinsert,\n\t\tdelete: $delete,\n\t\trun,\n\t\tall,\n\t\tget,\n\t\tvalues,\n\t\ttransaction,\n\t\t$primary: primary,\n\t\tselect,\n\t\tselectDistinct,\n\t\twith: $with,\n\t\tget query() {\n\t\t\treturn getReplica(replicas).query;\n\t\t},\n\t};\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3182, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3188, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/foreign-keys.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport { TableName } from '~/table.utils.ts';\nimport type { AnySQLiteColumn, SQLiteColumn } from './columns/index.ts';\nimport type { SQLiteTable } from './table.ts';\n\nexport type UpdateDeleteAction = 'cascade' | 'restrict' | 'no action' | 'set null' | 'set default';\n\nexport type Reference = () => {\n\treadonly name?: string;\n\treadonly columns: SQLiteColumn[];\n\treadonly foreignTable: SQLiteTable;\n\treadonly foreignColumns: SQLiteColumn[];\n};\n\nexport class ForeignKeyBuilder {\n\tstatic readonly [entityKind]: string = 'SQLiteForeignKeyBuilder';\n\n\tdeclare _: {\n\t\tbrand: 'SQLiteForeignKeyBuilder';\n\t\tforeignTableName: 'TForeignTableName';\n\t};\n\n\t/** @internal */\n\treference: Reference;\n\n\t/** @internal */\n\t_onUpdate: UpdateDeleteAction | undefined;\n\n\t/** @internal */\n\t_onDelete: UpdateDeleteAction | undefined;\n\n\tconstructor(\n\t\tconfig: () => {\n\t\t\tname?: string;\n\t\t\tcolumns: SQLiteColumn[];\n\t\t\tforeignColumns: SQLiteColumn[];\n\t\t},\n\t\tactions?: {\n\t\t\tonUpdate?: UpdateDeleteAction;\n\t\t\tonDelete?: UpdateDeleteAction;\n\t\t} | undefined,\n\t) {\n\t\tthis.reference = () => {\n\t\t\tconst { name, columns, foreignColumns } = config();\n\t\t\treturn { name, columns, foreignTable: foreignColumns[0]!.table as SQLiteTable, foreignColumns };\n\t\t};\n\t\tif (actions) {\n\t\t\tthis._onUpdate = actions.onUpdate;\n\t\t\tthis._onDelete = actions.onDelete;\n\t\t}\n\t}\n\n\tonUpdate(action: UpdateDeleteAction): this {\n\t\tthis._onUpdate = action;\n\t\treturn this;\n\t}\n\n\tonDelete(action: UpdateDeleteAction): this {\n\t\tthis._onDelete = action;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tbuild(table: SQLiteTable): ForeignKey {\n\t\treturn new ForeignKey(table, this);\n\t}\n}\n\nexport class ForeignKey {\n\tstatic readonly [entityKind]: string = 'SQLiteForeignKey';\n\n\treadonly reference: Reference;\n\treadonly onUpdate: UpdateDeleteAction | undefined;\n\treadonly onDelete: UpdateDeleteAction | undefined;\n\n\tconstructor(readonly table: SQLiteTable, builder: ForeignKeyBuilder) {\n\t\tthis.reference = builder.reference;\n\t\tthis.onUpdate = builder._onUpdate;\n\t\tthis.onDelete = builder._onDelete;\n\t}\n\n\tgetName(): string {\n\t\tconst { name, columns, foreignColumns } = this.reference();\n\t\tconst columnNames = columns.map((column) => column.name);\n\t\tconst foreignColumnNames = foreignColumns.map((column) => column.name);\n\t\tconst chunks = [\n\t\t\tthis.table[TableName],\n\t\t\t...columnNames,\n\t\t\tforeignColumns[0]!.table[TableName],\n\t\t\t...foreignColumnNames,\n\t\t];\n\t\treturn name ?? `${chunks.join('_')}_fk`;\n\t}\n}\n\ntype ColumnsWithTable<\n\tTTableName extends string,\n\tTColumns extends SQLiteColumn[],\n> = { [Key in keyof TColumns]: AnySQLiteColumn<{ tableName: TTableName }> };\n\n/**\n * @deprecated please use `foreignKey({ columns: [], foreignColumns: [] })` syntax without callback\n * @param config\n * @returns\n */\nexport function foreignKey<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends [AnySQLiteColumn<{ tableName: TTableName }>, ...AnySQLiteColumn<{ tableName: TTableName }>[]],\n>(\n\tconfig: () => {\n\t\tname?: string;\n\t\tcolumns: TColumns;\n\t\tforeignColumns: ColumnsWithTable<TForeignTableName, TColumns>;\n\t},\n): ForeignKeyBuilder;\nexport function foreignKey<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends [AnySQLiteColumn<{ tableName: TTableName }>, ...AnySQLiteColumn<{ tableName: TTableName }>[]],\n>(\n\tconfig: {\n\t\tname?: string;\n\t\tcolumns: TColumns;\n\t\tforeignColumns: ColumnsWithTable<TForeignTableName, TColumns>;\n\t},\n): ForeignKeyBuilder;\nexport function foreignKey(\n\tconfig: any,\n): ForeignKeyBuilder {\n\tfunction mappedConfig() {\n\t\tif (typeof config === 'function') {\n\t\t\tconst { name, columns, foreignColumns } = config();\n\t\t\treturn {\n\t\t\t\tname,\n\t\t\t\tcolumns,\n\t\t\t\tforeignColumns,\n\t\t\t};\n\t\t}\n\t\treturn config;\n\t}\n\n\treturn new ForeignKeyBuilder(mappedConfig);\n}\n"],"names":[],"mappings":";;;;;AAAA,SAAS,kBAAkB;AAC3B,SAAS,iBAAiB;;;AAanB,MAAM,kBAAkB;IAC9B,OAAA,0IAAiB,aAAU,CAAA,GAAY,0BAAA;IAAA,cAAA,GAQvC,UAAA;IAAA,cAAA,GAGA,UAAA;IAAA,cAAA,GAGA,UAAA;IAEA,YACC,MAAA,EAKA,OAAA,CAIC;QACD,IAAA,CAAK,SAAA,GAAY,MAAM;YACtB,MAAM,EAAE,IAAA,EAAM,OAAA,EAAS,cAAA,CAAe,CAAA,GAAI,OAAO;YACjD,OAAO;gBAAE;gBAAM;gBAAS,cAAc,cAAA,CAAe,CAAC,CAAA,CAAG,KAAA;gBAAsB;YAAe;QAC/F;QACA,IAAI,SAAS;YACZ,IAAA,CAAK,SAAA,GAAY,QAAQ,QAAA;YACzB,IAAA,CAAK,SAAA,GAAY,QAAQ,QAAA;QAC1B;IACD;IAEA,SAAS,MAAA,EAAkC;QAC1C,IAAA,CAAK,SAAA,GAAY;QACjB,OAAO,IAAA;IACR;IAEA,SAAS,MAAA,EAAkC;QAC1C,IAAA,CAAK,SAAA,GAAY;QACjB,OAAO,IAAA;IACR;IAAA,cAAA,GAGA,MAAM,KAAA,EAAgC;QACrC,OAAO,IAAI,WAAW,OAAO,IAAI;IAClC;AACD;AAEO,MAAM,WAAW;IAOvB,YAAqB,KAAA,EAAoB,OAAA,CAA4B;QAAhD,IAAA,CAAA,KAAA,GAAA;QACpB,IAAA,CAAK,SAAA,GAAY,QAAQ,SAAA;QACzB,IAAA,CAAK,QAAA,GAAW,QAAQ,SAAA;QACxB,IAAA,CAAK,QAAA,GAAW,QAAQ,SAAA;IACzB;IAVA,OAAA,0IAAiB,aAAU,CAAA,GAAY,mBAAA;IAE9B,UAAA;IACA,SAAA;IACA,SAAA;IAQT,UAAkB;QACjB,MAAM,EAAE,IAAA,EAAM,OAAA,EAAS,cAAA,CAAe,CAAA,GAAI,IAAA,CAAK,SAAA,CAAU;QACzD,MAAM,cAAc,QAAQ,GAAA,CAAI,CAAC,SAAW,OAAO,IAAI;QACvD,MAAM,qBAAqB,eAAe,GAAA,CAAI,CAAC,SAAW,OAAO,IAAI;QACrE,MAAM,SAAS;YACd,IAAA,CAAK,KAAA,kJAAM,YAAS,CAAA;eACjB;YACH,cAAA,CAAe,CAAC,CAAA,CAAG,KAAA,kJAAM,YAAS,CAAA;eAC/B;SACJ;QACA,OAAO,QAAQ,GAAG,OAAO,IAAA,CAAK,GAAG,CAAC,CAAA,GAAA,CAAA;IACnC;AACD;AAkCO,SAAS,WACf,MAAA,EACoB;IACpB,SAAS,eAAe;QACvB,IAAI,OAAO,WAAW,YAAY;YACjC,MAAM,EAAE,IAAA,EAAM,OAAA,EAAS,cAAA,CAAe,CAAA,GAAI,OAAO;YACjD,OAAO;gBACN;gBACA;gBACA;YACD;QACD;QACA,OAAO;IACR;IAEA,OAAO,IAAI,kBAAkB,YAAY;AAC1C","ignoreList":[0]}},
    {"offset": {"line": 3269, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3275, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/unique-constraint.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport { TableName } from '~/table.utils.ts';\nimport type { SQLiteColumn } from './columns/common.ts';\nimport type { SQLiteTable } from './table.ts';\n\nexport function uniqueKeyName(table: SQLiteTable, columns: string[]) {\n\treturn `${table[TableName]}_${columns.join('_')}_unique`;\n}\n\nexport function unique(name?: string): UniqueOnConstraintBuilder {\n\treturn new UniqueOnConstraintBuilder(name);\n}\n\nexport class UniqueConstraintBuilder {\n\tstatic readonly [entityKind]: string = 'SQLiteUniqueConstraintBuilder';\n\n\t/** @internal */\n\tcolumns: SQLiteColumn[];\n\n\tconstructor(\n\t\tcolumns: SQLiteColumn[],\n\t\tprivate name?: string,\n\t) {\n\t\tthis.columns = columns;\n\t}\n\n\t/** @internal */\n\tbuild(table: SQLiteTable): UniqueConstraint {\n\t\treturn new UniqueConstraint(table, this.columns, this.name);\n\t}\n}\n\nexport class UniqueOnConstraintBuilder {\n\tstatic readonly [entityKind]: string = 'SQLiteUniqueOnConstraintBuilder';\n\n\t/** @internal */\n\tname?: string;\n\n\tconstructor(\n\t\tname?: string,\n\t) {\n\t\tthis.name = name;\n\t}\n\n\ton(...columns: [SQLiteColumn, ...SQLiteColumn[]]) {\n\t\treturn new UniqueConstraintBuilder(columns, this.name);\n\t}\n}\n\nexport class UniqueConstraint {\n\tstatic readonly [entityKind]: string = 'SQLiteUniqueConstraint';\n\n\treadonly columns: SQLiteColumn[];\n\treadonly name?: string;\n\n\tconstructor(readonly table: SQLiteTable, columns: SQLiteColumn[], name?: string) {\n\t\tthis.columns = columns;\n\t\tthis.name = name ?? uniqueKeyName(this.table, this.columns.map((column) => column.name));\n\t}\n\n\tgetName() {\n\t\treturn this.name;\n\t}\n}\n"],"names":[],"mappings":";;;;;;;AAAA,SAAS,kBAAkB;AAC3B,SAAS,iBAAiB;;;AAInB,SAAS,cAAc,KAAA,EAAoB,OAAA,EAAmB;IACpE,OAAO,GAAG,KAAA,kJAAM,YAAS,CAAC,CAAA,CAAA,EAAI,QAAQ,IAAA,CAAK,GAAG,CAAC,CAAA,OAAA,CAAA;AAChD;AAEO,SAAS,OAAO,IAAA,EAA0C;IAChE,OAAO,IAAI,0BAA0B,IAAI;AAC1C;AAEO,MAAM,wBAAwB;IAMpC,YACC,OAAA,EACQ,IAAA,CACP;QADO,IAAA,CAAA,IAAA,GAAA;QAER,IAAA,CAAK,OAAA,GAAU;IAChB;IAVA,OAAA,0IAAiB,aAAU,CAAA,GAAY,gCAAA;IAAA,cAAA,GAGvC,QAAA;IAAA,cAAA,GAUA,MAAM,KAAA,EAAsC;QAC3C,OAAO,IAAI,iBAAiB,OAAO,IAAA,CAAK,OAAA,EAAS,IAAA,CAAK,IAAI;IAC3D;AACD;AAEO,MAAM,0BAA0B;IACtC,OAAA,0IAAiB,aAAU,CAAA,GAAY,kCAAA;IAAA,cAAA,GAGvC,KAAA;IAEA,YACC,IAAA,CACC;QACD,IAAA,CAAK,IAAA,GAAO;IACb;IAEA,GAAA,GAAM,OAAA,EAA4C;QACjD,OAAO,IAAI,wBAAwB,SAAS,IAAA,CAAK,IAAI;IACtD;AACD;AAEO,MAAM,iBAAiB;IAM7B,YAAqB,KAAA,EAAoB,OAAA,EAAyB,IAAA,CAAe;QAA5D,IAAA,CAAA,KAAA,GAAA;QACpB,IAAA,CAAK,OAAA,GAAU;QACf,IAAA,CAAK,IAAA,GAAO,QAAQ,cAAc,IAAA,CAAK,KAAA,EAAO,IAAA,CAAK,OAAA,CAAQ,GAAA,CAAI,CAAC,SAAW,OAAO,IAAI,CAAC;IACxF;IARA,OAAA,0IAAiB,aAAU,CAAA,GAAY,yBAAA;IAE9B,QAAA;IACA,KAAA;IAOT,UAAU;QACT,OAAO,IAAA,CAAK,IAAA;IACb;AACD","ignoreList":[0]}},
    {"offset": {"line": 3328, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3334, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/columns/common.ts"],"sourcesContent":["import type {\n\tColumnBuilderBase,\n\tColumnBuilderBaseConfig,\n\tColumnBuilderExtraConfig,\n\tColumnBuilderRuntimeConfig,\n\tColumnDataType,\n\tHasGenerated,\n\tMakeColumnConfig,\n} from '~/column-builder.ts';\nimport { ColumnBuilder } from '~/column-builder.ts';\nimport { Column } from '~/column.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { SQL } from '~/sql/sql.ts';\nimport type { ForeignKey, UpdateDeleteAction } from '~/sqlite-core/foreign-keys.ts';\nimport { ForeignKeyBuilder } from '~/sqlite-core/foreign-keys.ts';\nimport type { AnySQLiteTable, SQLiteTable } from '~/sqlite-core/table.ts';\nimport type { Update } from '~/utils.ts';\nimport { uniqueKeyName } from '../unique-constraint.ts';\n\nexport interface ReferenceConfig {\n\tref: () => SQLiteColumn;\n\tactions: {\n\t\tonUpdate?: UpdateDeleteAction;\n\t\tonDelete?: UpdateDeleteAction;\n\t};\n}\n\nexport interface SQLiteColumnBuilderBase<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTypeConfig extends object = object,\n> extends ColumnBuilderBase<T, TTypeConfig & { dialect: 'sqlite' }> {}\n\nexport interface SQLiteGeneratedColumnConfig {\n\tmode?: 'virtual' | 'stored';\n}\n\nexport abstract class SQLiteColumnBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n\tTTypeConfig extends object = object,\n\tTExtraConfig extends ColumnBuilderExtraConfig = object,\n> extends ColumnBuilder<T, TRuntimeConfig, TTypeConfig & { dialect: 'sqlite' }, TExtraConfig>\n\timplements SQLiteColumnBuilderBase<T, TTypeConfig>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteColumnBuilder';\n\n\tprivate foreignKeyConfigs: ReferenceConfig[] = [];\n\n\treferences(\n\t\tref: ReferenceConfig['ref'],\n\t\tactions: ReferenceConfig['actions'] = {},\n\t): this {\n\t\tthis.foreignKeyConfigs.push({ ref, actions });\n\t\treturn this;\n\t}\n\n\tunique(\n\t\tname?: string,\n\t): this {\n\t\tthis.config.isUnique = true;\n\t\tthis.config.uniqueName = name;\n\t\treturn this;\n\t}\n\n\tgeneratedAlwaysAs(as: SQL | T['data'] | (() => SQL), config?: SQLiteGeneratedColumnConfig): HasGenerated<this, {\n\t\ttype: 'always';\n\t}> {\n\t\tthis.config.generated = {\n\t\t\tas,\n\t\t\ttype: 'always',\n\t\t\tmode: config?.mode ?? 'virtual',\n\t\t};\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tbuildForeignKeys(column: SQLiteColumn, table: SQLiteTable): ForeignKey[] {\n\t\treturn this.foreignKeyConfigs.map(({ ref, actions }) => {\n\t\t\treturn ((ref, actions) => {\n\t\t\t\tconst builder = new ForeignKeyBuilder(() => {\n\t\t\t\t\tconst foreignColumn = ref();\n\t\t\t\t\treturn { columns: [column], foreignColumns: [foreignColumn] };\n\t\t\t\t});\n\t\t\t\tif (actions.onUpdate) {\n\t\t\t\t\tbuilder.onUpdate(actions.onUpdate);\n\t\t\t\t}\n\t\t\t\tif (actions.onDelete) {\n\t\t\t\t\tbuilder.onDelete(actions.onDelete);\n\t\t\t\t}\n\t\t\t\treturn builder.build(table);\n\t\t\t})(ref, actions);\n\t\t});\n\t}\n\n\t/** @internal */\n\tabstract build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteColumn<MakeColumnConfig<T, TTableName>>;\n}\n\n// To understand how to use `SQLiteColumn` and `AnySQLiteColumn`, see `Column` and `AnyColumn` documentation.\nexport abstract class SQLiteColumn<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n> extends Column<T, TRuntimeConfig, { dialect: 'sqlite' }> {\n\tstatic override readonly [entityKind]: string = 'SQLiteColumn';\n\n\tconstructor(\n\t\toverride readonly table: SQLiteTable,\n\t\tconfig: ColumnBuilderRuntimeConfig<T['data'], TRuntimeConfig>,\n\t) {\n\t\tif (!config.uniqueName) {\n\t\t\tconfig.uniqueName = uniqueKeyName(table, [config.name]);\n\t\t}\n\t\tsuper(table, config);\n\t}\n}\n\nexport type AnySQLiteColumn<TPartial extends Partial<ColumnBaseConfig<ColumnDataType, string>> = {}> = SQLiteColumn<\n\tRequired<Update<ColumnBaseConfig<ColumnDataType, string>, TPartial>>\n>;\n"],"names":["ref","actions"],"mappings":";;;;AAYA,SAAS,kBAAkB;AAG3B,SAAS,yBAAyB;AANlC,SAAS,qBAAqB;AAS9B,SAAS,qBAAqB;AAR9B,SAAS,cAAc;;;;;;AA2BhB,MAAe,gLAKZ,gBAAA,CAEV;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,sBAAA;IAExC,oBAAuC,CAAC,CAAA,CAAA;IAEhD,WACC,GAAA,EACA,UAAsC,CAAC,CAAA,EAChC;QACP,IAAA,CAAK,iBAAA,CAAkB,IAAA,CAAK;YAAE;YAAK;QAAQ,CAAC;QAC5C,OAAO,IAAA;IACR;IAEA,OACC,IAAA,EACO;QACP,IAAA,CAAK,MAAA,CAAO,QAAA,GAAW;QACvB,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa;QACzB,OAAO,IAAA;IACR;IAEA,kBAAkB,EAAA,EAAmC,MAAA,EAElD;QACF,IAAA,CAAK,MAAA,CAAO,SAAA,GAAY;YACvB;YACA,MAAM;YACN,MAAM,QAAQ,QAAQ;QACvB;QACA,OAAO,IAAA;IACR;IAAA,cAAA,GAGA,iBAAiB,MAAA,EAAsB,KAAA,EAAkC;QACxE,OAAO,IAAA,CAAK,iBAAA,CAAkB,GAAA,CAAI,CAAC,EAAE,GAAA,EAAK,OAAA,CAAQ,CAAA,KAAM;YACvD,OAAA,CAAQ,CAACA,MAAKC,aAAY;gBACzB,MAAM,UAAU,wKAAI,oBAAA,CAAkB,MAAM;oBAC3C,MAAM,gBAAgBD,KAAI;oBAC1B,OAAO;wBAAE,SAAS;4BAAC,MAAM;yBAAA;wBAAG,gBAAgB;4BAAC,aAAa;yBAAA;oBAAE;gBAC7D,CAAC;gBACD,IAAIC,SAAQ,QAAA,EAAU;oBACrB,QAAQ,QAAA,CAASA,SAAQ,QAAQ;gBAClC;gBACA,IAAIA,SAAQ,QAAA,EAAU;oBACrB,QAAQ,QAAA,CAASA,SAAQ,QAAQ;gBAClC;gBACA,OAAO,QAAQ,KAAA,CAAM,KAAK;YAC3B,CAAA,EAAG,KAAK,OAAO;QAChB,CAAC;IACF;AAMD;AAGO,MAAe,8JAGZ,SAAA,CAAiD;IAG1D,YACmB,KAAA,EAClB,MAAA,CACC;QACD,IAAI,CAAC,OAAO,UAAA,EAAY;YACvB,OAAO,UAAA,gLAAa,gBAAA,EAAc,OAAO;gBAAC,OAAO,IAAI;aAAC;QACvD;QACA,KAAA,CAAM,OAAO,MAAM;QAND,IAAA,CAAA,KAAA,GAAA;IAOnB;IAVA,OAAA,0IAA0B,aAAU,CAAA,GAAY,eAAA;AAWjD","ignoreList":[0]}},
    {"offset": {"line": 3410, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3416, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/columns/blob.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnySQLiteTable } from '~/sqlite-core/table.ts';\nimport { type Equal, getColumnNameAndConfig } from '~/utils.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\ntype BlobMode = 'buffer' | 'json' | 'bigint';\n\nexport type SQLiteBigIntBuilderInitial<TName extends string> = SQLiteBigIntBuilder<{\n\tname: TName;\n\tdataType: 'bigint';\n\tcolumnType: 'SQLiteBigInt';\n\tdata: bigint;\n\tdriverParam: Buffer;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteBigIntBuilder<T extends ColumnBuilderBaseConfig<'bigint', 'SQLiteBigInt'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteBigIntBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'bigint', 'SQLiteBigInt');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteBigInt<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteBigInt<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any>);\n\t}\n}\n\nexport class SQLiteBigInt<T extends ColumnBaseConfig<'bigint', 'SQLiteBigInt'>> extends SQLiteColumn<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteBigInt';\n\n\tgetSQLType(): string {\n\t\treturn 'blob';\n\t}\n\n\toverride mapFromDriverValue(value: Buffer | Uint8Array): bigint {\n\t\treturn BigInt(Buffer.isBuffer(value) ? value.toString() : String.fromCodePoint(...value));\n\t}\n\n\toverride mapToDriverValue(value: bigint): Buffer {\n\t\treturn Buffer.from(value.toString());\n\t}\n}\n\nexport type SQLiteBlobJsonBuilderInitial<TName extends string> = SQLiteBlobJsonBuilder<{\n\tname: TName;\n\tdataType: 'json';\n\tcolumnType: 'SQLiteBlobJson';\n\tdata: unknown;\n\tdriverParam: Buffer;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteBlobJsonBuilder<T extends ColumnBuilderBaseConfig<'json', 'SQLiteBlobJson'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteBlobJsonBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'json', 'SQLiteBlobJson');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteBlobJson<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteBlobJson<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteBlobJson<T extends ColumnBaseConfig<'json', 'SQLiteBlobJson'>> extends SQLiteColumn<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteBlobJson';\n\n\tgetSQLType(): string {\n\t\treturn 'blob';\n\t}\n\n\toverride mapFromDriverValue(value: Buffer | Uint8Array): T['data'] {\n\t\treturn JSON.parse(Buffer.isBuffer(value) ? value.toString() : String.fromCodePoint(...value));\n\t}\n\n\toverride mapToDriverValue(value: T['data']): Buffer {\n\t\treturn Buffer.from(JSON.stringify(value));\n\t}\n}\n\nexport type SQLiteBlobBufferBuilderInitial<TName extends string> = SQLiteBlobBufferBuilder<{\n\tname: TName;\n\tdataType: 'buffer';\n\tcolumnType: 'SQLiteBlobBuffer';\n\tdata: Buffer;\n\tdriverParam: Buffer;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteBlobBufferBuilder<T extends ColumnBuilderBaseConfig<'buffer', 'SQLiteBlobBuffer'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteBlobBufferBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'buffer', 'SQLiteBlobBuffer');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteBlobBuffer<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteBlobBuffer<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any>);\n\t}\n}\n\nexport class SQLiteBlobBuffer<T extends ColumnBaseConfig<'buffer', 'SQLiteBlobBuffer'>> extends SQLiteColumn<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteBlobBuffer';\n\n\tgetSQLType(): string {\n\t\treturn 'blob';\n\t}\n}\n\nexport interface BlobConfig<TMode extends BlobMode = BlobMode> {\n\tmode: TMode;\n}\n\n/**\n *  It's recommended to use `text('...', { mode: 'json' })` instead of `blob` in JSON mode, because it supports JSON functions:\n * >All JSON functions currently throw an error if any of their arguments are BLOBs because BLOBs are reserved for a future enhancement in which BLOBs will store the binary encoding for JSON.\n *\n * https://www.sqlite.org/json1.html\n */\nexport function blob(): SQLiteBlobJsonBuilderInitial<''>;\nexport function blob<TMode extends BlobMode = BlobMode>(\n\tconfig?: BlobConfig<TMode>,\n): Equal<TMode, 'bigint'> extends true ? SQLiteBigIntBuilderInitial<''>\n\t: Equal<TMode, 'buffer'> extends true ? SQLiteBlobBufferBuilderInitial<''>\n\t: SQLiteBlobJsonBuilderInitial<''>;\nexport function blob<TName extends string, TMode extends BlobMode = BlobMode>(\n\tname: TName,\n\tconfig?: BlobConfig<TMode>,\n): Equal<TMode, 'bigint'> extends true ? SQLiteBigIntBuilderInitial<TName>\n\t: Equal<TMode, 'buffer'> extends true ? SQLiteBlobBufferBuilderInitial<TName>\n\t: SQLiteBlobJsonBuilderInitial<TName>;\nexport function blob(a?: string | BlobConfig, b?: BlobConfig) {\n\tconst { name, config } = getColumnNameAndConfig<BlobConfig | undefined>(a, b);\n\tif (config?.mode === 'json') {\n\t\treturn new SQLiteBlobJsonBuilder(name);\n\t}\n\tif (config?.mode === 'bigint') {\n\t\treturn new SQLiteBigIntBuilder(name);\n\t}\n\treturn new SQLiteBlobBufferBuilder(name);\n}\n"],"names":[],"mappings":";;;;;;;;;AAEA,SAAS,kBAAkB;AAG3B,SAAS,cAAc,2BAA2B;AADlD,SAAqB,8BAA8B;;;;AAc5C,MAAM,kMACJ,sBAAA,CACT;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,sBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,UAAU,cAAc;IACrC;IAAA,cAAA,GAGS,MACR,KAAA,EACgD;QAChD,OAAO,IAAI,aAA8C,OAAO,IAAA,CAAK,MAAyC;IAC/G;AACD;AAEO,MAAM,2LAA2E,eAAA,CAAgB;IACvG,OAAA,CAA0B,sJAAU,CAAA,GAAY,eAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;IAES,mBAAmB,KAAA,EAAoC;QAC/D,OAAO,OAAO,OAAO,QAAA,CAAS,KAAK,IAAI,MAAM,QAAA,CAAS,IAAI,OAAO,aAAA,CAAc,GAAG,KAAK,CAAC;IACzF;IAES,iBAAiB,KAAA,EAAuB;QAChD,OAAO,OAAO,IAAA,CAAK,MAAM,QAAA,CAAS,CAAC;IACpC;AACD;AAWO,MAAM,oMACJ,sBAAA,CACT;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,wBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,QAAQ,gBAAgB;IACrC;IAAA,cAAA,GAGS,MACR,KAAA,EACkD;QAClD,OAAO,IAAI,eACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,6LAA6E,eAAA,CAAgB;IACzG,OAAA,0IAA0B,aAAU,CAAA,GAAY,iBAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;IAES,mBAAmB,KAAA,EAAuC;QAClE,OAAO,KAAK,KAAA,CAAM,OAAO,QAAA,CAAS,KAAK,IAAI,MAAM,QAAA,CAAS,IAAI,OAAO,aAAA,CAAc,GAAG,KAAK,CAAC;IAC7F;IAES,iBAAiB,KAAA,EAA0B;QACnD,OAAO,OAAO,IAAA,CAAK,KAAK,SAAA,CAAU,KAAK,CAAC;IACzC;AACD;AAWO,MAAM,sMACJ,sBAAA,CACT;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,0BAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,UAAU,kBAAkB;IACzC;IAAA,cAAA,GAGS,MACR,KAAA,EACoD;QACpD,OAAO,IAAI,iBAAkD,OAAO,IAAA,CAAK,MAAyC;IACnH;AACD;AAEO,MAAM,+LAAmF,eAAA,CAAgB;IAC/G,OAAA,yIAA0B,cAAU,CAAA,GAAY,mBAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;AACD;AAwBO,SAAS,KAAK,CAAA,EAAyB,CAAA,EAAgB;IAC7D,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,IAAI,oKAAA,EAA+C,GAAG,CAAC;IAC5E,IAAI,QAAQ,SAAS,QAAQ;QAC5B,OAAO,IAAI,sBAAsB,IAAI;IACtC;IACA,IAAI,QAAQ,SAAS,UAAU;QAC9B,OAAO,IAAI,oBAAoB,IAAI;IACpC;IACA,OAAO,IAAI,wBAAwB,IAAI;AACxC","ignoreList":[0]}},
    {"offset": {"line": 3500, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3506, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/columns/custom.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { SQL } from '~/sql/sql.ts';\nimport type { AnySQLiteTable } from '~/sqlite-core/table.ts';\nimport { type Equal, getColumnNameAndConfig } from '~/utils.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\nexport type ConvertCustomConfig<TName extends string, T extends Partial<CustomTypeValues>> =\n\t& {\n\t\tname: TName;\n\t\tdataType: 'custom';\n\t\tcolumnType: 'SQLiteCustomColumn';\n\t\tdata: T['data'];\n\t\tdriverParam: T['driverData'];\n\t\tenumValues: undefined;\n\t}\n\t& (T['notNull'] extends true ? { notNull: true } : {})\n\t& (T['default'] extends true ? { hasDefault: true } : {});\n\nexport interface SQLiteCustomColumnInnerConfig {\n\tcustomTypeValues: CustomTypeValues;\n}\n\nexport class SQLiteCustomColumnBuilder<T extends ColumnBuilderBaseConfig<'custom', 'SQLiteCustomColumn'>>\n\textends SQLiteColumnBuilder<\n\t\tT,\n\t\t{\n\t\t\tfieldConfig: CustomTypeValues['config'];\n\t\t\tcustomTypeParams: CustomTypeParams<any>;\n\t\t},\n\t\t{\n\t\t\tsqliteColumnBuilderBrand: 'SQLiteCustomColumnBuilderBrand';\n\t\t}\n\t>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteCustomColumnBuilder';\n\n\tconstructor(\n\t\tname: T['name'],\n\t\tfieldConfig: CustomTypeValues['config'],\n\t\tcustomTypeParams: CustomTypeParams<any>,\n\t) {\n\t\tsuper(name, 'custom', 'SQLiteCustomColumn');\n\t\tthis.config.fieldConfig = fieldConfig;\n\t\tthis.config.customTypeParams = customTypeParams;\n\t}\n\n\t/** @internal */\n\tbuild<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteCustomColumn<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteCustomColumn<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteCustomColumn<T extends ColumnBaseConfig<'custom', 'SQLiteCustomColumn'>> extends SQLiteColumn<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteCustomColumn';\n\n\tprivate sqlName: string;\n\tprivate mapTo?: (value: T['data']) => T['driverParam'];\n\tprivate mapFrom?: (value: T['driverParam']) => T['data'];\n\n\tconstructor(\n\t\ttable: AnySQLiteTable<{ name: T['tableName'] }>,\n\t\tconfig: SQLiteCustomColumnBuilder<T>['config'],\n\t) {\n\t\tsuper(table, config);\n\t\tthis.sqlName = config.customTypeParams.dataType(config.fieldConfig);\n\t\tthis.mapTo = config.customTypeParams.toDriver;\n\t\tthis.mapFrom = config.customTypeParams.fromDriver;\n\t}\n\n\tgetSQLType(): string {\n\t\treturn this.sqlName;\n\t}\n\n\toverride mapFromDriverValue(value: T['driverParam']): T['data'] {\n\t\treturn typeof this.mapFrom === 'function' ? this.mapFrom(value) : value as T['data'];\n\t}\n\n\toverride mapToDriverValue(value: T['data']): T['driverParam'] {\n\t\treturn typeof this.mapTo === 'function' ? this.mapTo(value) : value as T['data'];\n\t}\n}\n\nexport type CustomTypeValues = {\n\t/**\n\t * Required type for custom column, that will infer proper type model\n\t *\n\t * Examples:\n\t *\n\t * If you want your column to be `string` type after selecting/or on inserting - use `data: string`. Like `text`, `varchar`\n\t *\n\t * If you want your column to be `number` type after selecting/or on inserting - use `data: number`. Like `integer`\n\t */\n\tdata: unknown;\n\n\t/**\n\t * Type helper, that represents what type database driver is accepting for specific database data type\n\t */\n\tdriverData?: unknown;\n\n\t/**\n\t * What config type should be used for {@link CustomTypeParams} `dataType` generation\n\t */\n\tconfig?: Record<string, any>;\n\n\t/**\n\t * Whether the config argument should be required or not\n\t * @default false\n\t */\n\tconfigRequired?: boolean;\n\n\t/**\n\t * If your custom data type should be notNull by default you can use `notNull: true`\n\t *\n\t * @example\n\t * const customSerial = customType<{ data: number, notNull: true, default: true }>({\n\t * \t  dataType() {\n\t * \t    return 'serial';\n\t *    },\n\t * });\n\t */\n\tnotNull?: boolean;\n\n\t/**\n\t * If your custom data type has default you can use `default: true`\n\t *\n\t * @example\n\t * const customSerial = customType<{ data: number, notNull: true, default: true }>({\n\t * \t  dataType() {\n\t * \t    return 'serial';\n\t *    },\n\t * });\n\t */\n\tdefault?: boolean;\n};\n\nexport interface CustomTypeParams<T extends CustomTypeValues> {\n\t/**\n\t * Database data type string representation, that is used for migrations\n\t * @example\n\t * ```\n\t * `jsonb`, `text`\n\t * ```\n\t *\n\t * If database data type needs additional params you can use them from `config` param\n\t * @example\n\t * ```\n\t * `varchar(256)`, `numeric(2,3)`\n\t * ```\n\t *\n\t * To make `config` be of specific type please use config generic in {@link CustomTypeValues}\n\t *\n\t * @example\n\t * Usage example\n\t * ```\n\t *   dataType() {\n\t *     return 'boolean';\n\t *   },\n\t * ```\n\t * Or\n\t * ```\n\t *   dataType(config) {\n\t * \t   return typeof config.length !== 'undefined' ? `varchar(${config.length})` : `varchar`;\n\t * \t }\n\t * ```\n\t */\n\tdataType: (config: T['config'] | (Equal<T['configRequired'], true> extends true ? never : undefined)) => string;\n\n\t/**\n\t * Optional mapping function, between user input and driver\n\t * @example\n\t * For example, when using jsonb we need to map JS/TS object to string before writing to database\n\t * ```\n\t * toDriver(value: TData): string {\n\t * \t return JSON.stringify(value);\n\t * }\n\t * ```\n\t */\n\ttoDriver?: (value: T['data']) => T['driverData'] | SQL;\n\n\t/**\n\t * Optional mapping function, that is responsible for data mapping from database to JS/TS code\n\t * @example\n\t * For example, when using timestamp we need to map string Date representation to JS Date\n\t * ```\n\t * fromDriver(value: string): Date {\n\t * \treturn new Date(value);\n\t * },\n\t * ```\n\t */\n\tfromDriver?: (value: T['driverData']) => T['data'];\n}\n\n/**\n * Custom sqlite database data type generator\n */\nexport function customType<T extends CustomTypeValues = CustomTypeValues>(\n\tcustomTypeParams: CustomTypeParams<T>,\n): Equal<T['configRequired'], true> extends true ? {\n\t\t<TConfig extends Record<string, any> & T['config']>(\n\t\t\tfieldConfig: TConfig,\n\t\t): SQLiteCustomColumnBuilder<ConvertCustomConfig<'', T>>;\n\t\t<TName extends string>(\n\t\t\tdbName: TName,\n\t\t\tfieldConfig: T['config'],\n\t\t): SQLiteCustomColumnBuilder<ConvertCustomConfig<TName, T>>;\n\t}\n\t: {\n\t\t(): SQLiteCustomColumnBuilder<ConvertCustomConfig<'', T>>;\n\t\t<TConfig extends Record<string, any> & T['config']>(\n\t\t\tfieldConfig?: TConfig,\n\t\t): SQLiteCustomColumnBuilder<ConvertCustomConfig<'', T>>;\n\t\t<TName extends string>(\n\t\t\tdbName: TName,\n\t\t\tfieldConfig?: T['config'],\n\t\t): SQLiteCustomColumnBuilder<ConvertCustomConfig<TName, T>>;\n\t}\n{\n\treturn <TName extends string>(\n\t\ta?: TName | T['config'],\n\t\tb?: T['config'],\n\t): SQLiteCustomColumnBuilder<ConvertCustomConfig<TName, T>> => {\n\t\tconst { name, config } = getColumnNameAndConfig<T['config']>(a, b);\n\t\treturn new SQLiteCustomColumnBuilder(\n\t\t\tname as ConvertCustomConfig<TName, T>['name'],\n\t\t\tconfig,\n\t\t\tcustomTypeParams,\n\t\t);\n\t};\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAI3B,SAAS,cAAc,2BAA2B;AADlD,SAAqB,8BAA8B;;;;AAmB5C,MAAM,wMACJ,sBAAA,CAUT;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,4BAAA;IAEhD,YACC,IAAA,EACA,WAAA,EACA,gBAAA,CACC;QACD,KAAA,CAAM,MAAM,UAAU,oBAAoB;QAC1C,IAAA,CAAK,MAAA,CAAO,WAAA,GAAc;QAC1B,IAAA,CAAK,MAAA,CAAO,gBAAA,GAAmB;IAChC;IAAA,cAAA,GAGA,MACC,KAAA,EACsD;QACtD,OAAO,IAAI,mBACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,iMAAuF,eAAA,CAAgB;IACnH,OAAA,0IAA0B,aAAU,CAAA,GAAY,qBAAA;IAExC,QAAA;IACA,MAAA;IACA,QAAA;IAER,YACC,KAAA,EACA,MAAA,CACC;QACD,KAAA,CAAM,OAAO,MAAM;QACnB,IAAA,CAAK,OAAA,GAAU,OAAO,gBAAA,CAAiB,QAAA,CAAS,OAAO,WAAW;QAClE,IAAA,CAAK,KAAA,GAAQ,OAAO,gBAAA,CAAiB,QAAA;QACrC,IAAA,CAAK,OAAA,GAAU,OAAO,gBAAA,CAAiB,UAAA;IACxC;IAEA,aAAqB;QACpB,OAAO,IAAA,CAAK,OAAA;IACb;IAES,mBAAmB,KAAA,EAAoC;QAC/D,OAAO,OAAO,IAAA,CAAK,OAAA,KAAY,aAAa,IAAA,CAAK,OAAA,CAAQ,KAAK,IAAI;IACnE;IAES,iBAAiB,KAAA,EAAoC;QAC7D,OAAO,OAAO,IAAA,CAAK,KAAA,KAAU,aAAa,IAAA,CAAK,KAAA,CAAM,KAAK,IAAI;IAC/D;AACD;AAmHO,SAAS,WACf,gBAAA,EAoBD;IACC,OAAO,CACN,GACA,MAC8D;QAC9D,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,+IAAI,yBAAA,EAAoC,GAAG,CAAC;QACjE,OAAO,IAAI,0BACV,MACA,QACA;IAEF;AACD","ignoreList":[0]}},
    {"offset": {"line": 3557, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3563, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/columns/integer.ts"],"sourcesContent":["import type {\n\tColumnBuilderBaseConfig,\n\tColumnBuilderRuntimeConfig,\n\tColumnDataType,\n\tHasDefault,\n\tIsPrimaryKey,\n\tMakeColumnConfig,\n\tNotNull,\n} from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport { sql } from '~/sql/sql.ts';\nimport type { OnConflict } from '~/sqlite-core/utils.ts';\nimport { type Equal, getColumnNameAndConfig, type Or } from '~/utils.ts';\nimport type { AnySQLiteTable } from '../table.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\nexport interface PrimaryKeyConfig {\n\tautoIncrement?: boolean;\n\tonConflict?: OnConflict;\n}\n\nexport abstract class SQLiteBaseIntegerBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n> extends SQLiteColumnBuilder<\n\tT,\n\tTRuntimeConfig & { autoIncrement: boolean },\n\t{},\n\t{ primaryKeyHasDefault: true }\n> {\n\tstatic override readonly [entityKind]: string = 'SQLiteBaseIntegerBuilder';\n\n\tconstructor(name: T['name'], dataType: T['dataType'], columnType: T['columnType']) {\n\t\tsuper(name, dataType, columnType);\n\t\tthis.config.autoIncrement = false;\n\t}\n\n\toverride primaryKey(config?: PrimaryKeyConfig): IsPrimaryKey<HasDefault<NotNull<this>>> {\n\t\tif (config?.autoIncrement) {\n\t\t\tthis.config.autoIncrement = true;\n\t\t}\n\t\tthis.config.hasDefault = true;\n\t\treturn super.primaryKey() as IsPrimaryKey<HasDefault<NotNull<this>>>;\n\t}\n\n\t/** @internal */\n\tabstract override build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteBaseInteger<MakeColumnConfig<T, TTableName>>;\n}\n\nexport abstract class SQLiteBaseInteger<\n\tT extends ColumnBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n> extends SQLiteColumn<T, TRuntimeConfig & { autoIncrement: boolean }> {\n\tstatic override readonly [entityKind]: string = 'SQLiteBaseInteger';\n\n\treadonly autoIncrement: boolean = this.config.autoIncrement;\n\n\tgetSQLType(): string {\n\t\treturn 'integer';\n\t}\n}\n\nexport type SQLiteIntegerBuilderInitial<TName extends string> = SQLiteIntegerBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'SQLiteInteger';\n\tdata: number;\n\tdriverParam: number;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteIntegerBuilder<T extends ColumnBuilderBaseConfig<'number', 'SQLiteInteger'>>\n\textends SQLiteBaseIntegerBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteIntegerBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'number', 'SQLiteInteger');\n\t}\n\n\tbuild<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteInteger<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteInteger<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteInteger<T extends ColumnBaseConfig<'number', 'SQLiteInteger'>> extends SQLiteBaseInteger<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteInteger';\n}\n\nexport type SQLiteTimestampBuilderInitial<TName extends string> = SQLiteTimestampBuilder<{\n\tname: TName;\n\tdataType: 'date';\n\tcolumnType: 'SQLiteTimestamp';\n\tdata: Date;\n\tdriverParam: number;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteTimestampBuilder<T extends ColumnBuilderBaseConfig<'date', 'SQLiteTimestamp'>>\n\textends SQLiteBaseIntegerBuilder<T, { mode: 'timestamp' | 'timestamp_ms' }>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteTimestampBuilder';\n\n\tconstructor(name: T['name'], mode: 'timestamp' | 'timestamp_ms') {\n\t\tsuper(name, 'date', 'SQLiteTimestamp');\n\t\tthis.config.mode = mode;\n\t}\n\n\t/**\n\t * @deprecated Use `default()` with your own expression instead.\n\t *\n\t * Adds `DEFAULT (cast((julianday('now') - 2440587.5)*86400000 as integer))` to the column, which is the current epoch timestamp in milliseconds.\n\t */\n\tdefaultNow(): HasDefault<this> {\n\t\treturn this.default(sql`(cast((julianday('now') - 2440587.5)*86400000 as integer))`) as any;\n\t}\n\n\tbuild<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteTimestamp<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteTimestamp<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteTimestamp<T extends ColumnBaseConfig<'date', 'SQLiteTimestamp'>>\n\textends SQLiteBaseInteger<T, { mode: 'timestamp' | 'timestamp_ms' }>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteTimestamp';\n\n\treadonly mode: 'timestamp' | 'timestamp_ms' = this.config.mode;\n\n\toverride mapFromDriverValue(value: number): Date {\n\t\tif (this.config.mode === 'timestamp') {\n\t\t\treturn new Date(value * 1000);\n\t\t}\n\t\treturn new Date(value);\n\t}\n\n\toverride mapToDriverValue(value: Date): number {\n\t\tconst unix = value.getTime();\n\t\tif (this.config.mode === 'timestamp') {\n\t\t\treturn Math.floor(unix / 1000);\n\t\t}\n\t\treturn unix;\n\t}\n}\n\nexport type SQLiteBooleanBuilderInitial<TName extends string> = SQLiteBooleanBuilder<{\n\tname: TName;\n\tdataType: 'boolean';\n\tcolumnType: 'SQLiteBoolean';\n\tdata: boolean;\n\tdriverParam: number;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteBooleanBuilder<T extends ColumnBuilderBaseConfig<'boolean', 'SQLiteBoolean'>>\n\textends SQLiteBaseIntegerBuilder<T, { mode: 'boolean' }>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteBooleanBuilder';\n\n\tconstructor(name: T['name'], mode: 'boolean') {\n\t\tsuper(name, 'boolean', 'SQLiteBoolean');\n\t\tthis.config.mode = mode;\n\t}\n\n\tbuild<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteBoolean<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteBoolean<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteBoolean<T extends ColumnBaseConfig<'boolean', 'SQLiteBoolean'>>\n\textends SQLiteBaseInteger<T, { mode: 'boolean' }>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteBoolean';\n\n\treadonly mode: 'boolean' = this.config.mode;\n\n\toverride mapFromDriverValue(value: number): boolean {\n\t\treturn Number(value) === 1;\n\t}\n\n\toverride mapToDriverValue(value: boolean): number {\n\t\treturn value ? 1 : 0;\n\t}\n}\n\nexport interface IntegerConfig<\n\tTMode extends 'number' | 'timestamp' | 'timestamp_ms' | 'boolean' =\n\t\t| 'number'\n\t\t| 'timestamp'\n\t\t| 'timestamp_ms'\n\t\t| 'boolean',\n> {\n\tmode: TMode;\n}\n\nexport function integer(): SQLiteIntegerBuilderInitial<''>;\nexport function integer<TMode extends IntegerConfig['mode']>(\n\tconfig?: IntegerConfig<TMode>,\n): Or<Equal<TMode, 'timestamp'>, Equal<TMode, 'timestamp_ms'>> extends true ? SQLiteTimestampBuilderInitial<''>\n\t: Equal<TMode, 'boolean'> extends true ? SQLiteBooleanBuilderInitial<''>\n\t: SQLiteIntegerBuilderInitial<''>;\nexport function integer<TName extends string, TMode extends IntegerConfig['mode']>(\n\tname: TName,\n\tconfig?: IntegerConfig<TMode>,\n): Or<Equal<TMode, 'timestamp'>, Equal<TMode, 'timestamp_ms'>> extends true ? SQLiteTimestampBuilderInitial<TName>\n\t: Equal<TMode, 'boolean'> extends true ? SQLiteBooleanBuilderInitial<TName>\n\t: SQLiteIntegerBuilderInitial<TName>;\nexport function integer(a?: string | IntegerConfig, b?: IntegerConfig) {\n\tconst { name, config } = getColumnNameAndConfig<IntegerConfig | undefined>(a, b);\n\tif (config?.mode === 'timestamp' || config?.mode === 'timestamp_ms') {\n\t\treturn new SQLiteTimestampBuilder(name, config.mode);\n\t}\n\tif (config?.mode === 'boolean') {\n\t\treturn new SQLiteBooleanBuilder(name, config.mode);\n\t}\n\treturn new SQLiteIntegerBuilder(name);\n}\n\nexport const int = integer;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3683, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3689, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/columns/numeric.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnySQLiteTable } from '~/sqlite-core/table.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\nexport type SQLiteNumericBuilderInitial<TName extends string> = SQLiteNumericBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'SQLiteNumeric';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteNumericBuilder<T extends ColumnBuilderBaseConfig<'string', 'SQLiteNumeric'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteNumericBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'string', 'SQLiteNumeric');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteNumeric<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteNumeric<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteNumeric<T extends ColumnBaseConfig<'string', 'SQLiteNumeric'>> extends SQLiteColumn<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteNumeric';\n\n\tgetSQLType(): string {\n\t\treturn 'numeric';\n\t}\n}\n\nexport function numeric(): SQLiteNumericBuilderInitial<''>;\nexport function numeric<TName extends string>(name: TName): SQLiteNumericBuilderInitial<TName>;\nexport function numeric(name?: string) {\n\treturn new SQLiteNumericBuilder(name ?? '');\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,cAAc,2BAA2B;;;AAW3C,MAAM,mMACJ,sBAAA,CACT;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,uBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,UAAU,eAAe;IACtC;IAAA,cAAA,GAGS,MACR,KAAA,EACiD;QACjD,OAAO,IAAI,cACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,4LAA6E,eAAA,CAAgB;IACzG,OAAA,0IAA0B,aAAU,CAAA,GAAY,gBAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;AACD;AAIO,SAAS,QAAQ,IAAA,EAAe;IACtC,OAAO,IAAI,qBAAqB,QAAQ,EAAE;AAC3C","ignoreList":[0]}},
    {"offset": {"line": 3718, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3724, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/columns/real.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnySQLiteTable } from '../table.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\nexport type SQLiteRealBuilderInitial<TName extends string> = SQLiteRealBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'SQLiteReal';\n\tdata: number;\n\tdriverParam: number;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteRealBuilder<T extends ColumnBuilderBaseConfig<'number', 'SQLiteReal'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteRealBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'number', 'SQLiteReal');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteReal<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteReal<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class SQLiteReal<T extends ColumnBaseConfig<'number', 'SQLiteReal'>> extends SQLiteColumn<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteReal';\n\n\tgetSQLType(): string {\n\t\treturn 'real';\n\t}\n}\n\nexport function real(): SQLiteRealBuilderInitial<''>;\nexport function real<TName extends string>(name: TName): SQLiteRealBuilderInitial<TName>;\nexport function real(name?: string) {\n\treturn new SQLiteRealBuilder(name ?? '');\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,cAAc,2BAA2B;;;AAW3C,MAAM,gMACJ,sBAAA,CACT;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,oBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,UAAU,YAAY;IACnC;IAAA,cAAA,GAGS,MACR,KAAA,EAC8C;QAC9C,OAAO,IAAI,WAA4C,OAAO,IAAA,CAAK,MAA8C;IAClH;AACD;AAEO,MAAM,yLAAuE,eAAA,CAAgB;IACnG,OAAA,0IAA0B,aAAU,CAAA,GAAY,aAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;AACD;AAIO,SAAS,KAAK,IAAA,EAAe;IACnC,OAAO,IAAI,kBAAkB,QAAQ,EAAE;AACxC","ignoreList":[0]}},
    {"offset": {"line": 3753, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3759, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/columns/text.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnySQLiteTable } from '~/sqlite-core/table.ts';\nimport { type Equal, getColumnNameAndConfig, type Writable } from '~/utils.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\nexport type SQLiteTextBuilderInitial<TName extends string, TEnum extends [string, ...string[]]> = SQLiteTextBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'SQLiteText';\n\tdata: TEnum[number];\n\tdriverParam: string;\n\tenumValues: TEnum;\n}>;\n\nexport class SQLiteTextBuilder<T extends ColumnBuilderBaseConfig<'string', 'SQLiteText'>> extends SQLiteColumnBuilder<\n\tT,\n\t{ length: number | undefined; enumValues: T['enumValues'] }\n> {\n\tstatic override readonly [entityKind]: string = 'SQLiteTextBuilder';\n\n\tconstructor(name: T['name'], config: SQLiteTextConfig<'text', T['enumValues']>) {\n\t\tsuper(name, 'string', 'SQLiteText');\n\t\tthis.config.enumValues = config.enum;\n\t\tthis.config.length = config.length;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteText<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteText<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class SQLiteText<T extends ColumnBaseConfig<'string', 'SQLiteText'>>\n\textends SQLiteColumn<T, { length: number | undefined; enumValues: T['enumValues'] }>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteText';\n\n\toverride readonly enumValues = this.config.enumValues;\n\n\treadonly length: number | undefined = this.config.length;\n\n\tconstructor(\n\t\ttable: AnySQLiteTable<{ name: T['tableName'] }>,\n\t\tconfig: SQLiteTextBuilder<T>['config'],\n\t) {\n\t\tsuper(table, config);\n\t}\n\n\tgetSQLType(): string {\n\t\treturn `text${this.config.length ? `(${this.config.length})` : ''}`;\n\t}\n}\n\nexport type SQLiteTextJsonBuilderInitial<TName extends string> = SQLiteTextJsonBuilder<{\n\tname: TName;\n\tdataType: 'json';\n\tcolumnType: 'SQLiteTextJson';\n\tdata: unknown;\n\tdriverParam: string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class SQLiteTextJsonBuilder<T extends ColumnBuilderBaseConfig<'json', 'SQLiteTextJson'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteTextJsonBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'json', 'SQLiteTextJson');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteTextJson<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteTextJson<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteTextJson<T extends ColumnBaseConfig<'json', 'SQLiteTextJson'>>\n\textends SQLiteColumn<T, { length: number | undefined; enumValues: T['enumValues'] }>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteTextJson';\n\n\tgetSQLType(): string {\n\t\treturn 'text';\n\t}\n\n\toverride mapFromDriverValue(value: string): T['data'] {\n\t\treturn JSON.parse(value);\n\t}\n\n\toverride mapToDriverValue(value: T['data']): string {\n\t\treturn JSON.stringify(value);\n\t}\n}\n\nexport type SQLiteTextConfig<\n\tTMode extends 'text' | 'json' = 'text' | 'json',\n\tTEnum extends readonly string[] | string[] | undefined = readonly string[] | string[] | undefined,\n> = TMode extends 'text' ? {\n\t\tmode?: TMode;\n\t\tlength?: number;\n\t\tenum?: TEnum;\n\t}\n\t: {\n\t\tmode?: TMode;\n\t};\n\nexport function text(): SQLiteTextBuilderInitial<'', [string, ...string[]]>;\nexport function text<\n\tU extends string,\n\tT extends Readonly<[U, ...U[]]>,\n\tTMode extends 'text' | 'json' = 'text' | 'json',\n>(\n\tconfig?: SQLiteTextConfig<TMode, T | Writable<T>>,\n): Equal<TMode, 'json'> extends true ? SQLiteTextJsonBuilderInitial<''>\n\t: SQLiteTextBuilderInitial<'', Writable<T>>;\nexport function text<\n\tTName extends string,\n\tU extends string,\n\tT extends Readonly<[U, ...U[]]>,\n\tTMode extends 'text' | 'json' = 'text' | 'json',\n>(\n\tname: TName,\n\tconfig?: SQLiteTextConfig<TMode, T | Writable<T>>,\n): Equal<TMode, 'json'> extends true ? SQLiteTextJsonBuilderInitial<TName>\n\t: SQLiteTextBuilderInitial<TName, Writable<T>>;\nexport function text(a?: string | SQLiteTextConfig, b: SQLiteTextConfig = {}): any {\n\tconst { name, config } = getColumnNameAndConfig<SQLiteTextConfig>(a, b);\n\tif (config.mode === 'json') {\n\t\treturn new SQLiteTextJsonBuilder(name);\n\t}\n\treturn new SQLiteTextBuilder(name, config as any);\n}\n"],"names":[],"mappings":";;;;;;;AAEA,SAAS,kBAAkB;AAG3B,SAAS,cAAc,2BAA2B;AADlD,SAAqB,8BAA6C;;;;AAY3D,MAAM,gMAAqF,sBAAA,CAGhG;IACD,OAAA,0IAA0B,aAAU,CAAA,GAAY,oBAAA;IAEhD,YAAY,IAAA,EAAiB,MAAA,CAAmD;QAC/E,KAAA,CAAM,MAAM,UAAU,YAAY;QAClC,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa,OAAO,IAAA;QAChC,IAAA,CAAK,MAAA,CAAO,MAAA,GAAS,OAAO,MAAA;IAC7B;IAAA,cAAA,GAGS,MACR,KAAA,EAC8C;QAC9C,OAAO,IAAI,WAA4C,OAAO,IAAA,CAAK,MAA8C;IAClH;AACD;AAEO,MAAM,yLACJ,eAAA,CACT;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,aAAA;IAE9B,aAAa,IAAA,CAAK,MAAA,CAAO,UAAA,CAAA;IAElC,SAA6B,IAAA,CAAK,MAAA,CAAO,MAAA,CAAA;IAElD,YACC,KAAA,EACA,MAAA,CACC;QACD,KAAA,CAAM,OAAO,MAAM;IACpB;IAEA,aAAqB;QACpB,OAAO,CAAA,IAAA,EAAO,IAAA,CAAK,MAAA,CAAO,MAAA,GAAS,CAAA,CAAA,EAAI,IAAA,CAAK,MAAA,CAAO,MAAM,CAAA,CAAA,CAAA,GAAM,EAAE,EAAA;IAClE;AACD;AAYO,MAAM,oMACJ,sBAAA,CACT;IACC,OAAA,yIAA0B,cAAU,CAAA,GAAY,wBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,QAAQ,gBAAgB;IACrC;IAAA,cAAA,GAGS,MACR,KAAA,EACkD;QAClD,OAAO,IAAI,eACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,6LACJ,eAAA,CACT;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,iBAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;IAES,mBAAmB,KAAA,EAA0B;QACrD,OAAO,KAAK,KAAA,CAAM,KAAK;IACxB;IAES,iBAAiB,KAAA,EAA0B;QACnD,OAAO,KAAK,SAAA,CAAU,KAAK;IAC5B;AACD;AAiCO,SAAS,KAAK,CAAA,EAA+B,IAAsB,CAAC,CAAA,EAAQ;IAClF,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,+IAAI,yBAAA,EAAyC,GAAG,CAAC;IACtE,IAAI,OAAO,IAAA,KAAS,QAAQ;QAC3B,OAAO,IAAI,sBAAsB,IAAI;IACtC;IACA,OAAO,IAAI,kBAAkB,MAAM,MAAa;AACjD","ignoreList":[0]}},
    {"offset": {"line": 3824, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3830, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/columns/all.ts"],"sourcesContent":["import { blob } from './blob.ts';\nimport { customType } from './custom.ts';\nimport { integer } from './integer.ts';\nimport { numeric } from './numeric.ts';\nimport { real } from './real.ts';\nimport { text } from './text.ts';\n\nexport function getSQLiteColumnBuilders() {\n\treturn {\n\t\tblob,\n\t\tcustomType,\n\t\tinteger,\n\t\tnumeric,\n\t\treal,\n\t\ttext,\n\t};\n}\n\nexport type SQLiteColumnBuilders = ReturnType<typeof getSQLiteColumnBuilders>;\n"],"names":[],"mappings":";;;AAAA,SAAS,YAAY;AACrB,SAAS,kBAAkB;AAC3B,SAAS,eAAe;AACxB,SAAS,eAAe;AACxB,SAAS,YAAY;AACrB,SAAS,YAAY;;;;;;;AAEd,SAAS,0BAA0B;IACzC,OAAO;kLACN,OAAA;0LACA,aAAA;wLACA,UAAA;wLACA,UAAA;kLACA,OAAA;kLACA,OAAA;IACD;AACD","ignoreList":[0]}},
    {"offset": {"line": 3857, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3863, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/table.ts"],"sourcesContent":["import type { BuildColumns, BuildExtraConfigColumns } from '~/column-builder.ts';\nimport { entityKind } from '~/entity.ts';\nimport { Table, type TableConfig as TableConfigBase, type UpdateTableConfig } from '~/table.ts';\nimport type { CheckBuilder } from './checks.ts';\nimport { getSQLiteColumnBuilders, type SQLiteColumnBuilders } from './columns/all.ts';\nimport type { SQLiteColumn, SQLiteColumnBuilder, SQLiteColumnBuilderBase } from './columns/common.ts';\nimport type { ForeignKey, ForeignKeyBuilder } from './foreign-keys.ts';\nimport type { IndexBuilder } from './indexes.ts';\nimport type { PrimaryKeyBuilder } from './primary-keys.ts';\nimport type { UniqueConstraintBuilder } from './unique-constraint.ts';\n\nexport type SQLiteTableExtraConfig = Record<\n\tstring,\n\t| IndexBuilder\n\t| CheckBuilder\n\t| ForeignKeyBuilder\n\t| PrimaryKeyBuilder\n\t| UniqueConstraintBuilder\n>;\n\nexport type TableConfig = TableConfigBase<SQLiteColumn<any>>;\n\n/** @internal */\nexport const InlineForeignKeys = Symbol.for('drizzle:SQLiteInlineForeignKeys');\n\nexport class SQLiteTable<T extends TableConfig = TableConfig> extends Table<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteTable';\n\n\t/** @internal */\n\tstatic override readonly Symbol = Object.assign({}, Table.Symbol, {\n\t\tInlineForeignKeys: InlineForeignKeys as typeof InlineForeignKeys,\n\t});\n\n\t/** @internal */\n\toverride [Table.Symbol.Columns]!: NonNullable<T['columns']>;\n\n\t/** @internal */\n\t[InlineForeignKeys]: ForeignKey[] = [];\n\n\t/** @internal */\n\toverride [Table.Symbol.ExtraConfigBuilder]:\n\t\t| ((self: Record<string, SQLiteColumn>) => SQLiteTableExtraConfig)\n\t\t| undefined = undefined;\n}\n\nexport type AnySQLiteTable<TPartial extends Partial<TableConfig> = {}> = SQLiteTable<\n\tUpdateTableConfig<TableConfig, TPartial>\n>;\n\nexport type SQLiteTableWithColumns<T extends TableConfig> =\n\t& SQLiteTable<T>\n\t& {\n\t\t[Key in keyof T['columns']]: T['columns'][Key];\n\t};\n\nexport interface SQLiteTableFn<TSchema extends string | undefined = undefined> {\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, SQLiteColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: TColumnsMap,\n\t\textraConfig?: (self: BuildColumns<TTableName, TColumnsMap, 'sqlite'>) => SQLiteTableExtraConfig,\n\t): SQLiteTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\t\tdialect: 'sqlite';\n\t}>;\n\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, SQLiteColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: (columnTypes: SQLiteColumnBuilders) => TColumnsMap,\n\t\textraConfig?: (self: BuildColumns<TTableName, TColumnsMap, 'sqlite'>) => SQLiteTableExtraConfig,\n\t): SQLiteTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\t\tdialect: 'sqlite';\n\t}>;\n}\n\nfunction sqliteTableBase<\n\tTTableName extends string,\n\tTColumnsMap extends Record<string, SQLiteColumnBuilderBase>,\n\tTSchema extends string | undefined,\n>(\n\tname: TTableName,\n\tcolumns: TColumnsMap | ((columnTypes: SQLiteColumnBuilders) => TColumnsMap),\n\textraConfig?: (self: BuildColumns<TTableName, TColumnsMap, 'sqlite'>) => SQLiteTableExtraConfig,\n\tschema?: TSchema,\n\tbaseName = name,\n): SQLiteTableWithColumns<{\n\tname: TTableName;\n\tschema: TSchema;\n\tcolumns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\tdialect: 'sqlite';\n}> {\n\tconst rawTable = new SQLiteTable<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\t\tdialect: 'sqlite';\n\t}>(name, schema, baseName);\n\n\tconst parsedColumns: TColumnsMap = typeof columns === 'function' ? columns(getSQLiteColumnBuilders()) : columns;\n\n\tconst builtColumns = Object.fromEntries(\n\t\tObject.entries(parsedColumns).map(([name, colBuilderBase]) => {\n\t\t\tconst colBuilder = colBuilderBase as SQLiteColumnBuilder;\n\t\t\tcolBuilder.setName(name);\n\t\t\tconst column = colBuilder.build(rawTable);\n\t\t\trawTable[InlineForeignKeys].push(...colBuilder.buildForeignKeys(column, rawTable));\n\t\t\treturn [name, column];\n\t\t}),\n\t) as unknown as BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\n\tconst table = Object.assign(rawTable, builtColumns);\n\n\ttable[Table.Symbol.Columns] = builtColumns;\n\ttable[Table.Symbol.ExtraConfigColumns] = builtColumns as unknown as BuildExtraConfigColumns<\n\t\tTTableName,\n\t\tTColumnsMap,\n\t\t'sqlite'\n\t>;\n\n\tif (extraConfig) {\n\t\ttable[SQLiteTable.Symbol.ExtraConfigBuilder] = extraConfig as (\n\t\t\tself: Record<string, SQLiteColumn>,\n\t\t) => SQLiteTableExtraConfig;\n\t}\n\n\treturn table;\n}\n\nexport const sqliteTable: SQLiteTableFn = (name, columns, extraConfig) => {\n\treturn sqliteTableBase(name, columns, extraConfig);\n};\n\nexport function sqliteTableCreator(customizeTableName: (name: string) => string): SQLiteTableFn {\n\treturn (name, columns, extraConfig) => {\n\t\treturn sqliteTableBase(customizeTableName(name) as typeof name, columns, extraConfig, undefined, name);\n\t};\n}\n"],"names":["name"],"mappings":";;;;;;AACA,SAAS,kBAAkB;AAC3B,SAAS,aAA0E;AAEnF,SAAS,+BAA0D;;;;AAmB5D,MAAM,oBAAoB,OAAO,GAAA,CAAI,iCAAiC;AAEtE,MAAM,4JAAyD,QAAA,CAAS;IAC9E,OAAA,0IAA0B,aAAU,CAAA,GAAY,cAAA;IAAA,cAAA,GAGhD,OAAyB,SAAS,OAAO,MAAA,CAAO,CAAC,2IAAG,QAAA,CAAM,MAAA,EAAQ;QACjE;IACD,CAAC,EAAA;IAAA,cAAA,GAGD,yIAAU,QAAA,CAAM,MAAA,CAAO,OAAO,CAAA,CAAA;IAAA,cAAA,GAG9B,CAAC,iBAAiB,CAAA,GAAkB,CAAC,CAAA,CAAA;IAAA,cAAA,GAGrC,yIAAU,QAAA,CAAM,MAAA,CAAO,kBAAkB,CAAA,GAE1B,KAAA,EAAA;AAChB;AA0CA,SAAS,gBAKR,IAAA,EACA,OAAA,EACA,WAAA,EACA,MAAA,EACA,WAAW,IAAA,EAMT;IACF,MAAM,WAAW,IAAI,YAKlB,MAAM,QAAQ,QAAQ;IAEzB,MAAM,gBAA6B,OAAO,YAAY,aAAa,+KAAQ,0BAAA,CAAwB,CAAC,KAAI;IAExG,MAAM,eAAe,OAAO,WAAA,CAC3B,OAAO,OAAA,CAAQ,aAAa,EAAE,GAAA,CAAI,CAAC,CAACA,OAAM,cAAc,CAAA,KAAM;QAC7D,MAAM,aAAa;QACnB,WAAW,OAAA,CAAQA,KAAI;QACvB,MAAM,SAAS,WAAW,KAAA,CAAM,QAAQ;QACxC,QAAA,CAAS,iBAAiB,CAAA,CAAE,IAAA,CAAK,GAAG,WAAW,gBAAA,CAAiB,QAAQ,QAAQ,CAAC;QACjF,OAAO;YAACA;YAAM,MAAM;SAAA;IACrB,CAAC;IAGF,MAAM,QAAQ,OAAO,MAAA,CAAO,UAAU,YAAY;IAElD,KAAA,yIAAM,QAAA,CAAM,MAAA,CAAO,OAAO,CAAA,GAAI;IAC9B,KAAA,yIAAM,QAAA,CAAM,MAAA,CAAO,kBAAkB,CAAA,GAAI;IAMzC,IAAI,aAAa;QAChB,KAAA,CAAM,YAAY,MAAA,CAAO,kBAAkB,CAAA,GAAI;IAGhD;IAEA,OAAO;AACR;AAEO,MAAM,cAA6B,CAAC,MAAM,SAAS,gBAAgB;IACzE,OAAO,gBAAgB,MAAM,SAAS,WAAW;AAClD;AAEO,SAAS,mBAAmB,kBAAA,EAA6D;IAC/F,OAAO,CAAC,MAAM,SAAS,gBAAgB;QACtC,OAAO,gBAAgB,mBAAmB,IAAI,GAAkB,SAAS,aAAa,KAAA,GAAW,IAAI;IACtG;AACD","ignoreList":[0]}},
    {"offset": {"line": 3916, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3922, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/primary-keys.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport type { AnySQLiteColumn, SQLiteColumn } from './columns/index.ts';\nimport { SQLiteTable } from './table.ts';\n\nexport function primaryKey<\n\tTTableName extends string,\n\tTColumn extends AnySQLiteColumn<{ tableName: TTableName }>,\n\tTColumns extends AnySQLiteColumn<{ tableName: TTableName }>[],\n>(config: { name?: string; columns: [TColumn, ...TColumns] }): PrimaryKeyBuilder;\n/**\n * @deprecated: Please use primaryKey({ columns: [] }) instead of this function\n * @param columns\n */\nexport function primaryKey<\n\tTTableName extends string,\n\tTColumns extends AnySQLiteColumn<{ tableName: TTableName }>[],\n>(...columns: TColumns): PrimaryKeyBuilder;\nexport function primaryKey(...config: any) {\n\tif (config[0].columns) {\n\t\treturn new PrimaryKeyBuilder(config[0].columns, config[0].name);\n\t}\n\treturn new PrimaryKeyBuilder(config);\n}\nexport class PrimaryKeyBuilder {\n\tstatic readonly [entityKind]: string = 'SQLitePrimaryKeyBuilder';\n\n\tdeclare _: {\n\t\tbrand: 'SQLitePrimaryKeyBuilder';\n\t};\n\n\t/** @internal */\n\tcolumns: SQLiteColumn[];\n\n\t/** @internal */\n\tname?: string;\n\n\tconstructor(\n\t\tcolumns: SQLiteColumn[],\n\t\tname?: string,\n\t) {\n\t\tthis.columns = columns;\n\t\tthis.name = name;\n\t}\n\n\t/** @internal */\n\tbuild(table: SQLiteTable): PrimaryKey {\n\t\treturn new PrimaryKey(table, this.columns, this.name);\n\t}\n}\n\nexport class PrimaryKey {\n\tstatic readonly [entityKind]: string = 'SQLitePrimaryKey';\n\n\treadonly columns: SQLiteColumn[];\n\treadonly name?: string;\n\n\tconstructor(readonly table: SQLiteTable, columns: SQLiteColumn[], name?: string) {\n\t\tthis.columns = columns;\n\t\tthis.name = name;\n\t}\n\n\tgetName(): string {\n\t\treturn this.name\n\t\t\t?? `${this.table[SQLiteTable.Symbol.Name]}_${this.columns.map((column) => column.name).join('_')}_pk`;\n\t}\n}\n"],"names":[],"mappings":";;;;;AAAA,SAAS,kBAAkB;AAE3B,SAAS,mBAAmB;;;AAerB,SAAS,WAAA,GAAc,MAAA,EAAa;IAC1C,IAAI,MAAA,CAAO,CAAC,CAAA,CAAE,OAAA,EAAS;QACtB,OAAO,IAAI,kBAAkB,MAAA,CAAO,CAAC,CAAA,CAAE,OAAA,EAAS,MAAA,CAAO,CAAC,CAAA,CAAE,IAAI;IAC/D;IACA,OAAO,IAAI,kBAAkB,MAAM;AACpC;AACO,MAAM,kBAAkB;IAC9B,OAAA,0IAAiB,aAAU,CAAA,GAAY,0BAAA;IAAA,cAAA,GAOvC,QAAA;IAAA,cAAA,GAGA,KAAA;IAEA,YACC,OAAA,EACA,IAAA,CACC;QACD,IAAA,CAAK,OAAA,GAAU;QACf,IAAA,CAAK,IAAA,GAAO;IACb;IAAA,cAAA,GAGA,MAAM,KAAA,EAAgC;QACrC,OAAO,IAAI,WAAW,OAAO,IAAA,CAAK,OAAA,EAAS,IAAA,CAAK,IAAI;IACrD;AACD;AAEO,MAAM,WAAW;IAMvB,YAAqB,KAAA,EAAoB,OAAA,EAAyB,IAAA,CAAe;QAA5D,IAAA,CAAA,KAAA,GAAA;QACpB,IAAA,CAAK,OAAA,GAAU;QACf,IAAA,CAAK,IAAA,GAAO;IACb;IARA,OAAA,0IAAiB,aAAU,CAAA,GAAY,mBAAA;IAE9B,QAAA;IACA,KAAA;IAOT,UAAkB;QACjB,OAAO,IAAA,CAAK,IAAA,IACR,GAAG,IAAA,CAAK,KAAA,2JAAM,cAAA,CAAY,MAAA,CAAO,IAAI,CAAC,CAAA,CAAA,EAAI,IAAA,CAAK,OAAA,CAAQ,GAAA,CAAI,CAAC,SAAW,OAAO,IAAI,EAAE,IAAA,CAAK,GAAG,CAAC,CAAA,GAAA,CAAA;IAClG;AACD","ignoreList":[0]}},
    {"offset": {"line": 3964, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3970, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/query-builders/query.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport {\n\ttype BuildQueryResult,\n\ttype BuildRelationalQueryResult,\n\ttype DBQueryConfig,\n\tmapRelationalRow,\n\ttype TableRelationalConfig,\n\ttype TablesRelationalConfig,\n} from '~/relations.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { Query, QueryWithTypings, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport type { KnownKeysOnly } from '~/utils.ts';\nimport type { SQLiteDialect } from '../dialect.ts';\nimport type { PreparedQueryConfig, SQLitePreparedQuery, SQLiteSession } from '../session.ts';\nimport type { SQLiteTable } from '../table.ts';\n\nexport type SQLiteRelationalQueryKind<TMode extends 'sync' | 'async', TResult> = TMode extends 'async'\n\t? SQLiteRelationalQuery<TMode, TResult>\n\t: SQLiteSyncRelationalQuery<TResult>;\n\nexport class RelationalQueryBuilder<\n\tTMode extends 'sync' | 'async',\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n\tTFields extends TableRelationalConfig,\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteAsyncRelationalQueryBuilder';\n\n\tconstructor(\n\t\tprotected mode: TMode,\n\t\tprotected fullSchema: Record<string, unknown>,\n\t\tprotected schema: TSchema,\n\t\tprotected tableNamesMap: Record<string, string>,\n\t\tprotected table: SQLiteTable,\n\t\tprotected tableConfig: TableRelationalConfig,\n\t\tprotected dialect: SQLiteDialect,\n\t\tprotected session: SQLiteSession<'async', unknown, TFullSchema, TSchema>,\n\t) {}\n\n\tfindMany<TConfig extends DBQueryConfig<'many', true, TSchema, TFields>>(\n\t\tconfig?: KnownKeysOnly<TConfig, DBQueryConfig<'many', true, TSchema, TFields>>,\n\t): SQLiteRelationalQueryKind<TMode, BuildQueryResult<TSchema, TFields, TConfig>[]> {\n\t\treturn (this.mode === 'sync'\n\t\t\t? new SQLiteSyncRelationalQuery(\n\t\t\t\tthis.fullSchema,\n\t\t\t\tthis.schema,\n\t\t\t\tthis.tableNamesMap,\n\t\t\t\tthis.table,\n\t\t\t\tthis.tableConfig,\n\t\t\t\tthis.dialect,\n\t\t\t\tthis.session,\n\t\t\t\tconfig ? (config as DBQueryConfig<'many', true>) : {},\n\t\t\t\t'many',\n\t\t\t)\n\t\t\t: new SQLiteRelationalQuery(\n\t\t\t\tthis.fullSchema,\n\t\t\t\tthis.schema,\n\t\t\t\tthis.tableNamesMap,\n\t\t\t\tthis.table,\n\t\t\t\tthis.tableConfig,\n\t\t\t\tthis.dialect,\n\t\t\t\tthis.session,\n\t\t\t\tconfig ? (config as DBQueryConfig<'many', true>) : {},\n\t\t\t\t'many',\n\t\t\t)) as SQLiteRelationalQueryKind<TMode, BuildQueryResult<TSchema, TFields, TConfig>[]>;\n\t}\n\n\tfindFirst<TSelection extends Omit<DBQueryConfig<'many', true, TSchema, TFields>, 'limit'>>(\n\t\tconfig?: KnownKeysOnly<TSelection, Omit<DBQueryConfig<'many', true, TSchema, TFields>, 'limit'>>,\n\t): SQLiteRelationalQueryKind<TMode, BuildQueryResult<TSchema, TFields, TSelection> | undefined> {\n\t\treturn (this.mode === 'sync'\n\t\t\t? new SQLiteSyncRelationalQuery(\n\t\t\t\tthis.fullSchema,\n\t\t\t\tthis.schema,\n\t\t\t\tthis.tableNamesMap,\n\t\t\t\tthis.table,\n\t\t\t\tthis.tableConfig,\n\t\t\t\tthis.dialect,\n\t\t\t\tthis.session,\n\t\t\t\tconfig ? { ...(config as DBQueryConfig<'many', true> | undefined), limit: 1 } : { limit: 1 },\n\t\t\t\t'first',\n\t\t\t)\n\t\t\t: new SQLiteRelationalQuery(\n\t\t\t\tthis.fullSchema,\n\t\t\t\tthis.schema,\n\t\t\t\tthis.tableNamesMap,\n\t\t\t\tthis.table,\n\t\t\t\tthis.tableConfig,\n\t\t\t\tthis.dialect,\n\t\t\t\tthis.session,\n\t\t\t\tconfig ? { ...(config as DBQueryConfig<'many', true> | undefined), limit: 1 } : { limit: 1 },\n\t\t\t\t'first',\n\t\t\t)) as SQLiteRelationalQueryKind<TMode, BuildQueryResult<TSchema, TFields, TSelection> | undefined>;\n\t}\n}\n\nexport class SQLiteRelationalQuery<TType extends 'sync' | 'async', TResult> extends QueryPromise<TResult>\n\timplements RunnableQuery<TResult, 'sqlite'>, SQLWrapper\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteAsyncRelationalQuery';\n\n\tdeclare readonly _: {\n\t\treadonly dialect: 'sqlite';\n\t\treadonly type: TType;\n\t\treadonly result: TResult;\n\t};\n\n\t/** @internal */\n\tmode: 'many' | 'first';\n\n\tconstructor(\n\t\tprivate fullSchema: Record<string, unknown>,\n\t\tprivate schema: TablesRelationalConfig,\n\t\tprivate tableNamesMap: Record<string, string>,\n\t\t/** @internal */\n\t\tpublic table: SQLiteTable,\n\t\tprivate tableConfig: TableRelationalConfig,\n\t\tprivate dialect: SQLiteDialect,\n\t\tprivate session: SQLiteSession<'sync' | 'async', unknown, Record<string, unknown>, TablesRelationalConfig>,\n\t\tprivate config: DBQueryConfig<'many', true> | true,\n\t\tmode: 'many' | 'first',\n\t) {\n\t\tsuper();\n\t\tthis.mode = mode;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildRelationalQuery({\n\t\t\tfullSchema: this.fullSchema,\n\t\t\tschema: this.schema,\n\t\t\ttableNamesMap: this.tableNamesMap,\n\t\t\ttable: this.table,\n\t\t\ttableConfig: this.tableConfig,\n\t\t\tqueryConfig: this.config,\n\t\t\ttableAlias: this.tableConfig.tsName,\n\t\t}).sql as SQL;\n\t}\n\n\t/** @internal */\n\t_prepare(\n\t\tisOneTimeQuery = false,\n\t): SQLitePreparedQuery<PreparedQueryConfig & { type: TType; all: TResult; get: TResult; execute: TResult }> {\n\t\tconst { query, builtQuery } = this._toSQL();\n\n\t\treturn this.session[isOneTimeQuery ? 'prepareOneTimeQuery' : 'prepareQuery'](\n\t\t\tbuiltQuery,\n\t\t\tundefined,\n\t\t\tthis.mode === 'first' ? 'get' : 'all',\n\t\t\ttrue,\n\t\t\t(rawRows, mapColumnValue) => {\n\t\t\t\tconst rows = rawRows.map((row) =>\n\t\t\t\t\tmapRelationalRow(this.schema, this.tableConfig, row, query.selection, mapColumnValue)\n\t\t\t\t);\n\t\t\t\tif (this.mode === 'first') {\n\t\t\t\t\treturn rows[0] as TResult;\n\t\t\t\t}\n\t\t\t\treturn rows as TResult;\n\t\t\t},\n\t\t) as SQLitePreparedQuery<PreparedQueryConfig & { type: TType; all: TResult; get: TResult; execute: TResult }>;\n\t}\n\n\tprepare(): SQLitePreparedQuery<PreparedQueryConfig & { type: TType; all: TResult; get: TResult; execute: TResult }> {\n\t\treturn this._prepare(false);\n\t}\n\n\tprivate _toSQL(): { query: BuildRelationalQueryResult; builtQuery: QueryWithTypings } {\n\t\tconst query = this.dialect.buildRelationalQuery({\n\t\t\tfullSchema: this.fullSchema,\n\t\t\tschema: this.schema,\n\t\t\ttableNamesMap: this.tableNamesMap,\n\t\t\ttable: this.table,\n\t\t\ttableConfig: this.tableConfig,\n\t\t\tqueryConfig: this.config,\n\t\t\ttableAlias: this.tableConfig.tsName,\n\t\t});\n\n\t\tconst builtQuery = this.dialect.sqlToQuery(query.sql as SQL);\n\n\t\treturn { query, builtQuery };\n\t}\n\n\ttoSQL(): Query {\n\t\treturn this._toSQL().builtQuery;\n\t}\n\n\t/** @internal */\n\texecuteRaw(): TResult {\n\t\tif (this.mode === 'first') {\n\t\t\treturn this._prepare(false).get() as TResult;\n\t\t}\n\t\treturn this._prepare(false).all() as TResult;\n\t}\n\n\toverride async execute(): Promise<TResult> {\n\t\treturn this.executeRaw();\n\t}\n}\n\nexport class SQLiteSyncRelationalQuery<TResult> extends SQLiteRelationalQuery<'sync', TResult> {\n\tstatic override readonly [entityKind]: string = 'SQLiteSyncRelationalQuery';\n\n\tsync(): TResult {\n\t\treturn this.executeRaw();\n\t}\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 4086, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4092, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/view-base.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport type { ColumnsSelection } from '~/sql/sql.ts';\nimport { View } from '~/sql/sql.ts';\n\nexport abstract class SQLiteViewBase<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n\tTSelection extends ColumnsSelection = ColumnsSelection,\n> extends View<TName, TExisting, TSelection> {\n\tstatic override readonly [entityKind]: string = 'SQLiteViewBase';\n\n\tdeclare _: View<TName, TExisting, TSelection>['_'] & {\n\t\tviewBrand: 'SQLiteView';\n\t};\n}\n"],"names":[],"mappings":";;;AAAA,SAAS,kBAAkB;AAE3B,SAAS,YAAY;;;AAEd,MAAe,oKAIZ,OAAA,CAAmC;IAC5C,OAAA,0IAA0B,aAAU,CAAA,GAAY,iBAAA;AAKjD","ignoreList":[0]}},
    {"offset": {"line": 4104, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4110, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/dialect.ts"],"sourcesContent":["import { aliasedTable, aliasedTableColumn, mapColumnsInAliasedSQLToAlias, mapColumnsInSQLToAlias } from '~/alias.ts';\nimport { CasingCache } from '~/casing.ts';\nimport type { AnyColumn } from '~/column.ts';\nimport { Column } from '~/column.ts';\nimport { entityKind, is } from '~/entity.ts';\nimport { DrizzleError } from '~/errors.ts';\nimport type { MigrationConfig, MigrationMeta } from '~/migrator.ts';\nimport {\n\ttype BuildRelationalQueryResult,\n\ttype DBQueryConfig,\n\tgetOperators,\n\tgetOrderByOperators,\n\tMany,\n\tnormalizeRelation,\n\tOne,\n\ttype Relation,\n\ttype TableRelationalConfig,\n\ttype TablesRelationalConfig,\n} from '~/relations.ts';\nimport type { Name, Placeholder } from '~/sql/index.ts';\nimport { and, eq } from '~/sql/index.ts';\nimport { Param, type QueryWithTypings, SQL, sql, type SQLChunk } from '~/sql/sql.ts';\nimport { SQLiteColumn } from '~/sqlite-core/columns/index.ts';\nimport type {\n\tAnySQLiteSelectQueryBuilder,\n\tSQLiteDeleteConfig,\n\tSQLiteInsertConfig,\n\tSQLiteUpdateConfig,\n} from '~/sqlite-core/query-builders/index.ts';\nimport { SQLiteTable } from '~/sqlite-core/table.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { getTableName, getTableUniqueName, Table } from '~/table.ts';\nimport { type Casing, orderSelectedFields, type UpdateSet } from '~/utils.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport type {\n\tSelectedFieldsOrdered,\n\tSQLiteSelectConfig,\n\tSQLiteSelectJoinConfig,\n} from './query-builders/select.types.ts';\nimport type { SQLiteSession } from './session.ts';\nimport { SQLiteViewBase } from './view-base.ts';\n\nexport interface SQLiteDialectConfig {\n\tcasing?: Casing;\n}\n\nexport abstract class SQLiteDialect {\n\tstatic readonly [entityKind]: string = 'SQLiteDialect';\n\n\t/** @internal */\n\treadonly casing: CasingCache;\n\n\tconstructor(config?: SQLiteDialectConfig) {\n\t\tthis.casing = new CasingCache(config?.casing);\n\t}\n\n\tescapeName(name: string): string {\n\t\treturn `\"${name}\"`;\n\t}\n\n\tescapeParam(_num: number): string {\n\t\treturn '?';\n\t}\n\n\tescapeString(str: string): string {\n\t\treturn `'${str.replace(/'/g, \"''\")}'`;\n\t}\n\n\tprivate buildWithCTE(queries: Subquery[] | undefined): SQL | undefined {\n\t\tif (!queries?.length) return undefined;\n\n\t\tconst withSqlChunks = [sql`with `];\n\t\tfor (const [i, w] of queries.entries()) {\n\t\t\twithSqlChunks.push(sql`${sql.identifier(w._.alias)} as (${w._.sql})`);\n\t\t\tif (i < queries.length - 1) {\n\t\t\t\twithSqlChunks.push(sql`, `);\n\t\t\t}\n\t\t}\n\t\twithSqlChunks.push(sql` `);\n\t\treturn sql.join(withSqlChunks);\n\t}\n\n\tbuildDeleteQuery({ table, where, returning, withList, limit, orderBy }: SQLiteDeleteConfig): SQL {\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst returningSql = returning\n\t\t\t? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n\t\t\t: undefined;\n\n\t\tconst whereSql = where ? sql` where ${where}` : undefined;\n\n\t\tconst orderBySql = this.buildOrderBy(orderBy);\n\n\t\tconst limitSql = this.buildLimit(limit);\n\n\t\treturn sql`${withSql}delete from ${table}${whereSql}${returningSql}${orderBySql}${limitSql}`;\n\t}\n\n\tbuildUpdateSet(table: SQLiteTable, set: UpdateSet): SQL {\n\t\tconst tableColumns = table[Table.Symbol.Columns];\n\n\t\tconst columnNames = Object.keys(tableColumns).filter((colName) =>\n\t\t\tset[colName] !== undefined || tableColumns[colName]?.onUpdateFn !== undefined\n\t\t);\n\n\t\tconst setSize = columnNames.length;\n\t\treturn sql.join(columnNames.flatMap((colName, i) => {\n\t\t\tconst col = tableColumns[colName]!;\n\n\t\t\tconst value = set[colName] ?? sql.param(col.onUpdateFn!(), col);\n\t\t\tconst res = sql`${sql.identifier(this.casing.getColumnCasing(col))} = ${value}`;\n\n\t\t\tif (i < setSize - 1) {\n\t\t\t\treturn [res, sql.raw(', ')];\n\t\t\t}\n\t\t\treturn [res];\n\t\t}));\n\t}\n\n\tbuildUpdateQuery({ table, set, where, returning, withList, joins, from, limit, orderBy }: SQLiteUpdateConfig): SQL {\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst setSql = this.buildUpdateSet(table, set);\n\n\t\tconst fromSql = from && sql.join([sql.raw(' from '), this.buildFromTable(from)]);\n\n\t\tconst joinsSql = this.buildJoins(joins);\n\n\t\tconst returningSql = returning\n\t\t\t? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n\t\t\t: undefined;\n\n\t\tconst whereSql = where ? sql` where ${where}` : undefined;\n\n\t\tconst orderBySql = this.buildOrderBy(orderBy);\n\n\t\tconst limitSql = this.buildLimit(limit);\n\n\t\treturn sql`${withSql}update ${table} set ${setSql}${fromSql}${joinsSql}${whereSql}${returningSql}${orderBySql}${limitSql}`;\n\t}\n\n\t/**\n\t * Builds selection SQL with provided fields/expressions\n\t *\n\t * Examples:\n\t *\n\t * `select <selection> from`\n\t *\n\t * `insert ... returning <selection>`\n\t *\n\t * If `isSingleTable` is true, then columns won't be prefixed with table name\n\t */\n\tprivate buildSelection(\n\t\tfields: SelectedFieldsOrdered,\n\t\t{ isSingleTable = false }: { isSingleTable?: boolean } = {},\n\t): SQL {\n\t\tconst columnsLen = fields.length;\n\n\t\tconst chunks = fields\n\t\t\t.flatMap(({ field }, i) => {\n\t\t\t\tconst chunk: SQLChunk[] = [];\n\n\t\t\t\tif (is(field, SQL.Aliased) && field.isSelectionField) {\n\t\t\t\t\tchunk.push(sql.identifier(field.fieldAlias));\n\t\t\t\t} else if (is(field, SQL.Aliased) || is(field, SQL)) {\n\t\t\t\t\tconst query = is(field, SQL.Aliased) ? field.sql : field;\n\n\t\t\t\t\tif (isSingleTable) {\n\t\t\t\t\t\tchunk.push(\n\t\t\t\t\t\t\tnew SQL(\n\t\t\t\t\t\t\t\tquery.queryChunks.map((c) => {\n\t\t\t\t\t\t\t\t\tif (is(c, Column)) {\n\t\t\t\t\t\t\t\t\t\treturn sql.identifier(this.casing.getColumnCasing(c));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn c;\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchunk.push(query);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is(field, SQL.Aliased)) {\n\t\t\t\t\t\tchunk.push(sql` as ${sql.identifier(field.fieldAlias)}`);\n\t\t\t\t\t}\n\t\t\t\t} else if (is(field, Column)) {\n\t\t\t\t\tconst tableName = field.table[Table.Symbol.Name];\n\t\t\t\t\tif (isSingleTable) {\n\t\t\t\t\t\tchunk.push(sql.identifier(this.casing.getColumnCasing(field)));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchunk.push(sql`${sql.identifier(tableName)}.${sql.identifier(this.casing.getColumnCasing(field))}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (i < columnsLen - 1) {\n\t\t\t\t\tchunk.push(sql`, `);\n\t\t\t\t}\n\n\t\t\t\treturn chunk;\n\t\t\t});\n\n\t\treturn sql.join(chunks);\n\t}\n\n\tprivate buildJoins(joins: SQLiteSelectJoinConfig[] | undefined): SQL | undefined {\n\t\tif (!joins || joins.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst joinsArray: SQL[] = [];\n\n\t\tif (joins) {\n\t\t\tfor (const [index, joinMeta] of joins.entries()) {\n\t\t\t\tif (index === 0) {\n\t\t\t\t\tjoinsArray.push(sql` `);\n\t\t\t\t}\n\t\t\t\tconst table = joinMeta.table;\n\n\t\t\t\tif (is(table, SQLiteTable)) {\n\t\t\t\t\tconst tableName = table[SQLiteTable.Symbol.Name];\n\t\t\t\t\tconst tableSchema = table[SQLiteTable.Symbol.Schema];\n\t\t\t\t\tconst origTableName = table[SQLiteTable.Symbol.OriginalName];\n\t\t\t\t\tconst alias = tableName === origTableName ? undefined : joinMeta.alias;\n\t\t\t\t\tjoinsArray.push(\n\t\t\t\t\t\tsql`${sql.raw(joinMeta.joinType)} join ${tableSchema ? sql`${sql.identifier(tableSchema)}.` : undefined}${\n\t\t\t\t\t\t\tsql.identifier(origTableName)\n\t\t\t\t\t\t}${alias && sql` ${sql.identifier(alias)}`} on ${joinMeta.on}`,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tjoinsArray.push(\n\t\t\t\t\t\tsql`${sql.raw(joinMeta.joinType)} join ${table} on ${joinMeta.on}`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (index < joins.length - 1) {\n\t\t\t\t\tjoinsArray.push(sql` `);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn sql.join(joinsArray);\n\t}\n\n\tprivate buildLimit(limit: number | Placeholder | undefined): SQL | undefined {\n\t\treturn typeof limit === 'object' || (typeof limit === 'number' && limit >= 0)\n\t\t\t? sql` limit ${limit}`\n\t\t\t: undefined;\n\t}\n\n\tprivate buildOrderBy(orderBy: (SQLiteColumn | SQL | SQL.Aliased)[] | undefined): SQL | undefined {\n\t\tconst orderByList: (SQLiteColumn | SQL | SQL.Aliased)[] = [];\n\n\t\tif (orderBy) {\n\t\t\tfor (const [index, orderByValue] of orderBy.entries()) {\n\t\t\t\torderByList.push(orderByValue);\n\n\t\t\t\tif (index < orderBy.length - 1) {\n\t\t\t\t\torderByList.push(sql`, `);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn orderByList.length > 0 ? sql` order by ${sql.join(orderByList)}` : undefined;\n\t}\n\n\tprivate buildFromTable(\n\t\ttable: SQL | Subquery | SQLiteViewBase | SQLiteTable | undefined,\n\t): SQL | Subquery | SQLiteViewBase | SQLiteTable | undefined {\n\t\tif (is(table, Table) && table[Table.Symbol.OriginalName] !== table[Table.Symbol.Name]) {\n\t\t\treturn sql`${sql.identifier(table[Table.Symbol.OriginalName])} ${sql.identifier(table[Table.Symbol.Name])}`;\n\t\t}\n\n\t\treturn table;\n\t}\n\n\tbuildSelectQuery(\n\t\t{\n\t\t\twithList,\n\t\t\tfields,\n\t\t\tfieldsFlat,\n\t\t\twhere,\n\t\t\thaving,\n\t\t\ttable,\n\t\t\tjoins,\n\t\t\torderBy,\n\t\t\tgroupBy,\n\t\t\tlimit,\n\t\t\toffset,\n\t\t\tdistinct,\n\t\t\tsetOperators,\n\t\t}: SQLiteSelectConfig,\n\t): SQL {\n\t\tconst fieldsList = fieldsFlat ?? orderSelectedFields<SQLiteColumn>(fields);\n\t\tfor (const f of fieldsList) {\n\t\t\tif (\n\t\t\t\tis(f.field, Column)\n\t\t\t\t&& getTableName(f.field.table)\n\t\t\t\t\t!== (is(table, Subquery)\n\t\t\t\t\t\t? table._.alias\n\t\t\t\t\t\t: is(table, SQLiteViewBase)\n\t\t\t\t\t\t? table[ViewBaseConfig].name\n\t\t\t\t\t\t: is(table, SQL)\n\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t: getTableName(table))\n\t\t\t\t&& !((table) =>\n\t\t\t\t\tjoins?.some(({ alias }) =>\n\t\t\t\t\t\talias === (table[Table.Symbol.IsAlias] ? getTableName(table) : table[Table.Symbol.BaseName])\n\t\t\t\t\t))(f.field.table)\n\t\t\t) {\n\t\t\t\tconst tableName = getTableName(f.field.table);\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Your \"${\n\t\t\t\t\t\tf.path.join('->')\n\t\t\t\t\t}\" field references a column \"${tableName}\".\"${f.field.name}\", but the table \"${tableName}\" is not part of the query! Did you forget to join it?`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst isSingleTable = !joins || joins.length === 0;\n\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst distinctSql = distinct ? sql` distinct` : undefined;\n\n\t\tconst selection = this.buildSelection(fieldsList, { isSingleTable });\n\n\t\tconst tableSql = this.buildFromTable(table);\n\n\t\tconst joinsSql = this.buildJoins(joins);\n\n\t\tconst whereSql = where ? sql` where ${where}` : undefined;\n\n\t\tconst havingSql = having ? sql` having ${having}` : undefined;\n\n\t\tconst groupByList: (SQL | AnyColumn | SQL.Aliased)[] = [];\n\t\tif (groupBy) {\n\t\t\tfor (const [index, groupByValue] of groupBy.entries()) {\n\t\t\t\tgroupByList.push(groupByValue);\n\n\t\t\t\tif (index < groupBy.length - 1) {\n\t\t\t\t\tgroupByList.push(sql`, `);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst groupBySql = groupByList.length > 0 ? sql` group by ${sql.join(groupByList)}` : undefined;\n\n\t\tconst orderBySql = this.buildOrderBy(orderBy);\n\n\t\tconst limitSql = this.buildLimit(limit);\n\n\t\tconst offsetSql = offset ? sql` offset ${offset}` : undefined;\n\n\t\tconst finalQuery =\n\t\t\tsql`${withSql}select${distinctSql} ${selection} from ${tableSql}${joinsSql}${whereSql}${groupBySql}${havingSql}${orderBySql}${limitSql}${offsetSql}`;\n\n\t\tif (setOperators.length > 0) {\n\t\t\treturn this.buildSetOperations(finalQuery, setOperators);\n\t\t}\n\n\t\treturn finalQuery;\n\t}\n\n\tbuildSetOperations(leftSelect: SQL, setOperators: SQLiteSelectConfig['setOperators']): SQL {\n\t\tconst [setOperator, ...rest] = setOperators;\n\n\t\tif (!setOperator) {\n\t\t\tthrow new Error('Cannot pass undefined values to any set operator');\n\t\t}\n\n\t\tif (rest.length === 0) {\n\t\t\treturn this.buildSetOperationQuery({ leftSelect, setOperator });\n\t\t}\n\n\t\t// Some recursive magic here\n\t\treturn this.buildSetOperations(\n\t\t\tthis.buildSetOperationQuery({ leftSelect, setOperator }),\n\t\t\trest,\n\t\t);\n\t}\n\n\tbuildSetOperationQuery({\n\t\tleftSelect,\n\t\tsetOperator: { type, isAll, rightSelect, limit, orderBy, offset },\n\t}: { leftSelect: SQL; setOperator: SQLiteSelectConfig['setOperators'][number] }): SQL {\n\t\t// SQLite doesn't support parenthesis in set operations\n\t\tconst leftChunk = sql`${leftSelect.getSQL()} `;\n\t\tconst rightChunk = sql`${rightSelect.getSQL()}`;\n\n\t\tlet orderBySql;\n\t\tif (orderBy && orderBy.length > 0) {\n\t\t\tconst orderByValues: (SQL<unknown> | Name)[] = [];\n\n\t\t\t// The next bit is necessary because the sql operator replaces ${table.column} with `table`.`column`\n\t\t\t// which is invalid Sql syntax, Table from one of the SELECTs cannot be used in global ORDER clause\n\t\t\tfor (const singleOrderBy of orderBy) {\n\t\t\t\tif (is(singleOrderBy, SQLiteColumn)) {\n\t\t\t\t\torderByValues.push(sql.identifier(singleOrderBy.name));\n\t\t\t\t} else if (is(singleOrderBy, SQL)) {\n\t\t\t\t\tfor (let i = 0; i < singleOrderBy.queryChunks.length; i++) {\n\t\t\t\t\t\tconst chunk = singleOrderBy.queryChunks[i];\n\n\t\t\t\t\t\tif (is(chunk, SQLiteColumn)) {\n\t\t\t\t\t\t\tsingleOrderBy.queryChunks[i] = sql.identifier(this.casing.getColumnCasing(chunk));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\torderByValues.push(sql`${singleOrderBy}`);\n\t\t\t\t} else {\n\t\t\t\t\torderByValues.push(sql`${singleOrderBy}`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\torderBySql = sql` order by ${sql.join(orderByValues, sql`, `)}`;\n\t\t}\n\n\t\tconst limitSql = typeof limit === 'object' || (typeof limit === 'number' && limit >= 0)\n\t\t\t? sql` limit ${limit}`\n\t\t\t: undefined;\n\n\t\tconst operatorChunk = sql.raw(`${type} ${isAll ? 'all ' : ''}`);\n\n\t\tconst offsetSql = offset ? sql` offset ${offset}` : undefined;\n\n\t\treturn sql`${leftChunk}${operatorChunk}${rightChunk}${orderBySql}${limitSql}${offsetSql}`;\n\t}\n\n\tbuildInsertQuery(\n\t\t{ table, values: valuesOrSelect, onConflict, returning, withList, select }: SQLiteInsertConfig,\n\t): SQL {\n\t\t// const isSingleValue = values.length === 1;\n\t\tconst valuesSqlList: ((SQLChunk | SQL)[] | SQL)[] = [];\n\t\tconst columns: Record<string, SQLiteColumn> = table[Table.Symbol.Columns];\n\n\t\tconst colEntries: [string, SQLiteColumn][] = Object.entries(columns).filter(([_, col]) =>\n\t\t\t!col.shouldDisableInsert()\n\t\t);\n\t\tconst insertOrder = colEntries.map(([, column]) => sql.identifier(this.casing.getColumnCasing(column)));\n\n\t\tif (select) {\n\t\t\tconst select = valuesOrSelect as AnySQLiteSelectQueryBuilder | SQL;\n\n\t\t\tif (is(select, SQL)) {\n\t\t\t\tvaluesSqlList.push(select);\n\t\t\t} else {\n\t\t\t\tvaluesSqlList.push(select.getSQL());\n\t\t\t}\n\t\t} else {\n\t\t\tconst values = valuesOrSelect as Record<string, Param | SQL>[];\n\t\t\tvaluesSqlList.push(sql.raw('values '));\n\n\t\t\tfor (const [valueIndex, value] of values.entries()) {\n\t\t\t\tconst valueList: (SQLChunk | SQL)[] = [];\n\t\t\t\tfor (const [fieldName, col] of colEntries) {\n\t\t\t\t\tconst colValue = value[fieldName];\n\t\t\t\t\tif (colValue === undefined || (is(colValue, Param) && colValue.value === undefined)) {\n\t\t\t\t\t\tlet defaultValue;\n\t\t\t\t\t\tif (col.default !== null && col.default !== undefined) {\n\t\t\t\t\t\t\tdefaultValue = is(col.default, SQL) ? col.default : sql.param(col.default, col);\n\t\t\t\t\t\t\t// eslint-disable-next-line unicorn/no-negated-condition\n\t\t\t\t\t\t} else if (col.defaultFn !== undefined) {\n\t\t\t\t\t\t\tconst defaultFnResult = col.defaultFn();\n\t\t\t\t\t\t\tdefaultValue = is(defaultFnResult, SQL) ? defaultFnResult : sql.param(defaultFnResult, col);\n\t\t\t\t\t\t\t// eslint-disable-next-line unicorn/no-negated-condition\n\t\t\t\t\t\t} else if (!col.default && col.onUpdateFn !== undefined) {\n\t\t\t\t\t\t\tconst onUpdateFnResult = col.onUpdateFn();\n\t\t\t\t\t\t\tdefaultValue = is(onUpdateFnResult, SQL) ? onUpdateFnResult : sql.param(onUpdateFnResult, col);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdefaultValue = sql`null`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvalueList.push(defaultValue);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvalueList.push(colValue);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvaluesSqlList.push(valueList);\n\t\t\t\tif (valueIndex < values.length - 1) {\n\t\t\t\t\tvaluesSqlList.push(sql`, `);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst valuesSql = sql.join(valuesSqlList);\n\n\t\tconst returningSql = returning\n\t\t\t? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n\t\t\t: undefined;\n\n\t\tconst onConflictSql = onConflict ? sql` on conflict ${onConflict}` : undefined;\n\n\t\t// if (isSingleValue && valuesSqlList.length === 0){\n\t\t// \treturn sql`insert into ${table} default values ${onConflictSql}${returningSql}`;\n\t\t// }\n\n\t\treturn sql`${withSql}insert into ${table} ${insertOrder} ${valuesSql}${onConflictSql}${returningSql}`;\n\t}\n\n\tsqlToQuery(sql: SQL, invokeSource?: 'indexes' | undefined): QueryWithTypings {\n\t\treturn sql.toQuery({\n\t\t\tcasing: this.casing,\n\t\t\tescapeName: this.escapeName,\n\t\t\tescapeParam: this.escapeParam,\n\t\t\tescapeString: this.escapeString,\n\t\t\tinvokeSource,\n\t\t});\n\t}\n\n\tbuildRelationalQuery({\n\t\tfullSchema,\n\t\tschema,\n\t\ttableNamesMap,\n\t\ttable,\n\t\ttableConfig,\n\t\tqueryConfig: config,\n\t\ttableAlias,\n\t\tnestedQueryRelation,\n\t\tjoinOn,\n\t}: {\n\t\tfullSchema: Record<string, unknown>;\n\t\tschema: TablesRelationalConfig;\n\t\ttableNamesMap: Record<string, string>;\n\t\ttable: SQLiteTable;\n\t\ttableConfig: TableRelationalConfig;\n\t\tqueryConfig: true | DBQueryConfig<'many', true>;\n\t\ttableAlias: string;\n\t\tnestedQueryRelation?: Relation;\n\t\tjoinOn?: SQL;\n\t}): BuildRelationalQueryResult<SQLiteTable, SQLiteColumn> {\n\t\tlet selection: BuildRelationalQueryResult<SQLiteTable, SQLiteColumn>['selection'] = [];\n\t\tlet limit, offset, orderBy: SQLiteSelectConfig['orderBy'] = [], where;\n\t\tconst joins: SQLiteSelectJoinConfig[] = [];\n\n\t\tif (config === true) {\n\t\t\tconst selectionEntries = Object.entries(tableConfig.columns);\n\t\t\tselection = selectionEntries.map((\n\t\t\t\t[key, value],\n\t\t\t) => ({\n\t\t\t\tdbKey: value.name,\n\t\t\t\ttsKey: key,\n\t\t\t\tfield: aliasedTableColumn(value as SQLiteColumn, tableAlias),\n\t\t\t\trelationTableTsKey: undefined,\n\t\t\t\tisJson: false,\n\t\t\t\tselection: [],\n\t\t\t}));\n\t\t} else {\n\t\t\tconst aliasedColumns = Object.fromEntries(\n\t\t\t\tObject.entries(tableConfig.columns).map(([key, value]) => [key, aliasedTableColumn(value, tableAlias)]),\n\t\t\t);\n\n\t\t\tif (config.where) {\n\t\t\t\tconst whereSql = typeof config.where === 'function'\n\t\t\t\t\t? config.where(aliasedColumns, getOperators())\n\t\t\t\t\t: config.where;\n\t\t\t\twhere = whereSql && mapColumnsInSQLToAlias(whereSql, tableAlias);\n\t\t\t}\n\n\t\t\tconst fieldsSelection: { tsKey: string; value: SQLiteColumn | SQL.Aliased }[] = [];\n\t\t\tlet selectedColumns: string[] = [];\n\n\t\t\t// Figure out which columns to select\n\t\t\tif (config.columns) {\n\t\t\t\tlet isIncludeMode = false;\n\n\t\t\t\tfor (const [field, value] of Object.entries(config.columns)) {\n\t\t\t\t\tif (value === undefined) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (field in tableConfig.columns) {\n\t\t\t\t\t\tif (!isIncludeMode && value === true) {\n\t\t\t\t\t\t\tisIncludeMode = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tselectedColumns.push(field);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (selectedColumns.length > 0) {\n\t\t\t\t\tselectedColumns = isIncludeMode\n\t\t\t\t\t\t? selectedColumns.filter((c) => config.columns?.[c] === true)\n\t\t\t\t\t\t: Object.keys(tableConfig.columns).filter((key) => !selectedColumns.includes(key));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Select all columns if selection is not specified\n\t\t\t\tselectedColumns = Object.keys(tableConfig.columns);\n\t\t\t}\n\n\t\t\tfor (const field of selectedColumns) {\n\t\t\t\tconst column = tableConfig.columns[field]! as SQLiteColumn;\n\t\t\t\tfieldsSelection.push({ tsKey: field, value: column });\n\t\t\t}\n\n\t\t\tlet selectedRelations: {\n\t\t\t\ttsKey: string;\n\t\t\t\tqueryConfig: true | DBQueryConfig<'many', false>;\n\t\t\t\trelation: Relation;\n\t\t\t}[] = [];\n\n\t\t\t// Figure out which relations to select\n\t\t\tif (config.with) {\n\t\t\t\tselectedRelations = Object.entries(config.with)\n\t\t\t\t\t.filter((entry): entry is [typeof entry[0], NonNullable<typeof entry[1]>] => !!entry[1])\n\t\t\t\t\t.map(([tsKey, queryConfig]) => ({ tsKey, queryConfig, relation: tableConfig.relations[tsKey]! }));\n\t\t\t}\n\n\t\t\tlet extras;\n\n\t\t\t// Figure out which extras to select\n\t\t\tif (config.extras) {\n\t\t\t\textras = typeof config.extras === 'function'\n\t\t\t\t\t? config.extras(aliasedColumns, { sql })\n\t\t\t\t\t: config.extras;\n\t\t\t\tfor (const [tsKey, value] of Object.entries(extras)) {\n\t\t\t\t\tfieldsSelection.push({\n\t\t\t\t\t\ttsKey,\n\t\t\t\t\t\tvalue: mapColumnsInAliasedSQLToAlias(value, tableAlias),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Transform `fieldsSelection` into `selection`\n\t\t\t// `fieldsSelection` shouldn't be used after this point\n\t\t\tfor (const { tsKey, value } of fieldsSelection) {\n\t\t\t\tselection.push({\n\t\t\t\t\tdbKey: is(value, SQL.Aliased) ? value.fieldAlias : tableConfig.columns[tsKey]!.name,\n\t\t\t\t\ttsKey,\n\t\t\t\t\tfield: is(value, Column) ? aliasedTableColumn(value, tableAlias) : value,\n\t\t\t\t\trelationTableTsKey: undefined,\n\t\t\t\t\tisJson: false,\n\t\t\t\t\tselection: [],\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tlet orderByOrig = typeof config.orderBy === 'function'\n\t\t\t\t? config.orderBy(aliasedColumns, getOrderByOperators())\n\t\t\t\t: config.orderBy ?? [];\n\t\t\tif (!Array.isArray(orderByOrig)) {\n\t\t\t\torderByOrig = [orderByOrig];\n\t\t\t}\n\t\t\torderBy = orderByOrig.map((orderByValue) => {\n\t\t\t\tif (is(orderByValue, Column)) {\n\t\t\t\t\treturn aliasedTableColumn(orderByValue, tableAlias) as SQLiteColumn;\n\t\t\t\t}\n\t\t\t\treturn mapColumnsInSQLToAlias(orderByValue, tableAlias);\n\t\t\t});\n\n\t\t\tlimit = config.limit;\n\t\t\toffset = config.offset;\n\n\t\t\t// Process all relations\n\t\t\tfor (\n\t\t\t\tconst {\n\t\t\t\t\ttsKey: selectedRelationTsKey,\n\t\t\t\t\tqueryConfig: selectedRelationConfigValue,\n\t\t\t\t\trelation,\n\t\t\t\t} of selectedRelations\n\t\t\t) {\n\t\t\t\tconst normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n\t\t\t\tconst relationTableName = getTableUniqueName(relation.referencedTable);\n\t\t\t\tconst relationTableTsName = tableNamesMap[relationTableName]!;\n\t\t\t\tconst relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n\t\t\t\t// const relationTable = schema[relationTableTsName]!;\n\t\t\t\tconst joinOn = and(\n\t\t\t\t\t...normalizedRelation.fields.map((field, i) =>\n\t\t\t\t\t\teq(\n\t\t\t\t\t\t\taliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),\n\t\t\t\t\t\t\taliasedTableColumn(field, tableAlias),\n\t\t\t\t\t\t)\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tconst builtRelation = this.buildRelationalQuery({\n\t\t\t\t\tfullSchema,\n\t\t\t\t\tschema,\n\t\t\t\t\ttableNamesMap,\n\t\t\t\t\ttable: fullSchema[relationTableTsName] as SQLiteTable,\n\t\t\t\t\ttableConfig: schema[relationTableTsName]!,\n\t\t\t\t\tqueryConfig: is(relation, One)\n\t\t\t\t\t\t? (selectedRelationConfigValue === true\n\t\t\t\t\t\t\t? { limit: 1 }\n\t\t\t\t\t\t\t: { ...selectedRelationConfigValue, limit: 1 })\n\t\t\t\t\t\t: selectedRelationConfigValue,\n\t\t\t\t\ttableAlias: relationTableAlias,\n\t\t\t\t\tjoinOn,\n\t\t\t\t\tnestedQueryRelation: relation,\n\t\t\t\t});\n\t\t\t\tconst field = (sql`(${builtRelation.sql})`).as(selectedRelationTsKey);\n\t\t\t\tselection.push({\n\t\t\t\t\tdbKey: selectedRelationTsKey,\n\t\t\t\t\ttsKey: selectedRelationTsKey,\n\t\t\t\t\tfield,\n\t\t\t\t\trelationTableTsKey: relationTableTsName,\n\t\t\t\t\tisJson: true,\n\t\t\t\t\tselection: builtRelation.selection,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (selection.length === 0) {\n\t\t\tthrow new DrizzleError({\n\t\t\t\tmessage:\n\t\t\t\t\t`No fields selected for table \"${tableConfig.tsName}\" (\"${tableAlias}\"). You need to have at least one item in \"columns\", \"with\" or \"extras\". If you need to select all columns, omit the \"columns\" key or set it to undefined.`,\n\t\t\t});\n\t\t}\n\n\t\tlet result;\n\n\t\twhere = and(joinOn, where);\n\n\t\tif (nestedQueryRelation) {\n\t\t\tlet field = sql`json_array(${\n\t\t\t\tsql.join(\n\t\t\t\t\tselection.map(({ field }) =>\n\t\t\t\t\t\tis(field, SQLiteColumn)\n\t\t\t\t\t\t\t? sql.identifier(this.casing.getColumnCasing(field))\n\t\t\t\t\t\t\t: is(field, SQL.Aliased)\n\t\t\t\t\t\t\t? field.sql\n\t\t\t\t\t\t\t: field\n\t\t\t\t\t),\n\t\t\t\t\tsql`, `,\n\t\t\t\t)\n\t\t\t})`;\n\t\t\tif (is(nestedQueryRelation, Many)) {\n\t\t\t\tfield = sql`coalesce(json_group_array(${field}), json_array())`;\n\t\t\t}\n\t\t\tconst nestedSelection = [{\n\t\t\t\tdbKey: 'data',\n\t\t\t\ttsKey: 'data',\n\t\t\t\tfield: field.as('data'),\n\t\t\t\tisJson: true,\n\t\t\t\trelationTableTsKey: tableConfig.tsName,\n\t\t\t\tselection,\n\t\t\t}];\n\n\t\t\tconst needsSubquery = limit !== undefined || offset !== undefined || orderBy.length > 0;\n\n\t\t\tif (needsSubquery) {\n\t\t\t\tresult = this.buildSelectQuery({\n\t\t\t\t\ttable: aliasedTable(table, tableAlias),\n\t\t\t\t\tfields: {},\n\t\t\t\t\tfieldsFlat: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpath: [],\n\t\t\t\t\t\t\tfield: sql.raw('*'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\twhere,\n\t\t\t\t\tlimit,\n\t\t\t\t\toffset,\n\t\t\t\t\torderBy,\n\t\t\t\t\tsetOperators: [],\n\t\t\t\t});\n\n\t\t\t\twhere = undefined;\n\t\t\t\tlimit = undefined;\n\t\t\t\toffset = undefined;\n\t\t\t\torderBy = undefined;\n\t\t\t} else {\n\t\t\t\tresult = aliasedTable(table, tableAlias);\n\t\t\t}\n\n\t\t\tresult = this.buildSelectQuery({\n\t\t\t\ttable: is(result, SQLiteTable) ? result : new Subquery(result, {}, tableAlias),\n\t\t\t\tfields: {},\n\t\t\t\tfieldsFlat: nestedSelection.map(({ field }) => ({\n\t\t\t\t\tpath: [],\n\t\t\t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n\t\t\t\t})),\n\t\t\t\tjoins,\n\t\t\t\twhere,\n\t\t\t\tlimit,\n\t\t\t\toffset,\n\t\t\t\torderBy,\n\t\t\t\tsetOperators: [],\n\t\t\t});\n\t\t} else {\n\t\t\tresult = this.buildSelectQuery({\n\t\t\t\ttable: aliasedTable(table, tableAlias),\n\t\t\t\tfields: {},\n\t\t\t\tfieldsFlat: selection.map(({ field }) => ({\n\t\t\t\t\tpath: [],\n\t\t\t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n\t\t\t\t})),\n\t\t\t\tjoins,\n\t\t\t\twhere,\n\t\t\t\tlimit,\n\t\t\t\toffset,\n\t\t\t\torderBy,\n\t\t\t\tsetOperators: [],\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\ttableTsKey: tableConfig.tsName,\n\t\t\tsql: result,\n\t\t\tselection,\n\t\t};\n\t}\n}\n\nexport class SQLiteSyncDialect extends SQLiteDialect {\n\tstatic override readonly [entityKind]: string = 'SQLiteSyncDialect';\n\n\tmigrate(\n\t\tmigrations: MigrationMeta[],\n\t\tsession: SQLiteSession<'sync', unknown, Record<string, unknown>, TablesRelationalConfig>,\n\t\tconfig?: string | MigrationConfig,\n\t): void {\n\t\tconst migrationsTable = config === undefined\n\t\t\t? '__drizzle_migrations'\n\t\t\t: typeof config === 'string'\n\t\t\t? '__drizzle_migrations'\n\t\t\t: config.migrationsTable ?? '__drizzle_migrations';\n\n\t\tconst migrationTableCreate = sql`\n\t\t\tCREATE TABLE IF NOT EXISTS ${sql.identifier(migrationsTable)} (\n\t\t\t\tid SERIAL PRIMARY KEY,\n\t\t\t\thash text NOT NULL,\n\t\t\t\tcreated_at numeric\n\t\t\t)\n\t\t`;\n\t\tsession.run(migrationTableCreate);\n\n\t\tconst dbMigrations = session.values<[number, string, string]>(\n\t\t\tsql`SELECT id, hash, created_at FROM ${sql.identifier(migrationsTable)} ORDER BY created_at DESC LIMIT 1`,\n\t\t);\n\n\t\tconst lastDbMigration = dbMigrations[0] ?? undefined;\n\t\tsession.run(sql`BEGIN`);\n\n\t\ttry {\n\t\t\tfor (const migration of migrations) {\n\t\t\t\tif (!lastDbMigration || Number(lastDbMigration[2])! < migration.folderMillis) {\n\t\t\t\t\tfor (const stmt of migration.sql) {\n\t\t\t\t\t\tsession.run(sql.raw(stmt));\n\t\t\t\t\t}\n\t\t\t\t\tsession.run(\n\t\t\t\t\t\tsql`INSERT INTO ${\n\t\t\t\t\t\t\tsql.identifier(migrationsTable)\n\t\t\t\t\t\t} (\"hash\", \"created_at\") VALUES(${migration.hash}, ${migration.folderMillis})`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsession.run(sql`COMMIT`);\n\t\t} catch (e) {\n\t\t\tsession.run(sql`ROLLBACK`);\n\t\t\tthrow e;\n\t\t}\n\t}\n}\n\nexport class SQLiteAsyncDialect extends SQLiteDialect {\n\tstatic override readonly [entityKind]: string = 'SQLiteAsyncDialect';\n\n\tasync migrate(\n\t\tmigrations: MigrationMeta[],\n\t\tsession: SQLiteSession<'async', any, any, any>,\n\t\tconfig?: string | MigrationConfig,\n\t): Promise<void> {\n\t\tconst migrationsTable = config === undefined\n\t\t\t? '__drizzle_migrations'\n\t\t\t: typeof config === 'string'\n\t\t\t? '__drizzle_migrations'\n\t\t\t: config.migrationsTable ?? '__drizzle_migrations';\n\n\t\tconst migrationTableCreate = sql`\n\t\t\tCREATE TABLE IF NOT EXISTS ${sql.identifier(migrationsTable)} (\n\t\t\t\tid SERIAL PRIMARY KEY,\n\t\t\t\thash text NOT NULL,\n\t\t\t\tcreated_at numeric\n\t\t\t)\n\t\t`;\n\t\tawait session.run(migrationTableCreate);\n\n\t\tconst dbMigrations = await session.values<[number, string, string]>(\n\t\t\tsql`SELECT id, hash, created_at FROM ${sql.identifier(migrationsTable)} ORDER BY created_at DESC LIMIT 1`,\n\t\t);\n\n\t\tconst lastDbMigration = dbMigrations[0] ?? undefined;\n\n\t\tawait session.transaction(async (tx) => {\n\t\t\tfor (const migration of migrations) {\n\t\t\t\tif (!lastDbMigration || Number(lastDbMigration[2])! < migration.folderMillis) {\n\t\t\t\t\tfor (const stmt of migration.sql) {\n\t\t\t\t\t\tawait tx.run(sql.raw(stmt));\n\t\t\t\t\t}\n\t\t\t\t\tawait tx.run(\n\t\t\t\t\t\tsql`INSERT INTO ${\n\t\t\t\t\t\t\tsql.identifier(migrationsTable)\n\t\t\t\t\t\t} (\"hash\", \"created_at\") VALUES(${migration.hash}, ${migration.folderMillis})`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n"],"names":["table","select","sql","joinOn","field"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 4724, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4730, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/query-builders/select.ts"],"sourcesContent":["import { entityKind, is } from '~/entity.ts';\nimport { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type {\n\tBuildSubquerySelection,\n\tGetSelectTableName,\n\tGetSelectTableSelection,\n\tJoinNullability,\n\tJoinType,\n\tSelectMode,\n\tSelectResult,\n\tSetOperator,\n} from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport { SQL, View } from '~/sql/sql.ts';\nimport type { ColumnsSelection, Placeholder, Query, SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteColumn } from '~/sqlite-core/columns/index.ts';\nimport type { SQLiteDialect } from '~/sqlite-core/dialect.ts';\nimport type { SQLiteSession } from '~/sqlite-core/session.ts';\nimport type { SubqueryWithSelection } from '~/sqlite-core/subquery.ts';\nimport type { SQLiteTable } from '~/sqlite-core/table.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { Table } from '~/table.ts';\nimport {\n\tapplyMixins,\n\tgetTableColumns,\n\tgetTableLikeName,\n\thaveSameKeys,\n\torderSelectedFields,\n\ttype ValueOrArray,\n} from '~/utils.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport { SQLiteViewBase } from '../view-base.ts';\nimport type {\n\tAnySQLiteSelect,\n\tCreateSQLiteSelectFromBuilderMode,\n\tGetSQLiteSetOperators,\n\tSelectedFields,\n\tSetOperatorRightSelect,\n\tSQLiteCreateSetOperatorFn,\n\tSQLiteSelectConfig,\n\tSQLiteSelectDynamic,\n\tSQLiteSelectExecute,\n\tSQLiteSelectHKT,\n\tSQLiteSelectHKTBase,\n\tSQLiteSelectJoinFn,\n\tSQLiteSelectPrepare,\n\tSQLiteSelectWithout,\n\tSQLiteSetOperatorExcludedMethods,\n\tSQLiteSetOperatorWithResult,\n} from './select.types.ts';\n\nexport class SQLiteSelectBuilder<\n\tTSelection extends SelectedFields | undefined,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTBuilderMode extends 'db' | 'qb' = 'db',\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteSelectBuilder';\n\n\tprivate fields: TSelection;\n\tprivate session: SQLiteSession<any, any, any, any> | undefined;\n\tprivate dialect: SQLiteDialect;\n\tprivate withList: Subquery[] | undefined;\n\tprivate distinct: boolean | undefined;\n\n\tconstructor(\n\t\tconfig: {\n\t\t\tfields: TSelection;\n\t\t\tsession: SQLiteSession<any, any, any, any> | undefined;\n\t\t\tdialect: SQLiteDialect;\n\t\t\twithList?: Subquery[];\n\t\t\tdistinct?: boolean;\n\t\t},\n\t) {\n\t\tthis.fields = config.fields;\n\t\tthis.session = config.session;\n\t\tthis.dialect = config.dialect;\n\t\tthis.withList = config.withList;\n\t\tthis.distinct = config.distinct;\n\t}\n\n\tfrom<TFrom extends SQLiteTable | Subquery | SQLiteViewBase | SQL>(\n\t\tsource: TFrom,\n\t): CreateSQLiteSelectFromBuilderMode<\n\t\tTBuilderMode,\n\t\tGetSelectTableName<TFrom>,\n\t\tTResultType,\n\t\tTRunResult,\n\t\tTSelection extends undefined ? GetSelectTableSelection<TFrom> : TSelection,\n\t\tTSelection extends undefined ? 'single' : 'partial'\n\t> {\n\t\tconst isPartialSelect = !!this.fields;\n\n\t\tlet fields: SelectedFields;\n\t\tif (this.fields) {\n\t\t\tfields = this.fields;\n\t\t} else if (is(source, Subquery)) {\n\t\t\t// This is required to use the proxy handler to get the correct field values from the subquery\n\t\t\tfields = Object.fromEntries(\n\t\t\t\tObject.keys(source._.selectedFields).map((\n\t\t\t\t\tkey,\n\t\t\t\t) => [key, source[key as unknown as keyof typeof source] as unknown as SelectedFields[string]]),\n\t\t\t);\n\t\t} else if (is(source, SQLiteViewBase)) {\n\t\t\tfields = source[ViewBaseConfig].selectedFields as SelectedFields;\n\t\t} else if (is(source, SQL)) {\n\t\t\tfields = {};\n\t\t} else {\n\t\t\tfields = getTableColumns<SQLiteTable>(source);\n\t\t}\n\n\t\treturn new SQLiteSelectBase({\n\t\t\ttable: source,\n\t\t\tfields,\n\t\t\tisPartialSelect,\n\t\t\tsession: this.session,\n\t\t\tdialect: this.dialect,\n\t\t\twithList: this.withList,\n\t\t\tdistinct: this.distinct,\n\t\t}) as any;\n\t}\n}\n\nexport abstract class SQLiteSelectQueryBuilderBase<\n\tTHKT extends SQLiteSelectHKTBase,\n\tTTableName extends string | undefined,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTSelection extends ColumnsSelection,\n\tTSelectMode extends SelectMode,\n\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n\t\t: {},\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n\tTResult extends any[] = SelectResult<TSelection, TSelectMode, TNullabilityMap>[],\n\tTSelectedFields extends ColumnsSelection = BuildSubquerySelection<TSelection, TNullabilityMap>,\n> extends TypedQueryBuilder<TSelectedFields, TResult> {\n\tstatic override readonly [entityKind]: string = 'SQLiteSelectQueryBuilder';\n\n\toverride readonly _: {\n\t\treadonly dialect: 'sqlite';\n\t\treadonly hkt: THKT;\n\t\treadonly tableName: TTableName;\n\t\treadonly resultType: TResultType;\n\t\treadonly runResult: TRunResult;\n\t\treadonly selection: TSelection;\n\t\treadonly selectMode: TSelectMode;\n\t\treadonly nullabilityMap: TNullabilityMap;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TResult;\n\t\treadonly selectedFields: TSelectedFields;\n\t};\n\n\t/** @internal */\n\tconfig: SQLiteSelectConfig;\n\tprotected joinsNotNullableMap: Record<string, boolean>;\n\tprivate tableName: string | undefined;\n\tprivate isPartialSelect: boolean;\n\tprotected session: SQLiteSession<any, any, any, any> | undefined;\n\tprotected dialect: SQLiteDialect;\n\n\tconstructor(\n\t\t{ table, fields, isPartialSelect, session, dialect, withList, distinct }: {\n\t\t\ttable: SQLiteSelectConfig['table'];\n\t\t\tfields: SQLiteSelectConfig['fields'];\n\t\t\tisPartialSelect: boolean;\n\t\t\tsession: SQLiteSession<any, any, any, any> | undefined;\n\t\t\tdialect: SQLiteDialect;\n\t\t\twithList: Subquery[] | undefined;\n\t\t\tdistinct: boolean | undefined;\n\t\t},\n\t) {\n\t\tsuper();\n\t\tthis.config = {\n\t\t\twithList,\n\t\t\ttable,\n\t\t\tfields: { ...fields },\n\t\t\tdistinct,\n\t\t\tsetOperators: [],\n\t\t};\n\t\tthis.isPartialSelect = isPartialSelect;\n\t\tthis.session = session;\n\t\tthis.dialect = dialect;\n\t\tthis._ = {\n\t\t\tselectedFields: fields as TSelectedFields,\n\t\t} as this['_'];\n\t\tthis.tableName = getTableLikeName(table);\n\t\tthis.joinsNotNullableMap = typeof this.tableName === 'string' ? { [this.tableName]: true } : {};\n\t}\n\n\tprivate createJoin<TJoinType extends JoinType>(\n\t\tjoinType: TJoinType,\n\t): SQLiteSelectJoinFn<this, TDynamic, TJoinType> {\n\t\treturn (\n\t\t\ttable: SQLiteTable | Subquery | SQLiteViewBase | SQL,\n\t\t\ton: ((aliases: TSelection) => SQL | undefined) | SQL | undefined,\n\t\t) => {\n\t\t\tconst baseTableName = this.tableName;\n\t\t\tconst tableName = getTableLikeName(table);\n\n\t\t\tif (typeof tableName === 'string' && this.config.joins?.some((join) => join.alias === tableName)) {\n\t\t\t\tthrow new Error(`Alias \"${tableName}\" is already used in this query`);\n\t\t\t}\n\n\t\t\tif (!this.isPartialSelect) {\n\t\t\t\t// If this is the first join and this is not a partial select and we're not selecting from raw SQL, \"move\" the fields from the main table to the nested object\n\t\t\t\tif (Object.keys(this.joinsNotNullableMap).length === 1 && typeof baseTableName === 'string') {\n\t\t\t\t\tthis.config.fields = {\n\t\t\t\t\t\t[baseTableName]: this.config.fields,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif (typeof tableName === 'string' && !is(table, SQL)) {\n\t\t\t\t\tconst selection = is(table, Subquery)\n\t\t\t\t\t\t? table._.selectedFields\n\t\t\t\t\t\t: is(table, View)\n\t\t\t\t\t\t? table[ViewBaseConfig].selectedFields\n\t\t\t\t\t\t: table[Table.Symbol.Columns];\n\t\t\t\t\tthis.config.fields[tableName] = selection;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof on === 'function') {\n\t\t\t\ton = on(\n\t\t\t\t\tnew Proxy(\n\t\t\t\t\t\tthis.config.fields,\n\t\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t\t) as TSelection,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!this.config.joins) {\n\t\t\t\tthis.config.joins = [];\n\t\t\t}\n\t\t\tthis.config.joins.push({ on, table, joinType, alias: tableName });\n\n\t\t\tif (typeof tableName === 'string') {\n\t\t\t\tswitch (joinType) {\n\t\t\t\t\tcase 'left': {\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'right': {\n\t\t\t\t\t\tthis.joinsNotNullableMap = Object.fromEntries(\n\t\t\t\t\t\t\tObject.entries(this.joinsNotNullableMap).map(([key]) => [key, false]),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'inner': {\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'full': {\n\t\t\t\t\t\tthis.joinsNotNullableMap = Object.fromEntries(\n\t\t\t\t\t\t\tObject.entries(this.joinsNotNullableMap).map(([key]) => [key, false]),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this as any;\n\t\t};\n\t}\n\n\t/**\n\t * Executes a `left join` operation by adding another table to the current query.\n\t *\n\t * Calling this method associates each row of the table with the corresponding row from the joined table, if a match is found. If no matching row exists, it sets all columns of the joined table to null.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#left-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User; pets: Pet | null }[] = await db.select()\n\t *   .from(users)\n\t *   .leftJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number; petId: number | null }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .leftJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\tleftJoin = this.createJoin('left');\n\n\t/**\n\t * Executes a `right join` operation by adding another table to the current query.\n\t *\n\t * Calling this method associates each row of the joined table with the corresponding row from the main table, if a match is found. If no matching row exists, it sets all columns of the main table to null.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#right-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User | null; pets: Pet }[] = await db.select()\n\t *   .from(users)\n\t *   .rightJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number | null; petId: number }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .rightJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\trightJoin = this.createJoin('right');\n\n\t/**\n\t * Executes an `inner join` operation, creating a new table by combining rows from two tables that have matching values.\n\t *\n\t * Calling this method retrieves rows that have corresponding entries in both joined tables. Rows without matching entries in either table are excluded, resulting in a table that includes only matching pairs.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#inner-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User; pets: Pet }[] = await db.select()\n\t *   .from(users)\n\t *   .innerJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number; petId: number }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .innerJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\tinnerJoin = this.createJoin('inner');\n\n\t/**\n\t * Executes a `full join` operation by combining rows from two tables into a new table.\n\t *\n\t * Calling this method retrieves all rows from both main and joined tables, merging rows with matching values and filling in `null` for non-matching columns.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#full-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User | null; pets: Pet | null }[] = await db.select()\n\t *   .from(users)\n\t *   .fullJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number | null; petId: number | null }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .fullJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\tfullJoin = this.createJoin('full');\n\n\tprivate createSetOperator(\n\t\ttype: SetOperator,\n\t\tisAll: boolean,\n\t): <TValue extends SQLiteSetOperatorWithResult<TResult>>(\n\t\trightSelection:\n\t\t\t| ((setOperators: GetSQLiteSetOperators) => SetOperatorRightSelect<TValue, TResult>)\n\t\t\t| SetOperatorRightSelect<TValue, TResult>,\n\t) => SQLiteSelectWithout<\n\t\tthis,\n\t\tTDynamic,\n\t\tSQLiteSetOperatorExcludedMethods,\n\t\ttrue\n\t> {\n\t\treturn (rightSelection) => {\n\t\t\tconst rightSelect = (typeof rightSelection === 'function'\n\t\t\t\t? rightSelection(getSQLiteSetOperators())\n\t\t\t\t: rightSelection) as TypedQueryBuilder<\n\t\t\t\t\tany,\n\t\t\t\t\tTResult\n\t\t\t\t>;\n\n\t\t\tif (!haveSameKeys(this.getSelectedFields(), rightSelect.getSelectedFields())) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Set operator error (union / intersect / except): selected fields are not the same or are in a different order',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.config.setOperators.push({ type, isAll, rightSelect });\n\t\t\treturn this as any;\n\t\t};\n\t}\n\n\t/**\n\t * Adds `union` set operator to the query.\n\t *\n\t * Calling this method will combine the result sets of the `select` statements and remove any duplicate rows that appear across them.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#union}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all unique names from customers and users tables\n\t * await db.select({ name: users.name })\n\t *   .from(users)\n\t *   .union(\n\t *     db.select({ name: customers.name }).from(customers)\n\t *   );\n\t * // or\n\t * import { union } from 'drizzle-orm/sqlite-core'\n\t *\n\t * await union(\n\t *   db.select({ name: users.name }).from(users),\n\t *   db.select({ name: customers.name }).from(customers)\n\t * );\n\t * ```\n\t */\n\tunion = this.createSetOperator('union', false);\n\n\t/**\n\t * Adds `union all` set operator to the query.\n\t *\n\t * Calling this method will combine the result-set of the `select` statements and keep all duplicate rows that appear across them.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#union-all}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all transaction ids from both online and in-store sales\n\t * await db.select({ transaction: onlineSales.transactionId })\n\t *   .from(onlineSales)\n\t *   .unionAll(\n\t *     db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n\t *   );\n\t * // or\n\t * import { unionAll } from 'drizzle-orm/sqlite-core'\n\t *\n\t * await unionAll(\n\t *   db.select({ transaction: onlineSales.transactionId }).from(onlineSales),\n\t *   db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n\t * );\n\t * ```\n\t */\n\tunionAll = this.createSetOperator('union', true);\n\n\t/**\n\t * Adds `intersect` set operator to the query.\n\t *\n\t * Calling this method will retain only the rows that are present in both result sets and eliminate duplicates.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select course names that are offered in both departments A and B\n\t * await db.select({ courseName: depA.courseName })\n\t *   .from(depA)\n\t *   .intersect(\n\t *     db.select({ courseName: depB.courseName }).from(depB)\n\t *   );\n\t * // or\n\t * import { intersect } from 'drizzle-orm/sqlite-core'\n\t *\n\t * await intersect(\n\t *   db.select({ courseName: depA.courseName }).from(depA),\n\t *   db.select({ courseName: depB.courseName }).from(depB)\n\t * );\n\t * ```\n\t */\n\tintersect = this.createSetOperator('intersect', false);\n\n\t/**\n\t * Adds `except` set operator to the query.\n\t *\n\t * Calling this method will retrieve all unique rows from the left query, except for the rows that are present in the result set of the right query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#except}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all courses offered in department A but not in department B\n\t * await db.select({ courseName: depA.courseName })\n\t *   .from(depA)\n\t *   .except(\n\t *     db.select({ courseName: depB.courseName }).from(depB)\n\t *   );\n\t * // or\n\t * import { except } from 'drizzle-orm/sqlite-core'\n\t *\n\t * await except(\n\t *   db.select({ courseName: depA.courseName }).from(depA),\n\t *   db.select({ courseName: depB.courseName }).from(depB)\n\t * );\n\t * ```\n\t */\n\texcept = this.createSetOperator('except', false);\n\n\t/** @internal */\n\taddSetOperators(setOperators: SQLiteSelectConfig['setOperators']): SQLiteSelectWithout<\n\t\tthis,\n\t\tTDynamic,\n\t\tSQLiteSetOperatorExcludedMethods,\n\t\ttrue\n\t> {\n\t\tthis.config.setOperators.push(...setOperators);\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `where` clause to the query.\n\t *\n\t * Calling this method will select only those rows that fulfill a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#filtering}\n\t *\n\t * @param where the `where` clause.\n\t *\n\t * @example\n\t * You can use conditional operators and `sql function` to filter the rows to be selected.\n\t *\n\t * ```ts\n\t * // Select all cars with green color\n\t * await db.select().from(cars).where(eq(cars.color, 'green'));\n\t * // or\n\t * await db.select().from(cars).where(sql`${cars.color} = 'green'`)\n\t * ```\n\t *\n\t * You can logically combine conditional operators with `and()` and `or()` operators:\n\t *\n\t * ```ts\n\t * // Select all BMW cars with a green color\n\t * await db.select().from(cars).where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n\t *\n\t * // Select all cars with the green or blue color\n\t * await db.select().from(cars).where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n\t * ```\n\t */\n\twhere(\n\t\twhere: ((aliases: TSelection) => SQL | undefined) | SQL | undefined,\n\t): SQLiteSelectWithout<this, TDynamic, 'where'> {\n\t\tif (typeof where === 'function') {\n\t\t\twhere = where(\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\t\t}\n\t\tthis.config.where = where;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `having` clause to the query.\n\t *\n\t * Calling this method will select only those rows that fulfill a specified condition. It is typically used with aggregate functions to filter the aggregated data based on a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#aggregations}\n\t *\n\t * @param having the `having` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all brands with more than one car\n\t * await db.select({\n\t * \tbrand: cars.brand,\n\t * \tcount: sql<number>`cast(count(${cars.id}) as int)`,\n\t * })\n\t *   .from(cars)\n\t *   .groupBy(cars.brand)\n\t *   .having(({ count }) => gt(count, 1));\n\t * ```\n\t */\n\thaving(\n\t\thaving: ((aliases: this['_']['selection']) => SQL | undefined) | SQL | undefined,\n\t): SQLiteSelectWithout<this, TDynamic, 'having'> {\n\t\tif (typeof having === 'function') {\n\t\t\thaving = having(\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\t\t}\n\t\tthis.config.having = having;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `group by` clause to the query.\n\t *\n\t * Calling this method will group rows that have the same values into summary rows, often used for aggregation purposes.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#aggregations}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Group and count people by their last names\n\t * await db.select({\n\t *    lastName: people.lastName,\n\t *    count: sql<number>`cast(count(*) as int)`\n\t * })\n\t *   .from(people)\n\t *   .groupBy(people.lastName);\n\t * ```\n\t */\n\tgroupBy(\n\t\tbuilder: (aliases: this['_']['selection']) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>,\n\t): SQLiteSelectWithout<this, TDynamic, 'groupBy'>;\n\tgroupBy(...columns: (SQLiteColumn | SQL)[]): SQLiteSelectWithout<this, TDynamic, 'groupBy'>;\n\tgroupBy(\n\t\t...columns:\n\t\t\t| [(aliases: this['_']['selection']) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>]\n\t\t\t| (SQLiteColumn | SQL | SQL.Aliased)[]\n\t): SQLiteSelectWithout<this, TDynamic, 'groupBy'> {\n\t\tif (typeof columns[0] === 'function') {\n\t\t\tconst groupBy = columns[0](\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\t\t\tthis.config.groupBy = Array.isArray(groupBy) ? groupBy : [groupBy];\n\t\t} else {\n\t\t\tthis.config.groupBy = columns as (SQLiteColumn | SQL | SQL.Aliased)[];\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `order by` clause to the query.\n\t *\n\t * Calling this method will sort the result-set in ascending or descending order. By default, the sort order is ascending.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#order-by}\n\t *\n\t * @example\n\t *\n\t * ```\n\t * // Select cars ordered by year\n\t * await db.select().from(cars).orderBy(cars.year);\n\t * ```\n\t *\n\t * You can specify whether results are in ascending or descending order with the `asc()` and `desc()` operators.\n\t *\n\t * ```ts\n\t * // Select cars ordered by year in descending order\n\t * await db.select().from(cars).orderBy(desc(cars.year));\n\t *\n\t * // Select cars ordered by year and price\n\t * await db.select().from(cars).orderBy(asc(cars.year), desc(cars.price));\n\t * ```\n\t */\n\torderBy(\n\t\tbuilder: (aliases: this['_']['selection']) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>,\n\t): SQLiteSelectWithout<this, TDynamic, 'orderBy'>;\n\torderBy(...columns: (SQLiteColumn | SQL)[]): SQLiteSelectWithout<this, TDynamic, 'orderBy'>;\n\torderBy(\n\t\t...columns:\n\t\t\t| [(aliases: this['_']['selection']) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>]\n\t\t\t| (SQLiteColumn | SQL | SQL.Aliased)[]\n\t): SQLiteSelectWithout<this, TDynamic, 'orderBy'> {\n\t\tif (typeof columns[0] === 'function') {\n\t\t\tconst orderBy = columns[0](\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\n\t\t\tconst orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];\n\n\t\t\tif (this.config.setOperators.length > 0) {\n\t\t\t\tthis.config.setOperators.at(-1)!.orderBy = orderByArray;\n\t\t\t} else {\n\t\t\t\tthis.config.orderBy = orderByArray;\n\t\t\t}\n\t\t} else {\n\t\t\tconst orderByArray = columns as (SQLiteColumn | SQL | SQL.Aliased)[];\n\n\t\t\tif (this.config.setOperators.length > 0) {\n\t\t\t\tthis.config.setOperators.at(-1)!.orderBy = orderByArray;\n\t\t\t} else {\n\t\t\t\tthis.config.orderBy = orderByArray;\n\t\t\t}\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `limit` clause to the query.\n\t *\n\t * Calling this method will set the maximum number of rows that will be returned by this query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#limit--offset}\n\t *\n\t * @param limit the `limit` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Get the first 10 people from this query.\n\t * await db.select().from(people).limit(10);\n\t * ```\n\t */\n\tlimit(limit: number | Placeholder): SQLiteSelectWithout<this, TDynamic, 'limit'> {\n\t\tif (this.config.setOperators.length > 0) {\n\t\t\tthis.config.setOperators.at(-1)!.limit = limit;\n\t\t} else {\n\t\t\tthis.config.limit = limit;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `offset` clause to the query.\n\t *\n\t * Calling this method will skip a number of rows when returning results from this query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#limit--offset}\n\t *\n\t * @param offset the `offset` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Get the 10th-20th people from this query.\n\t * await db.select().from(people).offset(10).limit(10);\n\t * ```\n\t */\n\toffset(offset: number | Placeholder): SQLiteSelectWithout<this, TDynamic, 'offset'> {\n\t\tif (this.config.setOperators.length > 0) {\n\t\t\tthis.config.setOperators.at(-1)!.offset = offset;\n\t\t} else {\n\t\t\tthis.config.offset = offset;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildSelectQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\tas<TAlias extends string>(\n\t\talias: TAlias,\n\t): SubqueryWithSelection<this['_']['selectedFields'], TAlias> {\n\t\treturn new Proxy(\n\t\t\tnew Subquery(this.getSQL(), this.config.fields, alias),\n\t\t\tnew SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t) as SubqueryWithSelection<this['_']['selectedFields'], TAlias>;\n\t}\n\n\t/** @internal */\n\toverride getSelectedFields(): this['_']['selectedFields'] {\n\t\treturn new Proxy(\n\t\t\tthis.config.fields,\n\t\t\tnew SelectionProxyHandler({ alias: this.tableName, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t) as this['_']['selectedFields'];\n\t}\n\n\t$dynamic(): SQLiteSelectDynamic<this> {\n\t\treturn this;\n\t}\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface SQLiteSelectBase<\n\tTTableName extends string | undefined,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTSelection extends ColumnsSelection,\n\tTSelectMode extends SelectMode = 'single',\n\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n\t\t: {},\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n\tTResult extends any[] = SelectResult<TSelection, TSelectMode, TNullabilityMap>[],\n\tTSelectedFields extends ColumnsSelection = BuildSubquerySelection<TSelection, TNullabilityMap>,\n> extends\n\tSQLiteSelectQueryBuilderBase<\n\t\tSQLiteSelectHKT,\n\t\tTTableName,\n\t\tTResultType,\n\t\tTRunResult,\n\t\tTSelection,\n\t\tTSelectMode,\n\t\tTNullabilityMap,\n\t\tTDynamic,\n\t\tTExcludedMethods,\n\t\tTResult,\n\t\tTSelectedFields\n\t>,\n\tQueryPromise<TResult>\n{}\n\nexport class SQLiteSelectBase<\n\tTTableName extends string | undefined,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTSelection,\n\tTSelectMode extends SelectMode = 'single',\n\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n\t\t: {},\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n\tTResult = SelectResult<TSelection, TSelectMode, TNullabilityMap>[],\n\tTSelectedFields extends ColumnsSelection = BuildSubquerySelection<TSelection, TNullabilityMap>,\n> extends SQLiteSelectQueryBuilderBase<\n\tSQLiteSelectHKT,\n\tTTableName,\n\tTResultType,\n\tTRunResult,\n\tTSelection,\n\tTSelectMode,\n\tTNullabilityMap,\n\tTDynamic,\n\tTExcludedMethods,\n\tTResult,\n\tTSelectedFields\n> implements RunnableQuery<TResult, 'sqlite'>, SQLWrapper {\n\tstatic override readonly [entityKind]: string = 'SQLiteSelect';\n\n\t/** @internal */\n\t_prepare(isOneTimeQuery = true): SQLiteSelectPrepare<this> {\n\t\tif (!this.session) {\n\t\t\tthrow new Error('Cannot execute a query on a query builder. Please use a database instance instead.');\n\t\t}\n\t\tconst fieldsList = orderSelectedFields<SQLiteColumn>(this.config.fields);\n\t\tconst query = this.session[isOneTimeQuery ? 'prepareOneTimeQuery' : 'prepareQuery'](\n\t\t\tthis.dialect.sqlToQuery(this.getSQL()),\n\t\t\tfieldsList,\n\t\t\t'all',\n\t\t\ttrue,\n\t\t);\n\t\tquery.joinsNotNullableMap = this.joinsNotNullableMap;\n\t\treturn query as ReturnType<this['prepare']>;\n\t}\n\n\tprepare(): SQLiteSelectPrepare<this> {\n\t\treturn this._prepare(false);\n\t}\n\n\trun: ReturnType<this['prepare']>['run'] = (placeholderValues) => {\n\t\treturn this._prepare().run(placeholderValues);\n\t};\n\n\tall: ReturnType<this['prepare']>['all'] = (placeholderValues) => {\n\t\treturn this._prepare().all(placeholderValues);\n\t};\n\n\tget: ReturnType<this['prepare']>['get'] = (placeholderValues) => {\n\t\treturn this._prepare().get(placeholderValues);\n\t};\n\n\tvalues: ReturnType<this['prepare']>['values'] = (placeholderValues) => {\n\t\treturn this._prepare().values(placeholderValues);\n\t};\n\n\tasync execute(): Promise<SQLiteSelectExecute<this>> {\n\t\treturn this.all() as SQLiteSelectExecute<this>;\n\t}\n}\n\napplyMixins(SQLiteSelectBase, [QueryPromise]);\n\nfunction createSetOperator(type: SetOperator, isAll: boolean): SQLiteCreateSetOperatorFn {\n\treturn (leftSelect, rightSelect, ...restSelects) => {\n\t\tconst setOperators = [rightSelect, ...restSelects].map((select) => ({\n\t\t\ttype,\n\t\t\tisAll,\n\t\t\trightSelect: select as AnySQLiteSelect,\n\t\t}));\n\n\t\tfor (const setOperator of setOperators) {\n\t\t\tif (!haveSameKeys((leftSelect as any).getSelectedFields(), setOperator.rightSelect.getSelectedFields())) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Set operator error (union / intersect / except): selected fields are not the same or are in a different order',\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn (leftSelect as AnySQLiteSelect).addSetOperators(setOperators) as any;\n\t};\n}\n\nconst getSQLiteSetOperators = () => ({\n\tunion,\n\tunionAll,\n\tintersect,\n\texcept,\n});\n\n/**\n * Adds `union` set operator to the query.\n *\n * Calling this method will combine the result sets of the `select` statements and remove any duplicate rows that appear across them.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#union}\n *\n * @example\n *\n * ```ts\n * // Select all unique names from customers and users tables\n * import { union } from 'drizzle-orm/sqlite-core'\n *\n * await union(\n *   db.select({ name: users.name }).from(users),\n *   db.select({ name: customers.name }).from(customers)\n * );\n * // or\n * await db.select({ name: users.name })\n *   .from(users)\n *   .union(\n *     db.select({ name: customers.name }).from(customers)\n *   );\n * ```\n */\nexport const union = createSetOperator('union', false);\n\n/**\n * Adds `union all` set operator to the query.\n *\n * Calling this method will combine the result-set of the `select` statements and keep all duplicate rows that appear across them.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#union-all}\n *\n * @example\n *\n * ```ts\n * // Select all transaction ids from both online and in-store sales\n * import { unionAll } from 'drizzle-orm/sqlite-core'\n *\n * await unionAll(\n *   db.select({ transaction: onlineSales.transactionId }).from(onlineSales),\n *   db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n * );\n * // or\n * await db.select({ transaction: onlineSales.transactionId })\n *   .from(onlineSales)\n *   .unionAll(\n *     db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n *   );\n * ```\n */\nexport const unionAll = createSetOperator('union', true);\n\n/**\n * Adds `intersect` set operator to the query.\n *\n * Calling this method will retain only the rows that are present in both result sets and eliminate duplicates.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect}\n *\n * @example\n *\n * ```ts\n * // Select course names that are offered in both departments A and B\n * import { intersect } from 'drizzle-orm/sqlite-core'\n *\n * await intersect(\n *   db.select({ courseName: depA.courseName }).from(depA),\n *   db.select({ courseName: depB.courseName }).from(depB)\n * );\n * // or\n * await db.select({ courseName: depA.courseName })\n *   .from(depA)\n *   .intersect(\n *     db.select({ courseName: depB.courseName }).from(depB)\n *   );\n * ```\n */\nexport const intersect = createSetOperator('intersect', false);\n\n/**\n * Adds `except` set operator to the query.\n *\n * Calling this method will retrieve all unique rows from the left query, except for the rows that are present in the result set of the right query.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#except}\n *\n * @example\n *\n * ```ts\n * // Select all courses offered in department A but not in department B\n * import { except } from 'drizzle-orm/sqlite-core'\n *\n * await except(\n *   db.select({ courseName: depA.courseName }).from(depA),\n *   db.select({ courseName: depB.courseName }).from(depB)\n * );\n * // or\n * await db.select({ courseName: depA.courseName })\n *   .from(depA)\n *   .except(\n *     db.select({ courseName: depB.courseName }).from(depB)\n *   );\n * ```\n */\nexport const except = createSetOperator('except', false);\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 5367, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5373, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/query-builders/query-builder.ts"],"sourcesContent":["import { entityKind, is } from '~/entity.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { ColumnsSelection } from '~/sql/sql.ts';\nimport type { SQLiteDialectConfig } from '~/sqlite-core/dialect.ts';\nimport { SQLiteDialect, SQLiteSyncDialect } from '~/sqlite-core/dialect.ts';\nimport type { WithSubqueryWithSelection } from '~/sqlite-core/subquery.ts';\nimport { WithSubquery } from '~/subquery.ts';\nimport { SQLiteSelectBuilder } from './select.ts';\nimport type { SelectedFields } from './select.types.ts';\n\nexport class QueryBuilder {\n\tstatic readonly [entityKind]: string = 'SQLiteQueryBuilder';\n\n\tprivate dialect: SQLiteDialect | undefined;\n\tprivate dialectConfig: SQLiteDialectConfig | undefined;\n\n\tconstructor(dialect?: SQLiteDialect | SQLiteDialectConfig) {\n\t\tthis.dialect = is(dialect, SQLiteDialect) ? dialect : undefined;\n\t\tthis.dialectConfig = is(dialect, SQLiteDialect) ? undefined : dialect;\n\t}\n\n\t$with<TAlias extends string>(alias: TAlias) {\n\t\tconst queryBuilder = this;\n\n\t\treturn {\n\t\t\tas<TSelection extends ColumnsSelection>(\n\t\t\t\tqb: TypedQueryBuilder<TSelection> | ((qb: QueryBuilder) => TypedQueryBuilder<TSelection>),\n\t\t\t): WithSubqueryWithSelection<TSelection, TAlias> {\n\t\t\t\tif (typeof qb === 'function') {\n\t\t\t\t\tqb = qb(queryBuilder);\n\t\t\t\t}\n\n\t\t\t\treturn new Proxy(\n\t\t\t\t\tnew WithSubquery(qb.getSQL(), qb.getSelectedFields() as SelectedFields, alias, true),\n\t\t\t\t\tnew SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t\t\t) as WithSubqueryWithSelection<TSelection, TAlias>;\n\t\t\t},\n\t\t};\n\t}\n\n\twith(...queries: WithSubquery[]) {\n\t\tconst self = this;\n\n\t\tfunction select(): SQLiteSelectBuilder<undefined, 'sync', void, 'qb'>;\n\t\tfunction select<TSelection extends SelectedFields>(\n\t\t\tfields: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection, 'sync', void, 'qb'>;\n\t\tfunction select<TSelection extends SelectedFields>(\n\t\t\tfields?: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection | undefined, 'sync', void, 'qb'> {\n\t\t\treturn new SQLiteSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: undefined,\n\t\t\t\tdialect: self.getDialect(),\n\t\t\t\twithList: queries,\n\t\t\t});\n\t\t}\n\n\t\tfunction selectDistinct(): SQLiteSelectBuilder<undefined, 'sync', void, 'qb'>;\n\t\tfunction selectDistinct<TSelection extends SelectedFields>(\n\t\t\tfields: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection, 'sync', void, 'qb'>;\n\t\tfunction selectDistinct<TSelection extends SelectedFields>(\n\t\t\tfields?: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection | undefined, 'sync', void, 'qb'> {\n\t\t\treturn new SQLiteSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: undefined,\n\t\t\t\tdialect: self.getDialect(),\n\t\t\t\twithList: queries,\n\t\t\t\tdistinct: true,\n\t\t\t});\n\t\t}\n\n\t\treturn { select, selectDistinct };\n\t}\n\n\tselect(): SQLiteSelectBuilder<undefined, 'sync', void, 'qb'>;\n\tselect<TSelection extends SelectedFields>(\n\t\tfields: TSelection,\n\t): SQLiteSelectBuilder<TSelection, 'sync', void, 'qb'>;\n\tselect<TSelection extends SelectedFields>(\n\t\tfields?: TSelection,\n\t): SQLiteSelectBuilder<TSelection | undefined, 'sync', void, 'qb'> {\n\t\treturn new SQLiteSelectBuilder({ fields: fields ?? undefined, session: undefined, dialect: this.getDialect() });\n\t}\n\n\tselectDistinct(): SQLiteSelectBuilder<undefined, 'sync', void, 'qb'>;\n\tselectDistinct<TSelection extends SelectedFields>(\n\t\tfields: TSelection,\n\t): SQLiteSelectBuilder<TSelection, 'sync', void, 'qb'>;\n\tselectDistinct<TSelection extends SelectedFields>(\n\t\tfields?: TSelection,\n\t): SQLiteSelectBuilder<TSelection | undefined, 'sync', void, 'qb'> {\n\t\treturn new SQLiteSelectBuilder({\n\t\t\tfields: fields ?? undefined,\n\t\t\tsession: undefined,\n\t\t\tdialect: this.getDialect(),\n\t\t\tdistinct: true,\n\t\t});\n\t}\n\n\t// Lazy load dialect to avoid circular dependency\n\tprivate getDialect() {\n\t\tif (!this.dialect) {\n\t\t\tthis.dialect = new SQLiteSyncDialect(this.dialectConfig);\n\t\t}\n\n\t\treturn this.dialect;\n\t}\n}\n"],"names":[],"mappings":";;;AAAA,SAAS,YAAY,UAAU;AAK/B,SAAS,eAAe,yBAAyB;AAEjD,SAAS,oBAAoB;AAL7B,SAAS,6BAA6B;AAMtC,SAAS,2BAA2B;;;;;;AAG7B,MAAM,aAAa;IACzB,OAAA,0IAAiB,aAAU,CAAA,GAAY,qBAAA;IAE/B,QAAA;IACA,cAAA;IAER,YAAY,OAAA,CAA+C;QAC1D,IAAA,CAAK,OAAA,gJAAU,KAAA,EAAG,qKAAS,gBAAa,IAAI,UAAU,KAAA;QACtD,IAAA,CAAK,aAAA,IAAgB,iJAAA,EAAG,qKAAS,gBAAa,IAAI,KAAA,IAAY;IAC/D;IAEA,MAA6B,KAAA,EAAe;QAC3C,MAAM,eAAe,IAAA;QAErB,OAAO;YACN,IACC,EAAA,EACgD;gBAChD,IAAI,OAAO,OAAO,YAAY;oBAC7B,KAAK,GAAG,YAAY;gBACrB;gBAEA,OAAO,IAAI,MACV,+IAAI,eAAA,CAAa,GAAG,MAAA,CAAO,GAAG,GAAG,iBAAA,CAAkB,GAAqB,OAAO,IAAI,GACnF,IAAI,6KAAA,CAAsB;oBAAE;oBAAO,oBAAoB;oBAAS,aAAa;gBAAQ,CAAC;YAExF;QACD;IACD;IAEA,KAAA,GAAQ,OAAA,EAAyB;QAChC,MAAM,OAAO,IAAA;QAMb,SAAS,OACR,MAAA,EACkE;YAClE,OAAO,oLAAI,sBAAA,CAAoB;gBAC9B,QAAQ,UAAU,KAAA;gBAClB,SAAS,KAAA;gBACT,SAAS,KAAK,UAAA,CAAW;gBACzB,UAAU;YACX,CAAC;QACF;QAMA,SAAS,eACR,MAAA,EACkE;YAClE,OAAO,oLAAI,sBAAA,CAAoB;gBAC9B,QAAQ,UAAU,KAAA;gBAClB,SAAS,KAAA;gBACT,SAAS,KAAK,UAAA,CAAW;gBACzB,UAAU;gBACV,UAAU;YACX,CAAC;QACF;QAEA,OAAO;YAAE;YAAQ;QAAe;IACjC;IAMA,OACC,MAAA,EACkE;QAClE,OAAO,oLAAI,sBAAA,CAAoB;YAAE,QAAQ,UAAU,KAAA;YAAW,SAAS,KAAA;YAAW,SAAS,IAAA,CAAK,UAAA,CAAW;QAAE,CAAC;IAC/G;IAMA,eACC,MAAA,EACkE;QAClE,OAAO,oLAAI,sBAAA,CAAoB;YAC9B,QAAQ,UAAU,KAAA;YAClB,SAAS,KAAA;YACT,SAAS,IAAA,CAAK,UAAA,CAAW;YACzB,UAAU;QACX,CAAC;IACF;IAAA,iDAAA;IAGQ,aAAa;QACpB,IAAI,CAAC,IAAA,CAAK,OAAA,EAAS;YAClB,IAAA,CAAK,OAAA,GAAU,gKAAI,oBAAA,CAAkB,IAAA,CAAK,aAAa;QACxD;QAEA,OAAO,IAAA,CAAK,OAAA;IACb;AACD","ignoreList":[0]}},
    {"offset": {"line": 5458, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5464, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/query-builders/count.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport { SQL, sql, type SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteSession } from '../session.ts';\nimport type { SQLiteTable } from '../table.ts';\nimport type { SQLiteView } from '../view.ts';\n\nexport class SQLiteCountBuilder<\n\tTSession extends SQLiteSession<any, any, any, any>,\n> extends SQL<number> implements Promise<number>, SQLWrapper {\n\tprivate sql: SQL<number>;\n\n\tstatic override readonly [entityKind] = 'SQLiteCountBuilderAsync';\n\t[Symbol.toStringTag] = 'SQLiteCountBuilderAsync';\n\n\tprivate session: TSession;\n\n\tprivate static buildEmbeddedCount(\n\t\tsource: SQLiteTable | SQLiteView | SQL | SQLWrapper,\n\t\tfilters?: SQL<unknown>,\n\t): SQL<number> {\n\t\treturn sql<number>`(select count(*) from ${source}${sql.raw(' where ').if(filters)}${filters})`;\n\t}\n\n\tprivate static buildCount(\n\t\tsource: SQLiteTable | SQLiteView | SQL | SQLWrapper,\n\t\tfilters?: SQL<unknown>,\n\t): SQL<number> {\n\t\treturn sql<number>`select count(*) from ${source}${sql.raw(' where ').if(filters)}${filters}`;\n\t}\n\n\tconstructor(\n\t\treadonly params: {\n\t\t\tsource: SQLiteTable | SQLiteView | SQL | SQLWrapper;\n\t\t\tfilters?: SQL<unknown>;\n\t\t\tsession: TSession;\n\t\t},\n\t) {\n\t\tsuper(SQLiteCountBuilder.buildEmbeddedCount(params.source, params.filters).queryChunks);\n\n\t\tthis.session = params.session;\n\n\t\tthis.sql = SQLiteCountBuilder.buildCount(\n\t\t\tparams.source,\n\t\t\tparams.filters,\n\t\t);\n\t}\n\n\tthen<TResult1 = number, TResult2 = never>(\n\t\tonfulfilled?: ((value: number) => TResult1 | PromiseLike<TResult1>) | null | undefined,\n\t\tonrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined,\n\t): Promise<TResult1 | TResult2> {\n\t\treturn Promise.resolve(this.session.count(this.sql)).then(\n\t\t\tonfulfilled,\n\t\t\tonrejected,\n\t\t);\n\t}\n\n\tcatch(\n\t\tonRejected?: ((reason: any) => never | PromiseLike<never>) | null | undefined,\n\t): Promise<number> {\n\t\treturn this.then(undefined, onRejected);\n\t}\n\n\tfinally(onFinally?: (() => void) | null | undefined): Promise<number> {\n\t\treturn this.then(\n\t\t\t(value) => {\n\t\t\t\tonFinally?.();\n\t\t\t\treturn value;\n\t\t\t},\n\t\t\t(reason) => {\n\t\t\t\tonFinally?.();\n\t\t\t\tthrow reason;\n\t\t\t},\n\t\t);\n\t}\n}\n"],"names":[],"mappings":";;;AAAA,SAAS,kBAAkB;AAC3B,SAAS,KAAK,WAA4B;;;AAKnC,MAAM,wKAEH,MAAA,CAAmD;IAsB5D,YACU,MAAA,CAKR;QACD,KAAA,CAAM,mBAAmB,kBAAA,CAAmB,OAAO,MAAA,EAAQ,OAAO,OAAO,EAAE,WAAW;QAN7E,IAAA,CAAA,MAAA,GAAA;QAQT,IAAA,CAAK,OAAA,GAAU,OAAO,OAAA;QAEtB,IAAA,CAAK,GAAA,GAAM,mBAAmB,UAAA,CAC7B,OAAO,MAAA,EACP,OAAO,OAAA;IAET;IApCQ,IAAA;IAER,OAAA,0IAA0B,aAAU,CAAA,GAAI,0BAAA;IACxC,CAAC,OAAO,WAAW,CAAA,GAAI,0BAAA;IAEf,QAAA;IAER,OAAe,mBACd,MAAA,EACA,OAAA,EACc;QACd,oJAAO,MAAA,CAAA,sBAAA,EAAoC,MAAM,CAAA,+IAAG,MAAA,CAAI,GAAA,CAAI,SAAS,EAAE,EAAA,CAAG,OAAO,CAAC,CAAA,EAAG,OAAO,CAAA,CAAA,CAAA;IAC7F;IAEA,OAAe,WACd,MAAA,EACA,OAAA,EACc;QACd,oJAAO,MAAA,CAAA,qBAAA,EAAmC,MAAM,CAAA,+IAAG,MAAA,CAAI,GAAA,CAAI,SAAS,EAAE,EAAA,CAAG,OAAO,CAAC,CAAA,EAAG,OAAO,CAAA,CAAA;IAC5F;IAmBA,KACC,WAAA,EACA,UAAA,EAC+B;QAC/B,OAAO,QAAQ,OAAA,CAAQ,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,IAAA,CAAK,GAAG,CAAC,EAAE,IAAA,CACpD,aACA;IAEF;IAEA,MACC,UAAA,EACkB;QAClB,OAAO,IAAA,CAAK,IAAA,CAAK,KAAA,GAAW,UAAU;IACvC;IAEA,QAAQ,SAAA,EAA8D;QACrE,OAAO,IAAA,CAAK,IAAA,CACX,CAAC,UAAU;YACV,YAAY;YACZ,OAAO;QACR,GACA,CAAC,WAAW;YACX,YAAY;YACZ,MAAM;QACP;IAEF;AACD","ignoreList":[0]}},
    {"offset": {"line": 5506, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5512, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/query-builders/update.ts"],"sourcesContent":["import type { GetColumnData } from '~/column.ts';\nimport { entityKind, is } from '~/entity.ts';\nimport type { JoinType, SelectResultFields } from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { Placeholder, Query, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteDialect } from '~/sqlite-core/dialect.ts';\nimport type { SQLitePreparedQuery, SQLiteSession } from '~/sqlite-core/session.ts';\nimport { SQLiteTable } from '~/sqlite-core/table.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { Table } from '~/table.ts';\nimport {\n\ttype DrizzleTypeError,\n\tgetTableLikeName,\n\tmapUpdateSet,\n\torderSelectedFields,\n\ttype UpdateSet,\n\ttype ValueOrArray,\n} from '~/utils.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport type { SQLiteColumn } from '../columns/common.ts';\nimport { SQLiteViewBase } from '../view-base.ts';\nimport type { SelectedFields, SelectedFieldsOrdered, SQLiteSelectJoinConfig } from './select.types.ts';\n\nexport interface SQLiteUpdateConfig {\n\twhere?: SQL | undefined;\n\tlimit?: number | Placeholder;\n\torderBy?: (SQLiteColumn | SQL | SQL.Aliased)[];\n\tset: UpdateSet;\n\ttable: SQLiteTable;\n\tfrom?: SQLiteTable | Subquery | SQLiteViewBase | SQL;\n\tjoins: SQLiteSelectJoinConfig[];\n\treturning?: SelectedFieldsOrdered;\n\twithList?: Subquery[];\n}\n\nexport type SQLiteUpdateSetSource<TTable extends SQLiteTable> =\n\t& {\n\t\t[Key in keyof TTable['$inferInsert']]?:\n\t\t\t| GetColumnData<TTable['_']['columns'][Key], 'query'>\n\t\t\t| SQL\n\t\t\t| SQLiteColumn;\n\t}\n\t& {};\n\nexport class SQLiteUpdateBuilder<\n\tTTable extends SQLiteTable,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteUpdateBuilder';\n\n\tdeclare readonly _: {\n\t\treadonly table: TTable;\n\t};\n\n\tconstructor(\n\t\tprotected table: TTable,\n\t\tprotected session: SQLiteSession<any, any, any, any>,\n\t\tprotected dialect: SQLiteDialect,\n\t\tprivate withList?: Subquery[],\n\t) {}\n\n\tset(\n\t\tvalues: SQLiteUpdateSetSource<TTable>,\n\t): SQLiteUpdateWithout<\n\t\tSQLiteUpdateBase<TTable, TResultType, TRunResult>,\n\t\tfalse,\n\t\t'leftJoin' | 'rightJoin' | 'innerJoin' | 'fullJoin'\n\t> {\n\t\treturn new SQLiteUpdateBase(\n\t\t\tthis.table,\n\t\t\tmapUpdateSet(this.table, values),\n\t\t\tthis.session,\n\t\t\tthis.dialect,\n\t\t\tthis.withList,\n\t\t) as any;\n\t}\n}\n\nexport type SQLiteUpdateWithout<\n\tT extends AnySQLiteUpdate,\n\tTDynamic extends boolean,\n\tK extends keyof T & string,\n> = TDynamic extends true ? T : Omit<\n\tSQLiteUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tT['_']['from'],\n\t\tT['_']['returning'],\n\t\tTDynamic,\n\t\tT['_']['excludedMethods'] | K\n\t>,\n\tT['_']['excludedMethods'] | K\n>;\n\nexport type SQLiteUpdateWithJoins<\n\tT extends AnySQLiteUpdate,\n\tTDynamic extends boolean,\n\tTFrom extends SQLiteTable | Subquery | SQLiteViewBase | SQL,\n> = TDynamic extends true ? T : Omit<\n\tSQLiteUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tTFrom,\n\t\tT['_']['returning'],\n\t\tTDynamic,\n\t\tExclude<T['_']['excludedMethods'] | 'from', 'leftJoin' | 'rightJoin' | 'innerJoin' | 'fullJoin'>\n\t>,\n\tExclude<T['_']['excludedMethods'] | 'from', 'leftJoin' | 'rightJoin' | 'innerJoin' | 'fullJoin'>\n>;\n\nexport type SQLiteUpdateReturningAll<T extends AnySQLiteUpdate, TDynamic extends boolean> = SQLiteUpdateWithout<\n\tSQLiteUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tT['_']['from'],\n\t\tT['_']['table']['$inferSelect'],\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteUpdateReturning<\n\tT extends AnySQLiteUpdate,\n\tTDynamic extends boolean,\n\tTSelectedFields extends SelectedFields,\n> = SQLiteUpdateWithout<\n\tSQLiteUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tT['_']['from'],\n\t\tSelectResultFields<TSelectedFields>,\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteUpdateExecute<T extends AnySQLiteUpdate> = T['_']['returning'] extends undefined ? T['_']['runResult']\n\t: T['_']['returning'][];\n\nexport type SQLiteUpdatePrepare<T extends AnySQLiteUpdate> = SQLitePreparedQuery<\n\t{\n\t\ttype: T['_']['resultType'];\n\t\trun: T['_']['runResult'];\n\t\tall: T['_']['returning'] extends undefined ? DrizzleTypeError<'.all() cannot be used without .returning()'>\n\t\t\t: T['_']['returning'][];\n\t\tget: T['_']['returning'] extends undefined ? DrizzleTypeError<'.get() cannot be used without .returning()'>\n\t\t\t: T['_']['returning'];\n\t\tvalues: T['_']['returning'] extends undefined ? DrizzleTypeError<'.values() cannot be used without .returning()'>\n\t\t\t: any[][];\n\t\texecute: SQLiteUpdateExecute<T>;\n\t}\n>;\n\nexport type SQLiteUpdateJoinFn<\n\tT extends AnySQLiteUpdate,\n> = <\n\tTJoinedTable extends SQLiteTable | Subquery | SQLiteViewBase | SQL,\n>(\n\ttable: TJoinedTable,\n\ton:\n\t\t| (\n\t\t\t(\n\t\t\t\tupdateTable: T['_']['table']['_']['columns'],\n\t\t\t\tfrom: T['_']['from'] extends SQLiteTable ? T['_']['from']['_']['columns']\n\t\t\t\t\t: T['_']['from'] extends Subquery | SQLiteViewBase ? T['_']['from']['_']['selectedFields']\n\t\t\t\t\t: never,\n\t\t\t) => SQL | undefined\n\t\t)\n\t\t| SQL\n\t\t| undefined,\n) => T;\n\nexport type SQLiteUpdateDynamic<T extends AnySQLiteUpdate> = SQLiteUpdate<\n\tT['_']['table'],\n\tT['_']['resultType'],\n\tT['_']['runResult'],\n\tT['_']['returning']\n>;\n\nexport type SQLiteUpdate<\n\tTTable extends SQLiteTable = SQLiteTable,\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = any,\n\tTFrom extends SQLiteTable | Subquery | SQLiteViewBase | SQL | undefined = undefined,\n\tTReturning extends Record<string, unknown> | undefined = Record<string, unknown> | undefined,\n> = SQLiteUpdateBase<TTable, TResultType, TRunResult, TFrom, TReturning, true, never>;\n\nexport type AnySQLiteUpdate = SQLiteUpdateBase<any, any, any, any, any, any, any>;\n\nexport interface SQLiteUpdateBase<\n\tTTable extends SQLiteTable = SQLiteTable,\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = unknown,\n\tTFrom extends SQLiteTable | Subquery | SQLiteViewBase | SQL | undefined = undefined,\n\tTReturning = undefined,\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n> extends SQLWrapper, QueryPromise<TReturning extends undefined ? TRunResult : TReturning[]> {\n\treadonly _: {\n\t\treadonly dialect: 'sqlite';\n\t\treadonly table: TTable;\n\t\treadonly resultType: TResultType;\n\t\treadonly runResult: TRunResult;\n\t\treadonly from: TFrom;\n\t\treadonly returning: TReturning;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TReturning extends undefined ? TRunResult : TReturning[];\n\t};\n}\n\nexport class SQLiteUpdateBase<\n\tTTable extends SQLiteTable = SQLiteTable,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = unknown,\n\tTFrom extends SQLiteTable | Subquery | SQLiteViewBase | SQL | undefined = undefined,\n\tTReturning = undefined,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTDynamic extends boolean = false,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<TReturning extends undefined ? TRunResult : TReturning[]>\n\timplements RunnableQuery<TReturning extends undefined ? TRunResult : TReturning[], 'sqlite'>, SQLWrapper\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteUpdate';\n\n\t/** @internal */\n\tconfig: SQLiteUpdateConfig;\n\n\tconstructor(\n\t\ttable: TTable,\n\t\tset: UpdateSet,\n\t\tprivate session: SQLiteSession<any, any, any, any>,\n\t\tprivate dialect: SQLiteDialect,\n\t\twithList?: Subquery[],\n\t) {\n\t\tsuper();\n\t\tthis.config = { set, table, withList, joins: [] };\n\t}\n\n\tfrom<TFrom extends SQLiteTable | Subquery | SQLiteViewBase | SQL>(\n\t\tsource: TFrom,\n\t): SQLiteUpdateWithJoins<this, TDynamic, TFrom> {\n\t\tthis.config.from = source;\n\t\treturn this as any;\n\t}\n\n\tprivate createJoin<TJoinType extends JoinType>(\n\t\tjoinType: TJoinType,\n\t): SQLiteUpdateJoinFn<this> {\n\t\treturn ((\n\t\t\ttable: SQLiteTable | Subquery | SQLiteViewBase | SQL,\n\t\t\ton: ((updateTable: TTable, from: TFrom) => SQL | undefined) | SQL | undefined,\n\t\t) => {\n\t\t\tconst tableName = getTableLikeName(table);\n\n\t\t\tif (typeof tableName === 'string' && this.config.joins.some((join) => join.alias === tableName)) {\n\t\t\t\tthrow new Error(`Alias \"${tableName}\" is already used in this query`);\n\t\t\t}\n\n\t\t\tif (typeof on === 'function') {\n\t\t\t\tconst from = this.config.from\n\t\t\t\t\t? is(table, SQLiteTable)\n\t\t\t\t\t\t? table[Table.Symbol.Columns]\n\t\t\t\t\t\t: is(table, Subquery)\n\t\t\t\t\t\t? table._.selectedFields\n\t\t\t\t\t\t: is(table, SQLiteViewBase)\n\t\t\t\t\t\t? table[ViewBaseConfig].selectedFields\n\t\t\t\t\t\t: undefined\n\t\t\t\t\t: undefined;\n\t\t\t\ton = on(\n\t\t\t\t\tnew Proxy(\n\t\t\t\t\t\tthis.config.table[Table.Symbol.Columns],\n\t\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t\t) as any,\n\t\t\t\t\tfrom && new Proxy(\n\t\t\t\t\t\tfrom,\n\t\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t\t) as any,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.config.joins.push({ on, table, joinType, alias: tableName });\n\n\t\t\treturn this as any;\n\t\t}) as any;\n\t}\n\n\tleftJoin = this.createJoin('left');\n\n\trightJoin = this.createJoin('right');\n\n\tinnerJoin = this.createJoin('inner');\n\n\tfullJoin = this.createJoin('full');\n\n\t/**\n\t * Adds a 'where' clause to the query.\n\t *\n\t * Calling this method will update only those rows that fulfill a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/update}\n\t *\n\t * @param where the 'where' clause.\n\t *\n\t * @example\n\t * You can use conditional operators and `sql function` to filter the rows to be updated.\n\t *\n\t * ```ts\n\t * // Update all cars with green color\n\t * db.update(cars).set({ color: 'red' })\n\t *   .where(eq(cars.color, 'green'));\n\t * // or\n\t * db.update(cars).set({ color: 'red' })\n\t *   .where(sql`${cars.color} = 'green'`)\n\t * ```\n\t *\n\t * You can logically combine conditional operators with `and()` and `or()` operators:\n\t *\n\t * ```ts\n\t * // Update all BMW cars with a green color\n\t * db.update(cars).set({ color: 'red' })\n\t *   .where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n\t *\n\t * // Update all cars with the green or blue color\n\t * db.update(cars).set({ color: 'red' })\n\t *   .where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n\t * ```\n\t */\n\twhere(where: SQL | undefined): SQLiteUpdateWithout<this, TDynamic, 'where'> {\n\t\tthis.config.where = where;\n\t\treturn this as any;\n\t}\n\n\torderBy(\n\t\tbuilder: (updateTable: TTable) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>,\n\t): SQLiteUpdateWithout<this, TDynamic, 'orderBy'>;\n\torderBy(...columns: (SQLiteColumn | SQL | SQL.Aliased)[]): SQLiteUpdateWithout<this, TDynamic, 'orderBy'>;\n\torderBy(\n\t\t...columns:\n\t\t\t| [(updateTable: TTable) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>]\n\t\t\t| (SQLiteColumn | SQL | SQL.Aliased)[]\n\t): SQLiteUpdateWithout<this, TDynamic, 'orderBy'> {\n\t\tif (typeof columns[0] === 'function') {\n\t\t\tconst orderBy = columns[0](\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.table[Table.Symbol.Columns],\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' }),\n\t\t\t\t) as any,\n\t\t\t);\n\n\t\t\tconst orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];\n\t\t\tthis.config.orderBy = orderByArray;\n\t\t} else {\n\t\t\tconst orderByArray = columns as (SQLiteColumn | SQL | SQL.Aliased)[];\n\t\t\tthis.config.orderBy = orderByArray;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\tlimit(limit: number | Placeholder): SQLiteUpdateWithout<this, TDynamic, 'limit'> {\n\t\tthis.config.limit = limit;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `returning` clause to the query.\n\t *\n\t * Calling this method will return the specified fields of the updated rows. If no fields are specified, all fields will be returned.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/update#update-with-returning}\n\t *\n\t * @example\n\t * ```ts\n\t * // Update all cars with the green color and return all fields\n\t * const updatedCars: Car[] = await db.update(cars)\n\t *   .set({ color: 'red' })\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning();\n\t *\n\t * // Update all cars with the green color and return only their id and brand fields\n\t * const updatedCarsIdsAndBrands: { id: number, brand: string }[] = await db.update(cars)\n\t *   .set({ color: 'red' })\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning({ id: cars.id, brand: cars.brand });\n\t * ```\n\t */\n\treturning(): SQLiteUpdateReturningAll<this, TDynamic>;\n\treturning<TSelectedFields extends SelectedFields>(\n\t\tfields: TSelectedFields,\n\t): SQLiteUpdateReturning<this, TDynamic, TSelectedFields>;\n\treturning(\n\t\tfields: SelectedFields = this.config.table[SQLiteTable.Symbol.Columns],\n\t): SQLiteUpdateWithout<AnySQLiteUpdate, TDynamic, 'returning'> {\n\t\tthis.config.returning = orderSelectedFields<SQLiteColumn>(fields);\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildUpdateQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\t/** @internal */\n\t_prepare(isOneTimeQuery = true): SQLiteUpdatePrepare<this> {\n\t\treturn this.session[isOneTimeQuery ? 'prepareOneTimeQuery' : 'prepareQuery'](\n\t\t\tthis.dialect.sqlToQuery(this.getSQL()),\n\t\t\tthis.config.returning,\n\t\t\tthis.config.returning ? 'all' : 'run',\n\t\t\ttrue,\n\t\t) as SQLiteUpdatePrepare<this>;\n\t}\n\n\tprepare(): SQLiteUpdatePrepare<this> {\n\t\treturn this._prepare(false);\n\t}\n\n\trun: ReturnType<this['prepare']>['run'] = (placeholderValues) => {\n\t\treturn this._prepare().run(placeholderValues);\n\t};\n\n\tall: ReturnType<this['prepare']>['all'] = (placeholderValues) => {\n\t\treturn this._prepare().all(placeholderValues);\n\t};\n\n\tget: ReturnType<this['prepare']>['get'] = (placeholderValues) => {\n\t\treturn this._prepare().get(placeholderValues);\n\t};\n\n\tvalues: ReturnType<this['prepare']>['values'] = (placeholderValues) => {\n\t\treturn this._prepare().values(placeholderValues);\n\t};\n\n\toverride async execute(): Promise<SQLiteUpdateExecute<this>> {\n\t\treturn (this.config.returning ? this.all() : this.run()) as SQLiteUpdateExecute<this>;\n\t}\n\n\t$dynamic(): SQLiteUpdateDynamic<this> {\n\t\treturn this as any;\n\t}\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 5687, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5693, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/query-builders/insert.ts"],"sourcesContent":["import { entityKind, is } from '~/entity.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type { SelectResultFields } from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { Placeholder, Query, SQLWrapper } from '~/sql/sql.ts';\nimport { Param, SQL, sql } from '~/sql/sql.ts';\nimport type { SQLiteDialect } from '~/sqlite-core/dialect.ts';\nimport type { IndexColumn } from '~/sqlite-core/indexes.ts';\nimport type { SQLitePreparedQuery, SQLiteSession } from '~/sqlite-core/session.ts';\nimport { SQLiteTable } from '~/sqlite-core/table.ts';\nimport type { Subquery } from '~/subquery.ts';\nimport { Columns, Table } from '~/table.ts';\nimport { type DrizzleTypeError, haveSameKeys, mapUpdateSet, orderSelectedFields, type Simplify } from '~/utils.ts';\nimport type { AnySQLiteColumn, SQLiteColumn } from '../columns/common.ts';\nimport { QueryBuilder } from './query-builder.ts';\nimport type { SelectedFieldsFlat, SelectedFieldsOrdered } from './select.types.ts';\nimport type { SQLiteUpdateSetSource } from './update.ts';\n\nexport interface SQLiteInsertConfig<TTable extends SQLiteTable = SQLiteTable> {\n\ttable: TTable;\n\tvalues: Record<string, Param | SQL>[] | SQLiteInsertSelectQueryBuilder<TTable> | SQL;\n\twithList?: Subquery[];\n\tonConflict?: SQL;\n\treturning?: SelectedFieldsOrdered;\n\tselect?: boolean;\n}\n\nexport type SQLiteInsertValue<TTable extends SQLiteTable> = Simplify<\n\t{\n\t\t[Key in keyof TTable['$inferInsert']]: TTable['$inferInsert'][Key] | SQL | Placeholder;\n\t}\n>;\n\nexport type SQLiteInsertSelectQueryBuilder<TTable extends SQLiteTable> = TypedQueryBuilder<\n\t{ [K in keyof TTable['$inferInsert']]: AnySQLiteColumn | SQL | SQL.Aliased | TTable['$inferInsert'][K] }\n>;\n\nexport class SQLiteInsertBuilder<\n\tTTable extends SQLiteTable,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteInsertBuilder';\n\n\tconstructor(\n\t\tprotected table: TTable,\n\t\tprotected session: SQLiteSession<any, any, any, any>,\n\t\tprotected dialect: SQLiteDialect,\n\t\tprivate withList?: Subquery[],\n\t) {}\n\n\tvalues(value: SQLiteInsertValue<TTable>): SQLiteInsertBase<TTable, TResultType, TRunResult>;\n\tvalues(values: SQLiteInsertValue<TTable>[]): SQLiteInsertBase<TTable, TResultType, TRunResult>;\n\tvalues(\n\t\tvalues: SQLiteInsertValue<TTable> | SQLiteInsertValue<TTable>[],\n\t): SQLiteInsertBase<TTable, TResultType, TRunResult> {\n\t\tvalues = Array.isArray(values) ? values : [values];\n\t\tif (values.length === 0) {\n\t\t\tthrow new Error('values() must be called with at least one value');\n\t\t}\n\t\tconst mappedValues = values.map((entry) => {\n\t\t\tconst result: Record<string, Param | SQL> = {};\n\t\t\tconst cols = this.table[Table.Symbol.Columns];\n\t\t\tfor (const colKey of Object.keys(entry)) {\n\t\t\t\tconst colValue = entry[colKey as keyof typeof entry];\n\t\t\t\tresult[colKey] = is(colValue, SQL) ? colValue : new Param(colValue, cols[colKey]);\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\n\t\t// if (mappedValues.length > 1 && mappedValues.some((t) => Object.keys(t).length === 0)) {\n\t\t// \tthrow new Error(\n\t\t// \t\t`One of the values you want to insert is empty. In SQLite you can insert only one empty object per statement. For this case Drizzle with use \"INSERT INTO ... DEFAULT VALUES\" syntax`,\n\t\t// \t);\n\t\t// }\n\n\t\treturn new SQLiteInsertBase(this.table, mappedValues, this.session, this.dialect, this.withList);\n\t}\n\n\tselect(\n\t\tselectQuery: (qb: QueryBuilder) => SQLiteInsertSelectQueryBuilder<TTable>,\n\t): SQLiteInsertBase<TTable, TResultType, TRunResult>;\n\tselect(selectQuery: (qb: QueryBuilder) => SQL): SQLiteInsertBase<TTable, TResultType, TRunResult>;\n\tselect(selectQuery: SQL): SQLiteInsertBase<TTable, TResultType, TRunResult>;\n\tselect(selectQuery: SQLiteInsertSelectQueryBuilder<TTable>): SQLiteInsertBase<TTable, TResultType, TRunResult>;\n\tselect(\n\t\tselectQuery:\n\t\t\t| SQL\n\t\t\t| SQLiteInsertSelectQueryBuilder<TTable>\n\t\t\t| ((qb: QueryBuilder) => SQLiteInsertSelectQueryBuilder<TTable> | SQL),\n\t): SQLiteInsertBase<TTable, TResultType, TRunResult> {\n\t\tconst select = typeof selectQuery === 'function' ? selectQuery(new QueryBuilder()) : selectQuery;\n\n\t\tif (\n\t\t\t!is(select, SQL)\n\t\t\t&& !haveSameKeys(this.table[Columns], select._.selectedFields)\n\t\t) {\n\t\t\tthrow new Error(\n\t\t\t\t'Insert select error: selected fields are not the same or are in a different order compared to the table definition',\n\t\t\t);\n\t\t}\n\n\t\treturn new SQLiteInsertBase(this.table, select, this.session, this.dialect, this.withList, true);\n\t}\n}\n\nexport type SQLiteInsertWithout<T extends AnySQLiteInsert, TDynamic extends boolean, K extends keyof T & string> =\n\tTDynamic extends true ? T\n\t\t: Omit<\n\t\t\tSQLiteInsertBase<\n\t\t\t\tT['_']['table'],\n\t\t\t\tT['_']['resultType'],\n\t\t\t\tT['_']['runResult'],\n\t\t\t\tT['_']['returning'],\n\t\t\t\tTDynamic,\n\t\t\t\tT['_']['excludedMethods'] | K\n\t\t\t>,\n\t\t\tT['_']['excludedMethods'] | K\n\t\t>;\n\nexport type SQLiteInsertReturning<\n\tT extends AnySQLiteInsert,\n\tTDynamic extends boolean,\n\tTSelectedFields extends SelectedFieldsFlat,\n> = SQLiteInsertWithout<\n\tSQLiteInsertBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tSelectResultFields<TSelectedFields>,\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteInsertReturningAll<\n\tT extends AnySQLiteInsert,\n\tTDynamic extends boolean,\n> = SQLiteInsertWithout<\n\tSQLiteInsertBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tT['_']['table']['$inferSelect'],\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteInsertOnConflictDoUpdateConfig<T extends AnySQLiteInsert> = {\n\ttarget: IndexColumn | IndexColumn[];\n\t/** @deprecated - use either `targetWhere` or `setWhere` */\n\twhere?: SQL;\n\t// TODO: add tests for targetWhere and setWhere\n\ttargetWhere?: SQL;\n\tsetWhere?: SQL;\n\tset: SQLiteUpdateSetSource<T['_']['table']>;\n};\n\nexport type SQLiteInsertDynamic<T extends AnySQLiteInsert> = SQLiteInsert<\n\tT['_']['table'],\n\tT['_']['resultType'],\n\tT['_']['runResult'],\n\tT['_']['returning']\n>;\n\nexport type SQLiteInsertExecute<T extends AnySQLiteInsert> = T['_']['returning'] extends undefined ? T['_']['runResult']\n\t: T['_']['returning'][];\n\nexport type SQLiteInsertPrepare<T extends AnySQLiteInsert> = SQLitePreparedQuery<\n\t{\n\t\ttype: T['_']['resultType'];\n\t\trun: T['_']['runResult'];\n\t\tall: T['_']['returning'] extends undefined ? DrizzleTypeError<'.all() cannot be used without .returning()'>\n\t\t\t: T['_']['returning'][];\n\t\tget: T['_']['returning'] extends undefined ? DrizzleTypeError<'.get() cannot be used without .returning()'>\n\t\t\t: T['_']['returning'];\n\t\tvalues: T['_']['returning'] extends undefined ? DrizzleTypeError<'.values() cannot be used without .returning()'>\n\t\t\t: any[][];\n\t\texecute: SQLiteInsertExecute<T>;\n\t}\n>;\n\nexport type AnySQLiteInsert = SQLiteInsertBase<any, any, any, any, any, any>;\n\nexport type SQLiteInsert<\n\tTTable extends SQLiteTable = SQLiteTable,\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = unknown,\n\tTReturning = any,\n> = SQLiteInsertBase<TTable, TResultType, TRunResult, TReturning, true, never>;\n\nexport interface SQLiteInsertBase<\n\tTTable extends SQLiteTable,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTReturning = undefined,\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n> extends\n\tSQLWrapper,\n\tQueryPromise<TReturning extends undefined ? TRunResult : TReturning[]>,\n\tRunnableQuery<TReturning extends undefined ? TRunResult : TReturning[], 'sqlite'>\n{\n\treadonly _: {\n\t\treadonly dialect: 'sqlite';\n\t\treadonly table: TTable;\n\t\treadonly resultType: TResultType;\n\t\treadonly runResult: TRunResult;\n\t\treadonly returning: TReturning;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TReturning extends undefined ? TRunResult : TReturning[];\n\t};\n}\n\nexport class SQLiteInsertBase<\n\tTTable extends SQLiteTable,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTReturning = undefined,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTDynamic extends boolean = false,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<TReturning extends undefined ? TRunResult : TReturning[]>\n\timplements RunnableQuery<TReturning extends undefined ? TRunResult : TReturning[], 'sqlite'>, SQLWrapper\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteInsert';\n\n\t/** @internal */\n\tconfig: SQLiteInsertConfig<TTable>;\n\n\tconstructor(\n\t\ttable: TTable,\n\t\tvalues: SQLiteInsertConfig['values'],\n\t\tprivate session: SQLiteSession<any, any, any, any>,\n\t\tprivate dialect: SQLiteDialect,\n\t\twithList?: Subquery[],\n\t\tselect?: boolean,\n\t) {\n\t\tsuper();\n\t\tthis.config = { table, values: values as any, withList, select };\n\t}\n\n\t/**\n\t * Adds a `returning` clause to the query.\n\t *\n\t * Calling this method will return the specified fields of the inserted rows. If no fields are specified, all fields will be returned.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert#insert-returning}\n\t *\n\t * @example\n\t * ```ts\n\t * // Insert one row and return all fields\n\t * const insertedCar: Car[] = await db.insert(cars)\n\t *   .values({ brand: 'BMW' })\n\t *   .returning();\n\t *\n\t * // Insert one row and return only the id\n\t * const insertedCarId: { id: number }[] = await db.insert(cars)\n\t *   .values({ brand: 'BMW' })\n\t *   .returning({ id: cars.id });\n\t * ```\n\t */\n\treturning(): SQLiteInsertReturningAll<this, TDynamic>;\n\treturning<TSelectedFields extends SelectedFieldsFlat>(\n\t\tfields: TSelectedFields,\n\t): SQLiteInsertReturning<this, TDynamic, TSelectedFields>;\n\treturning(\n\t\tfields: SelectedFieldsFlat = this.config.table[SQLiteTable.Symbol.Columns],\n\t): SQLiteInsertWithout<AnySQLiteInsert, TDynamic, 'returning'> {\n\t\tthis.config.returning = orderSelectedFields<SQLiteColumn>(fields);\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `on conflict do nothing` clause to the query.\n\t *\n\t * Calling this method simply avoids inserting a row as its alternative action.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert#on-conflict-do-nothing}\n\t *\n\t * @param config The `target` and `where` clauses.\n\t *\n\t * @example\n\t * ```ts\n\t * // Insert one row and cancel the insert if there's a conflict\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoNothing();\n\t *\n\t * // Explicitly specify conflict target\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoNothing({ target: cars.id });\n\t * ```\n\t */\n\tonConflictDoNothing(config: { target?: IndexColumn | IndexColumn[]; where?: SQL } = {}): this {\n\t\tif (config.target === undefined) {\n\t\t\tthis.config.onConflict = sql`do nothing`;\n\t\t} else {\n\t\t\tconst targetSql = Array.isArray(config.target) ? sql`${config.target}` : sql`${[config.target]}`;\n\t\t\tconst whereSql = config.where ? sql` where ${config.where}` : sql``;\n\t\t\tthis.config.onConflict = sql`${targetSql} do nothing${whereSql}`;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds an `on conflict do update` clause to the query.\n\t *\n\t * Calling this method will update the existing row that conflicts with the row proposed for insertion as its alternative action.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert#upserts-and-conflicts}\n\t *\n\t * @param config The `target`, `set` and `where` clauses.\n\t *\n\t * @example\n\t * ```ts\n\t * // Update the row if there's a conflict\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoUpdate({\n\t *     target: cars.id,\n\t *     set: { brand: 'Porsche' }\n\t *   });\n\t *\n\t * // Upsert with 'where' clause\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoUpdate({\n\t *     target: cars.id,\n\t *     set: { brand: 'newBMW' },\n\t *     where: sql`${cars.createdAt} > '2023-01-01'::date`,\n\t *   });\n\t * ```\n\t */\n\tonConflictDoUpdate(config: SQLiteInsertOnConflictDoUpdateConfig<this>): this {\n\t\tif (config.where && (config.targetWhere || config.setWhere)) {\n\t\t\tthrow new Error(\n\t\t\t\t'You cannot use both \"where\" and \"targetWhere\"/\"setWhere\" at the same time - \"where\" is deprecated, use \"targetWhere\" or \"setWhere\" instead.',\n\t\t\t);\n\t\t}\n\t\tconst whereSql = config.where ? sql` where ${config.where}` : undefined;\n\t\tconst targetWhereSql = config.targetWhere ? sql` where ${config.targetWhere}` : undefined;\n\t\tconst setWhereSql = config.setWhere ? sql` where ${config.setWhere}` : undefined;\n\t\tconst targetSql = Array.isArray(config.target) ? sql`${config.target}` : sql`${[config.target]}`;\n\t\tconst setSql = this.dialect.buildUpdateSet(this.config.table, mapUpdateSet(this.config.table, config.set));\n\t\tthis.config.onConflict = sql`${targetSql}${targetWhereSql} do update set ${setSql}${whereSql}${setWhereSql}`;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildInsertQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\t/** @internal */\n\t_prepare(isOneTimeQuery = true): SQLiteInsertPrepare<this> {\n\t\treturn this.session[isOneTimeQuery ? 'prepareOneTimeQuery' : 'prepareQuery'](\n\t\t\tthis.dialect.sqlToQuery(this.getSQL()),\n\t\t\tthis.config.returning,\n\t\t\tthis.config.returning ? 'all' : 'run',\n\t\t\ttrue,\n\t\t) as SQLiteInsertPrepare<this>;\n\t}\n\n\tprepare(): SQLiteInsertPrepare<this> {\n\t\treturn this._prepare(false);\n\t}\n\n\trun: ReturnType<this['prepare']>['run'] = (placeholderValues) => {\n\t\treturn this._prepare().run(placeholderValues);\n\t};\n\n\tall: ReturnType<this['prepare']>['all'] = (placeholderValues) => {\n\t\treturn this._prepare().all(placeholderValues);\n\t};\n\n\tget: ReturnType<this['prepare']>['get'] = (placeholderValues) => {\n\t\treturn this._prepare().get(placeholderValues);\n\t};\n\n\tvalues: ReturnType<this['prepare']>['values'] = (placeholderValues) => {\n\t\treturn this._prepare().values(placeholderValues);\n\t};\n\n\toverride async execute(): Promise<SQLiteInsertExecute<this>> {\n\t\treturn (this.config.returning ? this.all() : this.run()) as SQLiteInsertExecute<this>;\n\t}\n\n\t$dynamic(): SQLiteInsertDynamic<this> {\n\t\treturn this as any;\n\t}\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 5872, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5878, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/query-builders/delete.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport type { SelectResultFields } from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { Placeholder, Query, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteDialect } from '~/sqlite-core/dialect.ts';\nimport type { SQLitePreparedQuery, SQLiteSession } from '~/sqlite-core/session.ts';\nimport { SQLiteTable } from '~/sqlite-core/table.ts';\nimport type { Subquery } from '~/subquery.ts';\nimport { Table } from '~/table.ts';\nimport { type DrizzleTypeError, orderSelectedFields, type ValueOrArray } from '~/utils.ts';\nimport type { SQLiteColumn } from '../columns/common.ts';\nimport type { SelectedFieldsFlat, SelectedFieldsOrdered } from './select.types.ts';\n\nexport type SQLiteDeleteWithout<\n\tT extends AnySQLiteDeleteBase,\n\tTDynamic extends boolean,\n\tK extends keyof T & string,\n> = TDynamic extends true ? T\n\t: Omit<\n\t\tSQLiteDeleteBase<\n\t\t\tT['_']['table'],\n\t\t\tT['_']['resultType'],\n\t\t\tT['_']['runResult'],\n\t\t\tT['_']['returning'],\n\t\t\tTDynamic,\n\t\t\tT['_']['excludedMethods'] | K\n\t\t>,\n\t\tT['_']['excludedMethods'] | K\n\t>;\n\nexport type SQLiteDelete<\n\tTTable extends SQLiteTable = SQLiteTable,\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = unknown,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n> = SQLiteDeleteBase<TTable, TResultType, TRunResult, TReturning, true, never>;\n\nexport interface SQLiteDeleteConfig {\n\twhere?: SQL | undefined;\n\tlimit?: number | Placeholder;\n\torderBy?: (SQLiteColumn | SQL | SQL.Aliased)[];\n\ttable: SQLiteTable;\n\treturning?: SelectedFieldsOrdered;\n\twithList?: Subquery[];\n}\n\nexport type SQLiteDeleteReturningAll<\n\tT extends AnySQLiteDeleteBase,\n\tTDynamic extends boolean,\n> = SQLiteDeleteWithout<\n\tSQLiteDeleteBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tT['_']['table']['$inferSelect'],\n\t\tT['_']['dynamic'],\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteDeleteReturning<\n\tT extends AnySQLiteDeleteBase,\n\tTDynamic extends boolean,\n\tTSelectedFields extends SelectedFieldsFlat,\n> = SQLiteDeleteWithout<\n\tSQLiteDeleteBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tSelectResultFields<TSelectedFields>,\n\t\tT['_']['dynamic'],\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteDeleteExecute<T extends AnySQLiteDeleteBase> = T['_']['returning'] extends undefined\n\t? T['_']['runResult']\n\t: T['_']['returning'][];\n\nexport type SQLiteDeletePrepare<T extends AnySQLiteDeleteBase> = SQLitePreparedQuery<{\n\ttype: T['_']['resultType'];\n\trun: T['_']['runResult'];\n\tall: T['_']['returning'] extends undefined ? DrizzleTypeError<'.all() cannot be used without .returning()'>\n\t\t: T['_']['returning'][];\n\tget: T['_']['returning'] extends undefined ? DrizzleTypeError<'.get() cannot be used without .returning()'>\n\t\t: T['_']['returning'] | undefined;\n\tvalues: T['_']['returning'] extends undefined ? DrizzleTypeError<'.values() cannot be used without .returning()'>\n\t\t: any[][];\n\texecute: SQLiteDeleteExecute<T>;\n}>;\n\nexport type SQLiteDeleteDynamic<T extends AnySQLiteDeleteBase> = SQLiteDelete<\n\tT['_']['table'],\n\tT['_']['resultType'],\n\tT['_']['runResult'],\n\tT['_']['returning']\n>;\n\nexport type AnySQLiteDeleteBase = SQLiteDeleteBase<any, any, any, any, any, any>;\n\nexport interface SQLiteDeleteBase<\n\tTTable extends SQLiteTable,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n> extends\n\tQueryPromise<TReturning extends undefined ? TRunResult : TReturning[]>,\n\tRunnableQuery<TReturning extends undefined ? TRunResult : TReturning[], 'sqlite'>,\n\tSQLWrapper\n{\n\treadonly _: {\n\t\tdialect: 'sqlite';\n\t\treadonly table: TTable;\n\t\treadonly resultType: TResultType;\n\t\treadonly runResult: TRunResult;\n\t\treadonly returning: TReturning;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TReturning extends undefined ? TRunResult : TReturning[];\n\t};\n}\n\nexport class SQLiteDeleteBase<\n\tTTable extends SQLiteTable,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n\tTDynamic extends boolean = false,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<TReturning extends undefined ? TRunResult : TReturning[]>\n\timplements RunnableQuery<TReturning extends undefined ? TRunResult : TReturning[], 'sqlite'>, SQLWrapper\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteDelete';\n\n\t/** @internal */\n\tconfig: SQLiteDeleteConfig;\n\n\tconstructor(\n\t\tprivate table: TTable,\n\t\tprivate session: SQLiteSession<any, any, any, any>,\n\t\tprivate dialect: SQLiteDialect,\n\t\twithList?: Subquery[],\n\t) {\n\t\tsuper();\n\t\tthis.config = { table, withList };\n\t}\n\n\t/**\n\t * Adds a `where` clause to the query.\n\t *\n\t * Calling this method will delete only those rows that fulfill a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/delete}\n\t *\n\t * @param where the `where` clause.\n\t *\n\t * @example\n\t * You can use conditional operators and `sql function` to filter the rows to be deleted.\n\t *\n\t * ```ts\n\t * // Delete all cars with green color\n\t * db.delete(cars).where(eq(cars.color, 'green'));\n\t * // or\n\t * db.delete(cars).where(sql`${cars.color} = 'green'`)\n\t * ```\n\t *\n\t * You can logically combine conditional operators with `and()` and `or()` operators:\n\t *\n\t * ```ts\n\t * // Delete all BMW cars with a green color\n\t * db.delete(cars).where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n\t *\n\t * // Delete all cars with the green or blue color\n\t * db.delete(cars).where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n\t * ```\n\t */\n\twhere(where: SQL | undefined): SQLiteDeleteWithout<this, TDynamic, 'where'> {\n\t\tthis.config.where = where;\n\t\treturn this as any;\n\t}\n\n\torderBy(\n\t\tbuilder: (deleteTable: TTable) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>,\n\t): SQLiteDeleteWithout<this, TDynamic, 'orderBy'>;\n\torderBy(...columns: (SQLiteColumn | SQL | SQL.Aliased)[]): SQLiteDeleteWithout<this, TDynamic, 'orderBy'>;\n\torderBy(\n\t\t...columns:\n\t\t\t| [(deleteTable: TTable) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>]\n\t\t\t| (SQLiteColumn | SQL | SQL.Aliased)[]\n\t): SQLiteDeleteWithout<this, TDynamic, 'orderBy'> {\n\t\tif (typeof columns[0] === 'function') {\n\t\t\tconst orderBy = columns[0](\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.table[Table.Symbol.Columns],\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' }),\n\t\t\t\t) as any,\n\t\t\t);\n\n\t\t\tconst orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];\n\t\t\tthis.config.orderBy = orderByArray;\n\t\t} else {\n\t\t\tconst orderByArray = columns as (SQLiteColumn | SQL | SQL.Aliased)[];\n\t\t\tthis.config.orderBy = orderByArray;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\tlimit(limit: number | Placeholder): SQLiteDeleteWithout<this, TDynamic, 'limit'> {\n\t\tthis.config.limit = limit;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `returning` clause to the query.\n\t *\n\t * Calling this method will return the specified fields of the deleted rows. If no fields are specified, all fields will be returned.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/delete#delete-with-return}\n\t *\n\t * @example\n\t * ```ts\n\t * // Delete all cars with the green color and return all fields\n\t * const deletedCars: Car[] = await db.delete(cars)\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning();\n\t *\n\t * // Delete all cars with the green color and return only their id and brand fields\n\t * const deletedCarsIdsAndBrands: { id: number, brand: string }[] = await db.delete(cars)\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning({ id: cars.id, brand: cars.brand });\n\t * ```\n\t */\n\treturning(): SQLiteDeleteReturningAll<this, TDynamic>;\n\treturning<TSelectedFields extends SelectedFieldsFlat>(\n\t\tfields: TSelectedFields,\n\t): SQLiteDeleteReturning<this, TDynamic, TSelectedFields>;\n\treturning(\n\t\tfields: SelectedFieldsFlat = this.table[SQLiteTable.Symbol.Columns],\n\t): SQLiteDeleteReturning<this, TDynamic, any> {\n\t\tthis.config.returning = orderSelectedFields<SQLiteColumn>(fields);\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildDeleteQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\t/** @internal */\n\t_prepare(isOneTimeQuery = true): SQLiteDeletePrepare<this> {\n\t\treturn this.session[isOneTimeQuery ? 'prepareOneTimeQuery' : 'prepareQuery'](\n\t\t\tthis.dialect.sqlToQuery(this.getSQL()),\n\t\t\tthis.config.returning,\n\t\t\tthis.config.returning ? 'all' : 'run',\n\t\t\ttrue,\n\t\t) as SQLiteDeletePrepare<this>;\n\t}\n\n\tprepare(): SQLiteDeletePrepare<this> {\n\t\treturn this._prepare(false);\n\t}\n\n\trun: ReturnType<this['prepare']>['run'] = (placeholderValues) => {\n\t\treturn this._prepare().run(placeholderValues);\n\t};\n\n\tall: ReturnType<this['prepare']>['all'] = (placeholderValues) => {\n\t\treturn this._prepare().all(placeholderValues);\n\t};\n\n\tget: ReturnType<this['prepare']>['get'] = (placeholderValues) => {\n\t\treturn this._prepare().get(placeholderValues);\n\t};\n\n\tvalues: ReturnType<this['prepare']>['values'] = (placeholderValues) => {\n\t\treturn this._prepare().values(placeholderValues);\n\t};\n\n\toverride async execute(placeholderValues?: Record<string, unknown>): Promise<SQLiteDeleteExecute<this>> {\n\t\treturn this._prepare().execute(placeholderValues) as SQLiteDeleteExecute<this>;\n\t}\n\n\t$dynamic(): SQLiteDeleteDynamic<this> {\n\t\treturn this as any;\n\t}\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 5996, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6002, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/query-builders/raw.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { PreparedQuery } from '~/session.ts';\nimport type { SQL, SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteAsyncDialect } from '../dialect.ts';\n\ntype SQLiteRawAction = 'all' | 'get' | 'values' | 'run';\nexport interface SQLiteRawConfig {\n\taction: SQLiteRawAction;\n}\n\nexport interface SQLiteRaw<TResult> extends QueryPromise<TResult>, RunnableQuery<TResult, 'sqlite'>, SQLWrapper {}\n\nexport class SQLiteRaw<TResult> extends QueryPromise<TResult>\n\timplements RunnableQuery<TResult, 'sqlite'>, SQLWrapper, PreparedQuery\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteRaw';\n\n\tdeclare readonly _: {\n\t\treadonly dialect: 'sqlite';\n\t\treadonly result: TResult;\n\t};\n\n\t/** @internal */\n\tconfig: SQLiteRawConfig;\n\n\tconstructor(\n\t\tpublic execute: () => Promise<TResult>,\n\t\t/** @internal */\n\t\tpublic getSQL: () => SQL,\n\t\taction: SQLiteRawAction,\n\t\tprivate dialect: SQLiteAsyncDialect,\n\t\tprivate mapBatchResult: (result: unknown) => unknown,\n\t) {\n\t\tsuper();\n\t\tthis.config = { action };\n\t}\n\n\tgetQuery() {\n\t\treturn { ...this.dialect.sqlToQuery(this.getSQL()), method: this.config.action };\n\t}\n\n\tmapResult(result: unknown, isFromBatch?: boolean) {\n\t\treturn isFromBatch ? this.mapBatchResult(result) : result;\n\t}\n\n\t_prepare(): PreparedQuery {\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tisResponseInArrayMode(): boolean {\n\t\treturn false;\n\t}\n}\n"],"names":[],"mappings":";;;AAAA,SAAS,kBAAkB;AAC3B,SAAS,oBAAoB;;;AAatB,MAAM,qKAA2B,eAAA,CAExC;IAWC,YACQ,OAAA,EAEA,MAAA,EACP,MAAA,EACQ,OAAA,EACA,cAAA,CACP;QACD,KAAA,CAAM;QAPC,IAAA,CAAA,OAAA,GAAA;QAEA,IAAA,CAAA,MAAA,GAAA;QAEC,IAAA,CAAA,OAAA,GAAA;QACA,IAAA,CAAA,cAAA,GAAA;QAGR,IAAA,CAAK,MAAA,GAAS;YAAE;QAAO;IACxB;IApBA,OAAA,0IAA0B,aAAU,CAAA,GAAY,YAAA;IAAA,cAAA,GAQhD,OAAA;IAcA,WAAW;QACV,OAAO;YAAE,GAAG,IAAA,CAAK,OAAA,CAAQ,UAAA,CAAW,IAAA,CAAK,MAAA,CAAO,CAAC,CAAA;YAAG,QAAQ,IAAA,CAAK,MAAA,CAAO,MAAA;QAAO;IAChF;IAEA,UAAU,MAAA,EAAiB,WAAA,EAAuB;QACjD,OAAO,cAAc,IAAA,CAAK,cAAA,CAAe,MAAM,IAAI;IACpD;IAEA,WAA0B;QACzB,OAAO,IAAA;IACR;IAAA,cAAA,GAGA,wBAAiC;QAChC,OAAO;IACR;AACD","ignoreList":[0]}},
    {"offset": {"line": 6040, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6046, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Desktop/ikeandrie/work/jje-fork/web/node_modules/src/sqlite-core/db.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type { ExtractTablesWithRelations, RelationalSchemaConfig, TablesRelationalConfig } from '~/relations.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport { type ColumnsSelection, type SQL, sql, type SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteAsyncDialect, SQLiteSyncDialect } from '~/sqlite-core/dialect.ts';\nimport {\n\tQueryBuilder,\n\tSQLiteDeleteBase,\n\tSQLiteInsertBuilder,\n\tSQLiteSelectBuilder,\n\tSQLiteUpdateBuilder,\n} from '~/sqlite-core/query-builders/index.ts';\nimport type {\n\tDBResult,\n\tResult,\n\tSQLiteSession,\n\tSQLiteTransaction,\n\tSQLiteTransactionConfig,\n} from '~/sqlite-core/session.ts';\nimport type { SQLiteTable } from '~/sqlite-core/table.ts';\nimport { WithSubquery } from '~/subquery.ts';\nimport type { DrizzleTypeError } from '~/utils.ts';\nimport { SQLiteCountBuilder } from './query-builders/count.ts';\nimport { RelationalQueryBuilder } from './query-builders/query.ts';\nimport { SQLiteRaw } from './query-builders/raw.ts';\nimport type { SelectedFields } from './query-builders/select.types.ts';\nimport type { WithSubqueryWithSelection } from './subquery.ts';\nimport type { SQLiteViewBase } from './view-base.ts';\n\nexport class BaseSQLiteDatabase<\n\tTResultKind extends 'sync' | 'async',\n\tTRunResult,\n\tTFullSchema extends Record<string, unknown> = Record<string, never>,\n\tTSchema extends TablesRelationalConfig = ExtractTablesWithRelations<TFullSchema>,\n> {\n\tstatic readonly [entityKind]: string = 'BaseSQLiteDatabase';\n\n\tdeclare readonly _: {\n\t\treadonly schema: TSchema | undefined;\n\t\treadonly fullSchema: TFullSchema;\n\t\treadonly tableNamesMap: Record<string, string>;\n\t};\n\n\tquery: TFullSchema extends Record<string, never>\n\t\t? DrizzleTypeError<'Seems like the schema generic is missing - did you forget to add it to your DB type?'>\n\t\t: {\n\t\t\t[K in keyof TSchema]: RelationalQueryBuilder<TResultKind, TFullSchema, TSchema, TSchema[K]>;\n\t\t};\n\n\tconstructor(\n\t\tprivate resultKind: TResultKind,\n\t\t/** @internal */\n\t\treadonly dialect: { sync: SQLiteSyncDialect; async: SQLiteAsyncDialect }[TResultKind],\n\t\t/** @internal */\n\t\treadonly session: SQLiteSession<TResultKind, TRunResult, TFullSchema, TSchema>,\n\t\tschema: RelationalSchemaConfig<TSchema> | undefined,\n\t) {\n\t\tthis._ = schema\n\t\t\t? {\n\t\t\t\tschema: schema.schema,\n\t\t\t\tfullSchema: schema.fullSchema as TFullSchema,\n\t\t\t\ttableNamesMap: schema.tableNamesMap,\n\t\t\t}\n\t\t\t: {\n\t\t\t\tschema: undefined,\n\t\t\t\tfullSchema: {} as TFullSchema,\n\t\t\t\ttableNamesMap: {},\n\t\t\t};\n\t\tthis.query = {} as typeof this['query'];\n\t\tconst query = this.query as {\n\t\t\t[K in keyof TSchema]: RelationalQueryBuilder<TResultKind, TFullSchema, TSchema, TSchema[K]>;\n\t\t};\n\t\tif (this._.schema) {\n\t\t\tfor (const [tableName, columns] of Object.entries(this._.schema)) {\n\t\t\t\tquery[tableName as keyof TSchema] = new RelationalQueryBuilder(\n\t\t\t\t\tresultKind,\n\t\t\t\t\tschema!.fullSchema,\n\t\t\t\t\tthis._.schema,\n\t\t\t\t\tthis._.tableNamesMap,\n\t\t\t\t\tschema!.fullSchema[tableName] as SQLiteTable,\n\t\t\t\t\tcolumns,\n\t\t\t\t\tdialect,\n\t\t\t\t\tsession as SQLiteSession<any, any, any, any> as any,\n\t\t\t\t) as typeof query[keyof TSchema];\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates a subquery that defines a temporary named result set as a CTE.\n\t *\n\t * It is useful for breaking down complex queries into simpler parts and for reusing the result set in subsequent parts of the query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#with-clause}\n\t *\n\t * @param alias The alias for the subquery.\n\t *\n\t * Failure to provide an alias will result in a DrizzleTypeError, preventing the subquery from being referenced in other queries.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Create a subquery with alias 'sq' and use it in the select query\n\t * const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));\n\t *\n\t * const result = await db.with(sq).select().from(sq);\n\t * ```\n\t *\n\t * To select arbitrary SQL values as fields in a CTE and reference them in other CTEs or in the main query, you need to add aliases to them:\n\t *\n\t * ```ts\n\t * // Select an arbitrary SQL value as a field in a CTE and reference it in the main query\n\t * const sq = db.$with('sq').as(db.select({\n\t *   name: sql<string>`upper(${users.name})`.as('name'),\n\t * })\n\t * .from(users));\n\t *\n\t * const result = await db.with(sq).select({ name: sq.name }).from(sq);\n\t * ```\n\t */\n\t$with<TAlias extends string>(alias: TAlias) {\n\t\tconst self = this;\n\t\treturn {\n\t\t\tas<TSelection extends ColumnsSelection>(\n\t\t\t\tqb: TypedQueryBuilder<TSelection> | ((qb: QueryBuilder) => TypedQueryBuilder<TSelection>),\n\t\t\t): WithSubqueryWithSelection<TSelection, TAlias> {\n\t\t\t\tif (typeof qb === 'function') {\n\t\t\t\t\tqb = qb(new QueryBuilder(self.dialect));\n\t\t\t\t}\n\n\t\t\t\treturn new Proxy(\n\t\t\t\t\tnew WithSubquery(qb.getSQL(), qb.getSelectedFields() as SelectedFields, alias, true),\n\t\t\t\t\tnew SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t\t\t) as WithSubqueryWithSelection<TSelection, TAlias>;\n\t\t\t},\n\t\t};\n\t}\n\n\t$count(\n\t\tsource: SQLiteTable | SQLiteViewBase | SQL | SQLWrapper,\n\t\tfilters?: SQL<unknown>,\n\t) {\n\t\treturn new SQLiteCountBuilder({ source, filters, session: this.session });\n\t}\n\n\t/**\n\t * Incorporates a previously defined CTE (using `$with`) into the main query.\n\t *\n\t * This method allows the main query to reference a temporary named result set.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#with-clause}\n\t *\n\t * @param queries The CTEs to incorporate into the main query.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Define a subquery 'sq' as a CTE using $with\n\t * const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));\n\t *\n\t * // Incorporate the CTE 'sq' into the main query and select from it\n\t * const result = await db.with(sq).select().from(sq);\n\t * ```\n\t */\n\twith(...queries: WithSubquery[]) {\n\t\tconst self = this;\n\n\t\t/**\n\t\t * Creates a select query.\n\t\t *\n\t\t * Calling this method with no arguments will select all columns from the table. Pass a selection object to specify the columns you want to select.\n\t\t *\n\t\t * Use `.from()` method to specify which table to select from.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/select}\n\t\t *\n\t\t * @param fields The selection object.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Select all columns and all rows from the 'cars' table\n\t\t * const allCars: Car[] = await db.select().from(cars);\n\t\t *\n\t\t * // Select specific columns and all rows from the 'cars' table\n\t\t * const carsIdsAndBrands: { id: number; brand: string }[] = await db.select({\n\t\t *   id: cars.id,\n\t\t *   brand: cars.brand\n\t\t * })\n\t\t *   .from(cars);\n\t\t * ```\n\t\t *\n\t\t * Like in SQL, you can use arbitrary expressions as selection fields, not just table columns:\n\t\t *\n\t\t * ```ts\n\t\t * // Select specific columns along with expression and all rows from the 'cars' table\n\t\t * const carsIdsAndLowerNames: { id: number; lowerBrand: string }[] = await db.select({\n\t\t *   id: cars.id,\n\t\t *   lowerBrand: sql<string>`lower(${cars.brand})`,\n\t\t * })\n\t\t *   .from(cars);\n\t\t * ```\n\t\t */\n\t\tfunction select(): SQLiteSelectBuilder<undefined, TResultKind, TRunResult>;\n\t\tfunction select<TSelection extends SelectedFields>(\n\t\t\tfields: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection, TResultKind, TRunResult>;\n\t\tfunction select(\n\t\t\tfields?: SelectedFields,\n\t\t): SQLiteSelectBuilder<SelectedFields | undefined, TResultKind, TRunResult> {\n\t\t\treturn new SQLiteSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: self.session,\n\t\t\t\tdialect: self.dialect,\n\t\t\t\twithList: queries,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Adds `distinct` expression to the select query.\n\t\t *\n\t\t * Calling this method will return only unique values. When multiple columns are selected, it returns rows with unique combinations of values in these columns.\n\t\t *\n\t\t * Use `.from()` method to specify which table to select from.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/select#distinct}\n\t\t *\n\t\t * @param fields The selection object.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Select all unique rows from the 'cars' table\n\t\t * await db.selectDistinct()\n\t\t *   .from(cars)\n\t\t *   .orderBy(cars.id, cars.brand, cars.color);\n\t\t *\n\t\t * // Select all unique brands from the 'cars' table\n\t\t * await db.selectDistinct({ brand: cars.brand })\n\t\t *   .from(cars)\n\t\t *   .orderBy(cars.brand);\n\t\t * ```\n\t\t */\n\t\tfunction selectDistinct(): SQLiteSelectBuilder<undefined, TResultKind, TRunResult>;\n\t\tfunction selectDistinct<TSelection extends SelectedFields>(\n\t\t\tfields: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection, TResultKind, TRunResult>;\n\t\tfunction selectDistinct(\n\t\t\tfields?: SelectedFields,\n\t\t): SQLiteSelectBuilder<SelectedFields | undefined, TResultKind, TRunResult> {\n\t\t\treturn new SQLiteSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: self.session,\n\t\t\t\tdialect: self.dialect,\n\t\t\t\twithList: queries,\n\t\t\t\tdistinct: true,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Creates an update query.\n\t\t *\n\t\t * Calling this method without `.where()` clause will update all rows in a table. The `.where()` clause specifies which rows should be updated.\n\t\t *\n\t\t * Use `.set()` method to specify which values to update.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/update}\n\t\t *\n\t\t * @param table The table to update.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Update all rows in the 'cars' table\n\t\t * await db.update(cars).set({ color: 'red' });\n\t\t *\n\t\t * // Update rows with filters and conditions\n\t\t * await db.update(cars).set({ color: 'red' }).where(eq(cars.brand, 'BMW'));\n\t\t *\n\t\t * // Update with returning clause\n\t\t * const updatedCar: Car[] = await db.update(cars)\n\t\t *   .set({ color: 'red' })\n\t\t *   .where(eq(cars.id, 1))\n\t\t *   .returning();\n\t\t * ```\n\t\t */\n\t\tfunction update<TTable extends SQLiteTable>(table: TTable): SQLiteUpdateBuilder<TTable, TResultKind, TRunResult> {\n\t\t\treturn new SQLiteUpdateBuilder(table, self.session, self.dialect, queries);\n\t\t}\n\n\t\t/**\n\t\t * Creates an insert query.\n\t\t *\n\t\t * Calling this method will create new rows in a table. Use `.values()` method to specify which values to insert.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/insert}\n\t\t *\n\t\t * @param table The table to insert into.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Insert one row\n\t\t * await db.insert(cars).values({ brand: 'BMW' });\n\t\t *\n\t\t * // Insert multiple rows\n\t\t * await db.insert(cars).values([{ brand: 'BMW' }, { brand: 'Porsche' }]);\n\t\t *\n\t\t * // Insert with returning clause\n\t\t * const insertedCar: Car[] = await db.insert(cars)\n\t\t *   .values({ brand: 'BMW' })\n\t\t *   .returning();\n\t\t * ```\n\t\t */\n\t\tfunction insert<TTable extends SQLiteTable>(into: TTable): SQLiteInsertBuilder<TTable, TResultKind, TRunResult> {\n\t\t\treturn new SQLiteInsertBuilder(into, self.session, self.dialect, queries);\n\t\t}\n\n\t\t/**\n\t\t * Creates a delete query.\n\t\t *\n\t\t * Calling this method without `.where()` clause will delete all rows in a table. The `.where()` clause specifies which rows should be deleted.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/delete}\n\t\t *\n\t\t * @param table The table to delete from.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Delete all rows in the 'cars' table\n\t\t * await db.delete(cars);\n\t\t *\n\t\t * // Delete rows with filters and conditions\n\t\t * await db.delete(cars).where(eq(cars.color, 'green'));\n\t\t *\n\t\t * // Delete with returning clause\n\t\t * const deletedCar: Car[] = await db.delete(cars)\n\t\t *   .where(eq(cars.id, 1))\n\t\t *   .returning();\n\t\t * ```\n\t\t */\n\t\tfunction delete_<TTable extends SQLiteTable>(from: TTable): SQLiteDeleteBase<TTable, TResultKind, TRunResult> {\n\t\t\treturn new SQLiteDeleteBase(from, self.session, self.dialect, queries);\n\t\t}\n\n\t\treturn { select, selectDistinct, update, insert, delete: delete_ };\n\t}\n\n\t/**\n\t * Creates a select query.\n\t *\n\t * Calling this method with no arguments will select all columns from the table. Pass a selection object to specify the columns you want to select.\n\t *\n\t * Use `.from()` method to specify which table to select from.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select}\n\t *\n\t * @param fields The selection object.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all columns and all rows from the 'cars' table\n\t * const allCars: Car[] = await db.select().from(cars);\n\t *\n\t * // Select specific columns and all rows from the 'cars' table\n\t * const carsIdsAndBrands: { id: number; brand: string }[] = await db.select({\n\t *   id: cars.id,\n\t *   brand: cars.brand\n\t * })\n\t *   .from(cars);\n\t * ```\n\t *\n\t * Like in SQL, you can use arbitrary expressions as selection fields, not just table columns:\n\t *\n\t * ```ts\n\t * // Select specific columns along with expression and all rows from the 'cars' table\n\t * const carsIdsAndLowerNames: { id: number; lowerBrand: string }[] = await db.select({\n\t *   id: cars.id,\n\t *   lowerBrand: sql<string>`lower(${cars.brand})`,\n\t * })\n\t *   .from(cars);\n\t * ```\n\t */\n\tselect(): SQLiteSelectBuilder<undefined, TResultKind, TRunResult>;\n\tselect<TSelection extends SelectedFields>(\n\t\tfields: TSelection,\n\t): SQLiteSelectBuilder<TSelection, TResultKind, TRunResult>;\n\tselect(fields?: SelectedFields): SQLiteSelectBuilder<SelectedFields | undefined, TResultKind, TRunResult> {\n\t\treturn new SQLiteSelectBuilder({ fields: fields ?? undefined, session: this.session, dialect: this.dialect });\n\t}\n\n\t/**\n\t * Adds `distinct` expression to the select query.\n\t *\n\t * Calling this method will return only unique values. When multiple columns are selected, it returns rows with unique combinations of values in these columns.\n\t *\n\t * Use `.from()` method to specify which table to select from.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#distinct}\n\t *\n\t * @param fields The selection object.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all unique rows from the 'cars' table\n\t * await db.selectDistinct()\n\t *   .from(cars)\n\t *   .orderBy(cars.id, cars.brand, cars.color);\n\t *\n\t * // Select all unique brands from the 'cars' table\n\t * await db.selectDistinct({ brand: cars.brand })\n\t *   .from(cars)\n\t *   .orderBy(cars.brand);\n\t * ```\n\t */\n\tselectDistinct(): SQLiteSelectBuilder<undefined, TResultKind, TRunResult>;\n\tselectDistinct<TSelection extends SelectedFields>(\n\t\tfields: TSelection,\n\t): SQLiteSelectBuilder<TSelection, TResultKind, TRunResult>;\n\tselectDistinct(\n\t\tfields?: SelectedFields,\n\t): SQLiteSelectBuilder<SelectedFields | undefined, TResultKind, TRunResult> {\n\t\treturn new SQLiteSelectBuilder({\n\t\t\tfields: fields ?? undefined,\n\t\t\tsession: this.session,\n\t\t\tdialect: this.dialect,\n\t\t\tdistinct: true,\n\t\t});\n\t}\n\n\t/**\n\t * Creates an update query.\n\t *\n\t * Calling this method without `.where()` clause will update all rows in a table. The `.where()` clause specifies which rows should be updated.\n\t *\n\t * Use `.set()` method to specify which values to update.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/update}\n\t *\n\t * @param table The table to update.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Update all rows in the 'cars' table\n\t * await db.update(cars).set({ color: 'red' });\n\t *\n\t * // Update rows with filters and conditions\n\t * await db.update(cars).set({ color: 'red' }).where(eq(cars.brand, 'BMW'));\n\t *\n\t * // Update with returning clause\n\t * const updatedCar: Car[] = await db.update(cars)\n\t *   .set({ color: 'red' })\n\t *   .where(eq(cars.id, 1))\n\t *   .returning();\n\t * ```\n\t */\n\tupdate<TTable extends SQLiteTable>(table: TTable): SQLiteUpdateBuilder<TTable, TResultKind, TRunResult> {\n\t\treturn new SQLiteUpdateBuilder(table, this.session, this.dialect);\n\t}\n\n\t/**\n\t * Creates an insert query.\n\t *\n\t * Calling this method will create new rows in a table. Use `.values()` method to specify which values to insert.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert}\n\t *\n\t * @param table The table to insert into.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Insert one row\n\t * await db.insert(cars).values({ brand: 'BMW' });\n\t *\n\t * // Insert multiple rows\n\t * await db.insert(cars).values([{ brand: 'BMW' }, { brand: 'Porsche' }]);\n\t *\n\t * // Insert with returning clause\n\t * const insertedCar: Car[] = await db.insert(cars)\n\t *   .values({ brand: 'BMW' })\n\t *   .returning();\n\t * ```\n\t */\n\tinsert<TTable extends SQLiteTable>(into: TTable): SQLiteInsertBuilder<TTable, TResultKind, TRunResult> {\n\t\treturn new SQLiteInsertBuilder(into, this.session, this.dialect);\n\t}\n\n\t/**\n\t * Creates a delete query.\n\t *\n\t * Calling this method without `.where()` clause will delete all rows in a table. The `.where()` clause specifies which rows should be deleted.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/delete}\n\t *\n\t * @param table The table to delete from.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Delete all rows in the 'cars' table\n\t * await db.delete(cars);\n\t *\n\t * // Delete rows with filters and conditions\n\t * await db.delete(cars).where(eq(cars.color, 'green'));\n\t *\n\t * // Delete with returning clause\n\t * const deletedCar: Car[] = await db.delete(cars)\n\t *   .where(eq(cars.id, 1))\n\t *   .returning();\n\t * ```\n\t */\n\tdelete<TTable extends SQLiteTable>(from: TTable): SQLiteDeleteBase<TTable, TResultKind, TRunResult> {\n\t\treturn new SQLiteDeleteBase(from, this.session, this.dialect);\n\t}\n\n\trun(query: SQLWrapper | string): DBResult<TResultKind, TRunResult> {\n\t\tconst sequel = typeof query === 'string' ? sql.raw(query) : query.getSQL();\n\t\tif (this.resultKind === 'async') {\n\t\t\treturn new SQLiteRaw(\n\t\t\t\tasync () => this.session.run(sequel),\n\t\t\t\t() => sequel,\n\t\t\t\t'run',\n\t\t\t\tthis.dialect as SQLiteAsyncDialect,\n\t\t\t\tthis.session.extractRawRunValueFromBatchResult.bind(this.session),\n\t\t\t) as DBResult<TResultKind, TRunResult>;\n\t\t}\n\t\treturn this.session.run(sequel) as DBResult<TResultKind, TRunResult>;\n\t}\n\n\tall<T = unknown>(query: SQLWrapper | string): DBResult<TResultKind, T[]> {\n\t\tconst sequel = typeof query === 'string' ? sql.raw(query) : query.getSQL();\n\t\tif (this.resultKind === 'async') {\n\t\t\treturn new SQLiteRaw(\n\t\t\t\tasync () => this.session.all(sequel),\n\t\t\t\t() => sequel,\n\t\t\t\t'all',\n\t\t\t\tthis.dialect as SQLiteAsyncDialect,\n\t\t\t\tthis.session.extractRawAllValueFromBatchResult.bind(this.session),\n\t\t\t) as any;\n\t\t}\n\t\treturn this.session.all(sequel) as DBResult<TResultKind, T[]>;\n\t}\n\n\tget<T = unknown>(query: SQLWrapper | string): DBResult<TResultKind, T> {\n\t\tconst sequel = typeof query === 'string' ? sql.raw(query) : query.getSQL();\n\t\tif (this.resultKind === 'async') {\n\t\t\treturn new SQLiteRaw(\n\t\t\t\tasync () => this.session.get(sequel),\n\t\t\t\t() => sequel,\n\t\t\t\t'get',\n\t\t\t\tthis.dialect as SQLiteAsyncDialect,\n\t\t\t\tthis.session.extractRawGetValueFromBatchResult.bind(this.session),\n\t\t\t) as DBResult<TResultKind, T>;\n\t\t}\n\t\treturn this.session.get(sequel) as DBResult<TResultKind, T>;\n\t}\n\n\tvalues<T extends unknown[] = unknown[]>(query: SQLWrapper | string): DBResult<TResultKind, T[]> {\n\t\tconst sequel = typeof query === 'string' ? sql.raw(query) : query.getSQL();\n\t\tif (this.resultKind === 'async') {\n\t\t\treturn new SQLiteRaw(\n\t\t\t\tasync () => this.session.values(sequel),\n\t\t\t\t() => sequel,\n\t\t\t\t'values',\n\t\t\t\tthis.dialect as SQLiteAsyncDialect,\n\t\t\t\tthis.session.extractRawValuesValueFromBatchResult.bind(this.session),\n\t\t\t) as any;\n\t\t}\n\t\treturn this.session.values(sequel) as DBResult<TResultKind, T[]>;\n\t}\n\n\ttransaction<T>(\n\t\ttransaction: (tx: SQLiteTransaction<TResultKind, TRunResult, TFullSchema, TSchema>) => Result<TResultKind, T>,\n\t\tconfig?: SQLiteTransactionConfig,\n\t): Result<TResultKind, T> {\n\t\treturn this.session.transaction(transaction, config);\n\t}\n}\n\nexport type SQLiteWithReplicas<Q> = Q & { $primary: Q };\n\nexport const withReplicas = <\n\tTResultKind extends 'sync' | 'async',\n\tTRunResult,\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n\tQ extends BaseSQLiteDatabase<\n\t\tTResultKind,\n\t\tTRunResult,\n\t\tTFullSchema,\n\t\tTSchema extends Record<string, unknown> ? ExtractTablesWithRelations<TFullSchema> : TSchema\n\t>,\n>(\n\tprimary: Q,\n\treplicas: [Q, ...Q[]],\n\tgetReplica: (replicas: Q[]) => Q = () => replicas[Math.floor(Math.random() * replicas.length)]!,\n): SQLiteWithReplicas<Q> => {\n\tconst select: Q['select'] = (...args: []) => getReplica(replicas).select(...args);\n\tconst selectDistinct: Q['selectDistinct'] = (...args: []) => getReplica(replicas).selectDistinct(...args);\n\tconst $with: Q['with'] = (...args: []) => getReplica(replicas).with(...args);\n\n\tconst update: Q['update'] = (...args: [any]) => primary.update(...args);\n\tconst insert: Q['insert'] = (...args: [any]) => primary.insert(...args);\n\tconst $delete: Q['delete'] = (...args: [any]) => primary.delete(...args);\n\tconst run: Q['run'] = (...args: [any]) => primary.run(...args);\n\tconst all: Q['all'] = (...args: [any]) => primary.all(...args);\n\tconst get: Q['get'] = (...args: [any]) => primary.get(...args);\n\tconst values: Q['values'] = (...args: [any]) => primary.values(...args);\n\tconst transaction: Q['transaction'] = (...args: [any]) => primary.transaction(...args);\n\n\treturn {\n\t\t...primary,\n\t\tupdate,\n\t\tinsert,\n\t\tdelete: $delete,\n\t\trun,\n\t\tall,\n\t\tget,\n\t\tvalues,\n\t\ttransaction,\n\t\t$primary: primary,\n\t\tselect,\n\t\tselectDistinct,\n\t\twith: $with,\n\t\tget query() {\n\t\t\treturn getReplica(replicas).query;\n\t\t},\n\t};\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 6362, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}